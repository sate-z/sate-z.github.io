<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Zabbix监控Mysql]]></title>
      <url>http://yoursite.com/2016/12/15/Zabbix%E7%9B%91%E6%8E%A7Mysql/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在zabbix中有官方提供的关于mysql的监控模版，但是该模板需要在zabbix的客户端添加自定义的key来取值。  </p>
</blockquote>
<h3 id="1-check-mysql-sh"><a href="#1-check-mysql-sh" class="headerlink" title="1. check_mysql.sh"></a>1. check_mysql.sh</h3><p>编写脚本来获取mysql的各个状态值，放置在/alidata/zabbix-agentd/scripts/chk_mysql.sh。  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># -------------------------------------------------------------------------------</span></div><div class="line"><span class="comment"># FileName:    check_mysql.sh</span></div><div class="line"><span class="comment"># Revision:    1.0</span></div><div class="line"><span class="comment"># Date:        2015/06/09</span></div><div class="line"><span class="comment"># Author:      DengYun</span></div><div class="line"><span class="comment"># Email:       dengyun@ttlsa.com</span></div><div class="line"><span class="comment"># Website:     www.ttlsa.com</span></div><div class="line"><span class="comment"># Description: </span></div><div class="line"><span class="comment"># Notes:       ~</span></div><div class="line"><span class="comment"># -------------------------------------------------------------------------------</span></div><div class="line"><span class="comment"># Copyright:   2015 (c) DengYun</span></div><div class="line"><span class="comment"># License:     GPL</span></div><div class="line"> </div><div class="line"><span class="comment"># 用户名</span></div><div class="line">MYSQL_USER=<span class="string">'zabbix'</span></div><div class="line"> </div><div class="line"><span class="comment"># 密码</span></div><div class="line">MYSQL_PWD=<span class="string">'123123'</span></div><div class="line"> </div><div class="line"><span class="comment"># 主机地址/IP</span></div><div class="line">MYSQL_HOST=<span class="string">'127.0.0.1'</span></div><div class="line"> </div><div class="line"><span class="comment"># 端口</span></div><div class="line">MYSQL_PORT=<span class="string">'3306'</span></div><div class="line"> </div><div class="line"><span class="comment"># 数据连接</span></div><div class="line">MYSQL_CONN=<span class="string">"/alidata/server/mysql/bin/mysqladmin -u<span class="variable">$&#123;MYSQL_USER&#125;</span> -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> -h<span class="variable">$&#123;MYSQL_HOST&#125;</span> -P<span class="variable">$&#123;MYSQL_PORT&#125;</span>"</span></div><div class="line"> </div><div class="line"><span class="comment"># 参数是否正确</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-ne</span> <span class="string">"1"</span> ];<span class="keyword">then</span> </div><div class="line">    <span class="built_in">echo</span> <span class="string">"arg error!"</span> </div><div class="line"><span class="keyword">fi</span> </div><div class="line"> </div><div class="line"><span class="comment"># 获取数据</span></div><div class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span> </div><div class="line">    Uptime) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status|cut <span class="_">-f</span>2 <span class="_">-d</span><span class="string">":"</span>|cut <span class="_">-f</span>1 <span class="_">-d</span><span class="string">"T"</span>` </div><div class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">        ;; </div><div class="line">    Com_update) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_update"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">        ;; </div><div class="line">    Slow_queries) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status |cut <span class="_">-f</span>5 <span class="_">-d</span><span class="string">":"</span>|cut <span class="_">-f</span>1 <span class="_">-d</span><span class="string">"O"</span>` </div><div class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">        ;; </div><div class="line">    Com_select) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_select"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Com_rollback) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_rollback"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Questions) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status|cut <span class="_">-f</span>4 <span class="_">-d</span><span class="string">":"</span>|cut <span class="_">-f</span>1 <span class="_">-d</span><span class="string">"S"</span>` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Com_insert) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_insert"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Com_delete) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_delete"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Com_commit) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_commit"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Bytes_sent) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Bytes_sent"</span> |cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Bytes_received) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Bytes_received"</span> |cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Com_begin) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_begin"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">                        </div><div class="line">        *) </div><div class="line">        <span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span>(Uptime|Com_update|Slow_queries|Com_select|Com_rollback|Questions|Com_insert|Com_delete|Com_commit|Bytes_sent|Bytes_received|Com_begin)"</span> </div><div class="line">        ;; </div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>
<h3 id="2-修改配置文件zabbix-agentd-conf"><a href="#2-修改配置文件zabbix-agentd-conf" class="headerlink" title="2. 修改配置文件zabbix_agentd.conf"></a>2. 修改配置文件zabbix_agentd.conf</h3><p>增加自定义的key，在配置文件的最后一行写入,如下代码行并重启zabbix客户端。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取mysql版本</span></div><div class="line"><span class="attr">UserParameter</span>=mysql.version,mysql -V</div><div class="line"><span class="comment"># # 获取mysql性能指标,这个是上面定义好的脚本</span></div><div class="line"><span class="attr">UserParameter</span>=mysql.status[*],bash /alidata/zabbix-agentd/scripts/chk_mysql.sh <span class="variable">$1</span></div><div class="line"><span class="comment"># # 获取mysql运行状态</span></div><div class="line"><span class="attr">UserParameter</span>=mysql.ping,mysqladmin -uzabbix -p123123 -P3306 -h127.<span class="number">0.0</span>.<span class="number">1</span>  ping | grep -c alive</div></pre></td></tr></table></figure>
<p>###3. 在监控项目中加入Template App MySQL模版  ###<br>在项目中加入模版后，查看Monitoring-&gt;Graphs中是否有数据图形产生。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN的搭建和使用]]></title>
      <url>http://yoursite.com/2016/12/15/SVN%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<hr>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># yum install subversion</span></div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>1. 新建目录，并做成资源仓库</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">mkdir</span> <span class="keyword">mkdir</span> /svn</div><div class="line">$ svnadmin create /svn/</div><div class="line">$ <span class="keyword">ls</span> /svn/</div><div class="line"><span class="keyword">conf</span>  <span class="keyword">db</span>  <span class="keyword">format</span>  hooks  locks  README.txt</div><div class="line"># 目录说明：</div><div class="line">hooks目录：放置hook脚本文件的目录</div><div class="line">locks目录：用来放置subversion的<span class="keyword">db</span>锁文件和db_logs锁文件的目录，用来追踪存取文件库的客户端</div><div class="line"><span class="keyword">format</span>文件：是一个文本文件，里面只放了一个整数，表示当前文件库配置的版本号</div><div class="line"><span class="keyword">conf</span>目录：是这个仓库的配置文件（仓库的用户访问账号、权限等）</div></pre></td></tr></table></figure>
<p><strong>2.  配置svn服务的配置文件svnserver.conf文件</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ vim /svn/<span class="keyword">conf</span>/svnserve.<span class="keyword">conf</span></div><div class="line">[general]</div><div class="line">anon-access = none</div><div class="line">auth-access = write</div><div class="line">password-<span class="keyword">db</span> = /svn/<span class="keyword">conf</span>/passwd</div><div class="line">authz-<span class="keyword">db</span> = /svn/<span class="keyword">conf</span>/authz</div><div class="line">realm = My <span class="keyword">Test</span> Repository</div></pre></td></tr></table></figure>
<p><strong>3. 添加两个访问用户及口令</strong></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /svn/conf/passwd</div><div class="line">[users]</div><div class="line">zwx = <span class="number">123123</span></div><div class="line">test1 = <span class="number">123123</span></div></pre></td></tr></table></figure>
<p><strong>注：</strong> 对用户配置文件的修改立即生效，不必重启svn服务。</p>
<p><strong>4. 配置新用户的授权文件</strong></p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ vim /svn/conf/authz</div><div class="line">[groups]</div><div class="line">admin = zwx</div><div class="line"><span class="keyword">user</span> <span class="title">= test1</span></div><div class="line">[/]</div><div class="line">@admin = rw</div><div class="line">@<span class="keyword">user</span> <span class="title">= r</span></div><div class="line">* =</div></pre></td></tr></table></figure>
<p><strong>格式说明 :</strong></p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[<span class="variable">&lt;版本库&gt;</span>:/项目/目录]</div><div class="line"></div><div class="line">@<span class="variable">&lt;用户组名&gt;</span> = <span class="variable">&lt;权限&gt;</span></div><div class="line"></div><div class="line"><span class="variable">&lt;用户名&gt;</span> = <span class="variable">&lt;权限&gt;</span></div><div class="line"></div><div class="line">/ 表示对根目录（即/svn目录）下的所有子目录范围设置权限；</div><div class="line"></div><div class="line">[/abc] 表示对资料库中abc项目设置权限；</div><div class="line"></div><div class="line">创建一个admin组，组成员包括zwx;</div><div class="line"></div><div class="line">创建一个<span class="keyword">user</span>组，成员只有test1;</div><div class="line"></div><div class="line">admin组对目录有读写权限；</div><div class="line"></div><div class="line">单个用户test1有读写权限；</div><div class="line">*=表示除了上面设置的权限用户组以外，其他所有用户都设置空权限，空权限表示禁止访问本目录，这很重要一定要加上。</div><div class="line"></div><div class="line">注意：对权限配置文件的修改立即生效，不必重启svn。</div></pre></td></tr></table></figure>
<p><strong>5. 启动SVN</strong></p>
<p>svn 启动可以使用两种方法：</p>
<p>一： 指定项目启动</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ svnserve -d -r /svn/</div><div class="line"><span class="meta"># 指定项目启动时，在客户端checkout的时候，使用命令如下：</span></div><div class="line">$ svn cheackout svn:<span class="comment">//192.168.174.128</span></div><div class="line"><span class="meta"># 会同步svn目录，并且命名为192.168.174.128</span></div></pre></td></tr></table></figure>
<p>二： /etc/init.d/svnserve 启动</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>/etc/init.d/svnserve start</div><div class="line"><span class="comment"># 使用启动命令启动</span></div><div class="line"><span class="variable">$ </span>svn cheackout <span class="symbol">svn:</span>/<span class="regexp">/192.168.174.128/svn</span></div><div class="line"><span class="comment"># 会同步svn目录，并且命名为svn</span></div></pre></td></tr></table></figure>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>1、将文件checkout到本地目录</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn checkout <span class="built_in">path</span>（<span class="built_in">path</span>是服务器上的目录）</div><div class="line">例如：svn checkout svn:<span class="comment">//192.168.1.1/pro/domain</span></div><div class="line">简写：svn co</div></pre></td></tr></table></figure>
<p>2、往版本库中添加新的文件</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">add</span><span class="bash"> file</span></div><div class="line">例如：svn <span class="keyword">add</span><span class="bash"> test.php(添加test.php)</span></div><div class="line">svn <span class="keyword">add</span><span class="bash"> *.php(添加当前目录下所有的php文件)</span></div></pre></td></tr></table></figure>
<p>3、将改动的文件提交到版本库</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn commit -<span class="keyword">m</span> <span class="string">"LogMessage"</span> [-<span class="keyword">N</span>] [--<span class="keyword">no</span>-unlock] PATH(如果选择了保持锁，就使用--<span class="keyword">no</span>-unlock开关)</div><div class="line">例如：svn commit -<span class="keyword">m</span> <span class="string">"add test file for my test"</span> <span class="keyword">test</span>.php</div><div class="line">简写：svn <span class="keyword">ci</span></div></pre></td></tr></table></figure>
<p>4、加锁/解锁</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">lock</span> -m <span class="string">"LockMessage"</span> [<span class="comment">--force] PATH</span></div><div class="line">例如：svn <span class="keyword">lock</span> -m <span class="string">"lock test file"</span> test.php</div><div class="line">svn <span class="keyword">unlock</span> <span class="keyword">PATH</span></div></pre></td></tr></table></figure>
<p>5、更新到某个版本</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">update</span> -r <span class="keyword">m</span> path</div><div class="line">例如：</div><div class="line">svn <span class="keyword">update</span>如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。</div><div class="line">svn <span class="keyword">update</span> -r 200 <span class="keyword">test</span>.php(将版本库中的文件<span class="keyword">test</span>.php还原到版本200)</div><div class="line">svn <span class="keyword">update</span> <span class="keyword">test</span>.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先<span class="keyword">update</span>，修改文件，然后清除svn resolved，最后再提交commit)</div><div class="line">简写：svn up</div></pre></td></tr></table></figure>
<p>6、查看文件或者目录状态</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>）svn <span class="built_in">status</span> path（目录下的文件和子目录的状态，正常状态不显示）</div><div class="line">【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】</div><div class="line"><span class="number">2</span>）svn <span class="built_in">status</span> -v path(显示文件和子目录状态)</div><div class="line">第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。</div><div class="line">注：svn <span class="built_in">status</span>、svn <span class="built_in">diff</span>和 svn <span class="built_in">revert</span>这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。</div><div class="line">简写：svn st</div></pre></td></tr></table></figure>
<p>7、删除文件</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">svn <span class="built_in">delete</span> path -m <span class="string">"delete test fle"</span></div><div class="line">例如：svn <span class="built_in">delete</span> svn://<span class="number">192.168</span>.1.1/pro/<span class="built_in">domain</span>/test.php -m <span class="string">"delete test file"</span></div><div class="line">或者直接svn <span class="built_in">delete</span> test.php 然后再svn ci -m '<span class="built_in">delete</span> test file‘，推荐使用这种</div><div class="line">简写：svn (<span class="built_in">del</span>, <span class="built_in">remove</span>, rm)</div></pre></td></tr></table></figure>
<p>8、查看日志</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">log</span> path</div><div class="line">例如：svn <span class="keyword">log</span> <span class="keyword">test</span>.php 显示这个文件的所有修改记录，及其版本号的变化</div></pre></td></tr></table></figure>
<p>9、查看文件详细信息</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">svn</span> <span class="literal">info</span> path</div><div class="line">例如：svn <span class="literal">info</span> test.php</div></pre></td></tr></table></figure>
<p>10、比较差异</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">svn</span> <span class="selector-tag">diff</span> <span class="selector-tag">path</span>(将修改的文件与基础版本比较)</div><div class="line">例如：<span class="selector-tag">svn</span> <span class="selector-tag">diff</span> <span class="selector-tag">test</span><span class="selector-class">.php</span></div><div class="line"><span class="selector-tag">svn</span> <span class="selector-tag">diff</span> <span class="selector-tag">-r</span> <span class="selector-tag">m</span><span class="selector-pseudo">:n</span> <span class="selector-tag">path</span>(对版本<span class="selector-tag">m</span>和版本<span class="selector-tag">n</span>比较差异)</div><div class="line">例如：<span class="selector-tag">svn</span> <span class="selector-tag">diff</span> <span class="selector-tag">-r</span> 200<span class="selector-pseudo">:201</span> <span class="selector-tag">test</span><span class="selector-class">.php</span></div><div class="line">简写：<span class="selector-tag">svn</span> <span class="selector-tag">di</span></div></pre></td></tr></table></figure>
<p>11、将两个版本之间的差异合并到当前文件</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">svn</span> <span class="selector-tag">merge</span> <span class="selector-tag">-r</span> <span class="selector-tag">m</span><span class="selector-pseudo">:n</span> <span class="selector-tag">path</span></div><div class="line">例如：<span class="selector-tag">svn</span> <span class="selector-tag">merge</span> <span class="selector-tag">-r</span> 200<span class="selector-pseudo">:205</span> <span class="selector-tag">test</span><span class="selector-class">.php</span>（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）</div></pre></td></tr></table></figure>
<p>12、SVN 帮助</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">help</span></div><div class="line">svn <span class="keyword">help</span> <span class="keyword">ci</span></div></pre></td></tr></table></figure>
<p>13、版本库下的文件和目录列表</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn list <span class="built_in">path</span></div><div class="line">显示<span class="built_in">path</span>目录下的所有属于版本库的文件和目录</div><div class="line">简写：svn ls</div></pre></td></tr></table></figure>
<p>14、创建纳入版本控制下的新目录</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">svn <span class="built_in">mkdir</span>: 创建纳入版本控制下的新目录。</div><div class="line">用法: <span class="number">1</span>、<span class="built_in">mkdir</span> <span class="built_in">PATH</span>...</div><div class="line"><span class="number">2</span>、<span class="built_in">mkdir</span> URL...</div><div class="line">创建版本控制的目录。</div><div class="line"><span class="number">1</span>、每一个以工作副本 <span class="built_in">PATH</span> 指定的目录，都会创建在本地端，并且加入新增</div><div class="line">调度，以待下一次的提交。</div><div class="line"><span class="number">2</span>、每个以URL指定的目录，都会透过立即提交于仓库中创建。</div><div class="line">在这两个情况下，所有的中间目录都必须事先存在。</div></pre></td></tr></table></figure>
<p>15、恢复本地修改</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">svn</span> <span class="keyword">revert: </span>恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。<span class="keyword">revert:</span></div><div class="line">用法: <span class="keyword">revert </span>PATH...</div><div class="line">注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复</div><div class="line">被删除的目录</div></pre></td></tr></table></figure>
<p>16、代码库URL变更</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">switch</span> (sw): 更新工作副本至不同的<span class="built_in">URL</span>。</div><div class="line">用法: <span class="number">1</span>、<span class="keyword">switch</span> <span class="built_in">URL</span> [PATH]</div><div class="line"><span class="number">2</span>、<span class="keyword">switch</span> <span class="comment">--relocate FROM TO [PATH...]</span></div><div class="line"><span class="number">1</span>、更新你的工作副本，映射到一个新的<span class="built_in">URL</span>，其行为跟“svn update”很像，也会将</div><div class="line">服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的</div><div class="line">方法。</div><div class="line"><span class="number">2</span>、改写工作副本的<span class="built_in">URL</span>元数据，以反映单纯的<span class="built_in">URL</span>上的改变。当仓库的根<span class="built_in">URL</span>变动 </div><div class="line">(比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用</div><div class="line">这个命令更新工作副本与仓库的对应关系。</div></pre></td></tr></table></figure>
<p>17、解决冲突</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">svn resolved: 移除工作副本的目录或文件的“冲突”状态。</div><div class="line">用法: resolved <span class="built_in">PATH</span>...</div><div class="line">注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的</div><div class="line">相关文件，然后让 <span class="built_in">PATH</span> 可以再次提交。</div></pre></td></tr></table></figure>
<p>18、输出指定文件或URL的内容。</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn <span class="built_in">cat</span> 目标[@版本]...如果指定了版本，将从指定的版本开始查找。</div><div class="line">svn <span class="built_in">cat</span> -r PREV filename &gt; filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的）</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx中root和alias的区别]]></title>
      <url>http://yoursite.com/2016/12/15/Nginx%E4%B8%ADroot%E5%92%8Calias%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p><code>nginx</code>指定文件路径有两种方式 <code>root</code> 和 <code>alias</code>。</p>
<p><code>root</code> 与 <code>alias</code> 主要区别在于 <code>nginx</code> 如何解释 <code>location</code> 后面的 <code>uri</code>，这会使两者分别以不同的方式将请求映射到<br>服务器文件上。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root]</div><div class="line">语法： root path</div><div class="line">默认值： root html</div><div class="line">配置段： http、 server、 location、 <span class="keyword">if</span></div><div class="line"></div><div class="line">[<span class="built_in">alias</span>]</div><div class="line">语法： <span class="built_in">alias</span> path</div><div class="line">配置段： location</div></pre></td></tr></table></figure>
<p><strong>示例：</strong><br>nginx的location配置如下：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location <span class="meta-keyword">/xing/</span> &#123;</div><div class="line">    root <span class="meta-keyword">/alidata/</span>www<span class="meta-keyword">/phpwind/</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#当访问http:<span class="comment">//192.168.3.14/xing/zheng/index.html时，</span></span></div><div class="line">调用的文件是<span class="meta-keyword">/alidata/</span>www<span class="meta-keyword">/phpwind/</span>xing<span class="meta-keyword">/zheng/</span>index.html。 </div><div class="line"><span class="meta">#既 root路径 + url请求地址。</span></div></pre></td></tr></table></figure>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">location  <span class="meta-keyword">/xing/</span> &#123;</div><div class="line">	alias <span class="meta-keyword">/alidata/</span>www<span class="meta-keyword">/phpwind/</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#当访问http:<span class="comment">//192.168.3.14/xing/zheng/index.html时，</span></span></div><div class="line">调用的文件是<span class="meta-keyword">/alidata/</span>www<span class="meta-keyword">/phpwind/</span>zheng/index.html。</div><div class="line"><span class="meta">#既 省略location后边匹配的路径。</span></div><div class="line">注：</div><div class="line"><span class="number">1.</span> 使用 alias 时，目录名后面一定要加” /”</div><div class="line"><span class="number">2.</span> alias 可以指定任何名称</div><div class="line"><span class="number">3.</span> alias 在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。</div><div class="line"><span class="number">4.</span> alias 只能位于 location 块中。</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx隐藏版本号]]></title>
      <url>http://yoursite.com/2016/12/15/Nginx%E9%9A%90%E8%97%8F%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
      <content type="html"><![CDATA[<ul>
<li>修改nginx.conf文件</li>
</ul>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim /../../nginx.conf	# 在http&#123;&#125;加入 server_tokens off;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">……省略</div><div class="line">keepalive_timeout <span class="number">60</span>;</div><div class="line">server_tokens off;</div><div class="line">…….省略</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改fastcgi.conf</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version<span class="comment">;</span></div><div class="line">改为：</div><div class="line">fastcgi_param  SERVER_SOFTWARE    nginx<span class="comment">;</span></div></pre></td></tr></table></figure>
<ul>
<li>重启nginx服务</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx的日志切割]]></title>
      <url>http://yoursite.com/2016/12/15/Nginx%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/</url>
      <content type="html"><![CDATA[<p>nginx的切割日志的方法记录一下两种方式：logrotate和脚本。</p>
<h2 id="logrotate切割日志"><a href="#logrotate切割日志" class="headerlink" title="logrotate切割日志"></a>logrotate切割日志</h2><ul>
<li>安装logrotate</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y <span class="keyword">install</span> logrotate</div></pre></td></tr></table></figure>
<ul>
<li>配置文件</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">vim <span class="meta-keyword">/etc/</span>logrotate.d/nginx-log 写入：</div><div class="line"><span class="meta-keyword">/var/</span>log<span class="meta-keyword">/nginx/</span>*.<span class="class">log </span>&#123;			<span class="meta">#根据实际路径修改</span></div><div class="line">nocompress</div><div class="line">daily</div><div class="line">copytruncate</div><div class="line">create</div><div class="line">notifempty</div><div class="line">rotate <span class="number">7</span></div><div class="line">olddir <span class="meta-keyword">/data/</span>weblogs/old_log</div><div class="line">missingok</div><div class="line">dateext</div><div class="line">postrotate</div><div class="line"><span class="meta-keyword">/bin/</span>kill -HUP `cat <span class="meta-keyword">/var/</span>run/nginx.pid <span class="number">2</span>&gt; <span class="meta-keyword">/dev/</span>null` <span class="number">2</span>&gt; <span class="meta-keyword">/dev/</span>null || true</div><div class="line">endscript</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：/data/weblogs/*.log 使用通配符时， /data/weblogs/目录下的所有匹配到的日志文件都将切割。如果<br>要切割特定日志文件，就指定到该文件</p>
</blockquote>
<ul>
<li>设置计划任务</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim /etc/crontab</span></div><div class="line"><span class="number">59</span> <span class="number">23</span> * * * root ( <span class="regexp">/usr/</span>sbin<span class="regexp">/logrotate -f /</span>etc<span class="regexp">/logrotate.d/</span>nginx-log)</div></pre></td></tr></table></figure>
<h2 id="脚本切割"><a href="#脚本切割" class="headerlink" title="脚本切割"></a>脚本切割</h2><ul>
<li>使用shell脚本来分割访问日志和错误日志。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">vim /opt/logcut.sh 写入：</div><div class="line"></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">logs_path=<span class="string">"/var/log/nginx/"</span></div><div class="line">date=`date +%Y%m%d`</div><div class="line">log_name1=<span class="string">"access.log"</span>   </div><div class="line">log_name2=<span class="string">"error.log"</span></div><div class="line">pid_path=<span class="string">"/var/run/nginx.pid"</span></div><div class="line">mv <span class="variable">$&#123;logs_path&#125;</span><span class="variable">$&#123;log_name1&#125;</span> <span class="variable">$&#123;logs_path&#125;</span><span class="variable">$&#123;log_name1&#125;</span>_<span class="variable">$date</span>.log</div><div class="line">mv <span class="variable">$&#123;logs_path&#125;</span><span class="variable">$&#123;log_name2&#125;</span> <span class="variable">$&#123;logs_path&#125;</span><span class="variable">$&#123;log_name2&#125;</span>_<span class="variable">$date</span>.log</div><div class="line"><span class="built_in">kill</span> -USR1 `cat <span class="variable">$&#123;pid_path&#125;</span>`</div></pre></td></tr></table></figure>
<ul>
<li>设置计划任务</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim /etc/crontab</span></div><div class="line"><span class="number">59</span> <span class="number">23</span> * * * root <span class="regexp">/bin/</span>bash <span class="regexp">/opt/</span>logcut.sh</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx的realip配置]]></title>
      <url>http://yoursite.com/2016/12/15/Nginx%E7%9A%84realip%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>当前端有nginx进行反向代理时，后端的机器获得的访问日志中记录的IP是前端nginx的，用一下方法来记录真实IP。</p>
<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">node1</span>：192<span class="selector-class">.168</span><span class="selector-class">.174</span><span class="selector-class">.129</span>	前端代理（<span class="selector-tag">nginx-proxy</span>）	<span class="selector-tag">centos</span> 6<span class="selector-class">.5</span></div><div class="line"><span class="selector-tag">node2</span>：192<span class="selector-class">.168</span><span class="selector-class">.174</span><span class="selector-class">.128</span>	后端服务（<span class="selector-tag">nginx</span>）			<span class="selector-tag">centos</span> 6<span class="selector-class">.5</span></div></pre></td></tr></table></figure>
<h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><ul>
<li><code>nginx</code>安装<code>realip_module</code>模块（两个<code>nginx</code>都要安装）</li>
</ul>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#检查nginx是否安装了realip_module</span></div><div class="line"><span class="comment">nginx</span> <span class="literal">-</span><span class="comment">V</span></div><div class="line"><span class="title">[</span><span class="comment">root@node1</span> <span class="comment">~</span><span class="title">]</span><span class="comment">#</span> <span class="comment">nginx</span> <span class="literal">-</span><span class="comment">V</span></div><div class="line"><span class="comment">nginx</span> <span class="comment">version:</span> <span class="comment">nginx/1</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">4</span></div><div class="line"><span class="comment">built</span> <span class="comment">by</span> <span class="comment">gcc</span> <span class="comment">4</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">7</span> <span class="comment">20120313</span> <span class="comment">(Red</span> <span class="comment">Hat</span> <span class="comment">4</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">7</span><span class="literal">-</span><span class="comment">11)</span> <span class="comment">(GCC)</span> </div><div class="line"><span class="comment">TLS</span> <span class="comment">SNI</span> <span class="comment">support</span> <span class="comment">enabled</span></div><div class="line"><span class="comment">configure</span> <span class="comment">arguments:</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">user=www</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">group=www</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=/alidata/server/nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_stub_status_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">without</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">cache</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_ssl_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_gzip_static_module</span> </div><div class="line"></div><div class="line"><span class="comment">#增加realip_module，找到nginx的源码，重新编译，在编译参数中加入</span><span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_realip_module</span></div><div class="line"><span class="title">[</span><span class="comment">root@node1</span> <span class="comment">nginx</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">4</span><span class="title">]</span><span class="comment">#</span>  <span class="string">.</span><span class="comment">/configure</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">user=www</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">group=www</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=/alidata/server/nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_stub_status_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">without</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">cache</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_ssl_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_gzip_static_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_realip_module</span></div><div class="line"></div><div class="line"><span class="comment">#之后，只需make即可，不要make</span> <span class="comment">install</span></div><div class="line"><span class="title">[</span><span class="comment">root@node1</span> <span class="comment">nginx</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">4</span><span class="title">]</span><span class="comment">#</span> <span class="comment">make</span></div><div class="line"></div><div class="line"><span class="comment">#将新的nginx替换老的nginx</span> <span class="comment">sbin文件（可能需要停止nginx服务）。重启nginx服务</span></div><div class="line"><span class="title">[</span><span class="comment">root@node1</span> <span class="comment">nginx</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">4</span><span class="title">]</span><span class="comment">#</span> <span class="comment">cp</span> <span class="comment">objs/nginx</span> <span class="comment">/alidata/server/nginx/sbin/</span></div></pre></td></tr></table></figure>
<ul>
<li>在<code>nginx</code>代理机器修改配置文件 （192.168.174.129）</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在server段的配置中：</span></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</div><div class="line">        <span class="attribute">server_name</span>  _;</div><div class="line"></div><div class="line">        <span class="attribute">location</span><span class="regexp"> ^~</span> /xing/ &#123;</div><div class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">            <span class="attribute">proxy_pass</span>  http://192.168.174.128/;</div><div class="line">        &#125;</div><div class="line">        <span class="attribute">access_log</span>  /alidata/log/nginx/access/test.log;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改后端<code>nginx</code>的日志格式。（192.168.174.128）</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在nginx.conf中：</span></div><div class="line"><span class="attribute">log_format</span> test <span class="string">'<span class="variable">$http_x_real_ip</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div><div class="line"></div><div class="line"><span class="comment">#在server段配置log</span></div><div class="line">	<span class="attribute">access_log</span>  /alidata/log/nginx/access/zabbix.log test;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问<a href="http://192.168.174.129/xing/" target="_blank" rel="external">http://192.168.174.129/xing/</a> ，观察node2机器的日志。</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">192.168.174.1</span> - - <span class="string">[24/Sep/2015:22:52:38 +0800]</span> <span class="string">"<span class="keyword">GET</span> /images/general/zabbix.ico HTTP/1.0"</span> <span class="number">200</span> <span class="number">1150</span> <span class="string">"http://192.168.174.129/xing/"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36"</span> <span class="string">"192.168.174.1"</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx的location配置]]></title>
      <url>http://yoursite.com/2016/12/15/Nginx%E7%9A%84location%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p><code>location [=|~|~*|^~] /uri/ { … }</code></p>
<ul>
<li><code>=</code> 严格匹配。如果这个查询匹配，那么将停止搜索并立即处理此请求。</li>
<li><code>~</code> 为区分大小写匹配(可用正则表达式)</li>
<li><code>~*</code> 为不区分大小写匹配(可用正则表达式)</li>
<li><code>!~</code>和<code>!~*</code>分别为区分大小写不匹配及不区分大小写不匹配</li>
<li><code>^~</code> 开头表示<code>uri</code>以某个常规字符串开头，理解为匹配 <code>url</code>路径即可。<code>nginx</code>不对<code>url</code>做编码，因此请求为<code>/static/20%/aa</code>，可以被规则<code>^~ /static/ /aa</code>匹配到（注意是空格）。</li>
</ul>
<p>首先匹配 <code>=</code>，其次匹配<code>^~</code>, 其次是按文件中顺序的正则匹配，最后是交给 <code>/</code> 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>匹配任何查询，因为所有请求都以 / 开头。但是正则表达式规则将被优先和查询匹配。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span> <span class="title">/ &#123;&#125;</span></div></pre></td></tr></table></figure>
<p>仅仅匹配 /，访问根目录</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span> <span class="title">=/ &#123;&#125;</span></div><div class="line">#访问http://localhost/</div></pre></td></tr></table></figure>
<p>不区分大小写匹配任何以gif，jpg，jpeg结尾的文件</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location ~* .(gif|<span class="type">jpg</span>|<span class="type">jpeg</span>)$ ｛</div><div class="line"><span class="built_in">rewrite</span> .(gif|<span class="type">jpg</span>)$ /logo.png;</div><div class="line">｝</div></pre></td></tr></table></figure>
<p>匹配任何已 /images/ 开头的任何查询并且停止搜索。任何正则表达式将不会被测试。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span> <span class="title">^~ /images</span>/ &#123;&#125;</div><div class="line"><span class="comment">#访问http://localhost/images/a.html</span></div></pre></td></tr></table></figure>
<p>不区分大小写匹配任何以 gif、jpg 或 jpeg 结尾的请求。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span> <span class="title">~* .(gif</span>|jpg|jpeg)$ &#123;&#125;</div></pre></td></tr></table></figure>
<p><strong>实际中，常用的三个匹配规则定义。</strong><br>直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。<br>这里是直接转发给后端应用服务器了，也可以是一个静态首页</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 第一个必选规则</span></div><div class="line"><span class="keyword">location</span> <span class="title">= / &#123;</span></div><div class="line">    proxy_pass http://tomcat:<span class="number">8080</span>/index</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span></div><div class="line"><span class="keyword">location</span> <span class="title">^~ /static</span>/ &#123;</div><div class="line">    root /webroot/static/;</div><div class="line">&#125;</div><div class="line"><span class="keyword">location</span> <span class="title">~* \.(gif</span>|jpg|jpeg|png|css|js|ico)$ &#123;</div><div class="line">    root /webroot/res/;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三个规则就是通用规则，用来转发动态请求到后端应用服务器，非静态文件请求就默认是动态请求，自己根据实际把握，毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span> <span class="title">/ &#123;</span></div><div class="line">    proxy_pass http://tomcat:<span class="number">8080</span>/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>场景一： nginx对指定目录做代理</strong>（出自运维生存时间<a href="http://www.ttlsa.com/nginx/nginx-proxy-spec-dir/）" target="_blank" rel="external">http://www.ttlsa.com/nginx/nginx-proxy-spec-dir/）</a></p>
<p>web1，作为前端端服务器，访问地址是<a href="http://192.168.1.1" target="_blank" rel="external">http://192.168.1.1</a>,    要将<a href="http://192.168.1.1/bbs" target="_blank" rel="external">http://192.168.1.1/bbs</a>    的请求交给web2。在web1的网站根目录下并没有bbs目录.<br>web2，作为后端web服务器，访问地址是<a href="http://192.168.1.2" target="_blank" rel="external">http://192.168.1.2</a></p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#方式一</span></div><div class="line">location <span class="regexp">/bbs/</span> &#123;</div><div class="line">proxy_pass http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.2</span><span class="regexp">/;             #有“/</span>”</div><div class="line">&#125;</div><div class="line">效果：通过 http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.1</span><span class="regexp">/bbs  可以访问到web2网站根目录下的内容</span></div></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#方式二（未验证通过）</span></div><div class="line">location <span class="regexp">/bbs/</span> &#123;</div><div class="line">proxy_pass http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.2</span>;            <span class="comment">#无“/”</span></div><div class="line">&#125;</div><div class="line">效果：要通过web1反问web2网站根目录的内容则需要输入：http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.1</span><span class="regexp">/bbs/</span>bbs</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gitlab变更为https访问]]></title>
      <url>http://yoursite.com/2016/12/15/Gitlab%E5%8F%98%E6%9B%B4%E4%B8%BAhttps%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<p>（源码方式安装）</p>
<p>方法来自 gitlab 的 help 文档</p>
<p>1、<code>/home/git/gitlab/config/gitlab.yml</code> 文件</p>
<p>将<code>port</code>改为443，<code>https</code>改为<code>true</code></p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gitlab:</div><div class="line">  ## Web server settings (note: host <span class="keyword">is</span> the FQDN, <span class="keyword">do</span> <span class="keyword">not</span> include http:<span class="comment">//)</span></div><div class="line">  host: git.zhai.me</div><div class="line">  port: <span class="number">443</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="number">443</span> <span class="keyword">if</span> <span class="keyword">using</span> HTTPS, see installation.md#<span class="keyword">using</span>-https <span class="keyword">for</span> additional HTTPS configuration details</div><div class="line">  https: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">true</span> <span class="keyword">if</span> <span class="keyword">using</span> HTTPS, see installation.md#<span class="keyword">using</span>-https <span class="keyword">for</span> additional HTTPS configuration details</div></pre></td></tr></table></figure>
<p>2、<code>/home/git/gitlab-shell/config.yml</code> 文件</p>
<p>将 <code>gitlab_url</code> 改为<code>https</code>的链接,设置认证使用<code>ca_file</code>或<code>ca_path</code></p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">gitlab_url:</span> <span class="string">"https://git.zhai.me/"</span></div><div class="line"></div><div class="line"><span class="meta"># See installation.md#using-https for additional HTTPS configuration details.</span></div><div class="line"><span class="symbol">http_settings:</span></div><div class="line"><span class="meta">#  user: someone</span></div><div class="line"><span class="meta">#  password: somepass</span></div><div class="line"><span class="meta">#  ca_file: /etc/ssl/cert.pem</span></div><div class="line"><span class="symbol">  ca_path:</span> <span class="meta-keyword">/etc/</span>pki<span class="meta-keyword">/tls/</span>certs</div><div class="line"><span class="symbol">  self_signed_cert:</span> false</div></pre></td></tr></table></figure>
<p>3、替换<code>/home/git/gitlab/lib/support/nginx/gitlab-ssl</code>到<code>/etc/nginx/sites-enabled/gitlab</code></p>
<p>并修改其中的<code>YOUR_SERVER_FQDN</code>和<code>ssl_certificate</code>、<code>ssl_certificate_key</code>的位置</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[公司Gitlab升级记录]]></title>
      <url>http://yoursite.com/2016/12/15/%E5%85%AC%E5%8F%B8Gitlab%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>公司gitlab使用源码方式安装，版本为7.2，因为最近结合ldap来进行使用，但是ldap中的block_auto_created_users选项到7.10才支持。所以要升级。<br>参考官方帮助文档：<br><a href="http://doc.gitlab.com/ce/update/patch_versions.html" target="_blank" rel="external">http://doc.gitlab.com/ce/update/patch_versions.html</a><br><a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/update/7.9-to-7.10.md" target="_blank" rel="external">https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/update/7.9-to-7.10.md</a></p>
</blockquote>
<h3 id="从7-2升级到7-9版本"><a href="#从7-2升级到7-9版本" class="headerlink" title="从7.2升级到7.9版本"></a>从7.2升级到7.9版本</h3><h4 id="依赖包和软件升级"><a href="#依赖包和软件升级" class="headerlink" title="依赖包和软件升级"></a>依赖包和软件升级</h4><p>因为版本的升级跨度大，这版本直接肯定有很多新的功能需要扩展包进行支持，所以根据目前最新版(7.12)的源码安装教程重新安装依赖包，并且升级redis服务(测试时出现问题，所以提前升级)。<br>安装依赖包：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install -y build-essential zlib1g-<span class="built_in">dev</span> libyaml-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span> libgdbm-<span class="built_in">dev</span> libreadline-<span class="built_in">dev</span> libncurses5-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> curl openssh-server redis-server checkinstall libxml2-<span class="built_in">dev</span> libxslt-<span class="built_in">dev</span> libcurl4-openssl-<span class="built_in">dev</span> libicu-<span class="built_in">dev</span> logrotate python-docutils pkg-config cmake nodejs libkrb5-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<p>升级redis：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">wget <span class="symbol">http:</span>/<span class="regexp">/download.redis.io/releases</span><span class="regexp">/redis-3.0.3.tar.gz</span></div><div class="line">tar xvf redis-3.0.3.tar.gz</div><div class="line">cd redis-3.0.3/</div><div class="line">make </div><div class="line">make  install</div><div class="line"><span class="comment">#会在/usr/local/bin/下边生成相应的bin文件</span></div><div class="line">cp redis.conf /etc/redis/</div><div class="line"><span class="comment">#修改redis.conf文件，对应/etc/init.d/redis-server中进行修改</span></div><div class="line">daemonize yes  <span class="comment">#使redis可以后台运行</span></div><div class="line">pidfile /var/run/redis/redis-server.pid</div><div class="line">bind <span class="number">127.0</span>.<span class="number">0.1</span></div><div class="line">logfile /var/log/redis/redis-server.log</div><div class="line">dir /var/<span class="class"><span class="keyword">lib</span>/<span class="title">redis</span></span></div></pre></td></tr></table></figure>
<p><strong>注</strong>：升级后，因为redis的bin文件更换了地方，要修改/home/git/gitlab-shell/config.yml为：<code>bin: &quot;/usr/local/bin/redis-cli&quot;</code>。</p>
<h4 id="备份并停止服务"><a href="#备份并停止服务" class="headerlink" title="备份并停止服务"></a>备份并停止服务</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd <span class="regexp">/home/</span>git/gitlab</div><div class="line">sudo -u git -H bundle exec rake <span class="string">gitlab:</span><span class="string">backup:</span>create RAILS_ENV=production</div><div class="line"><span class="regexp">/etc/</span>init.d/gitlab stop</div></pre></td></tr></table></figure>
<h4 id="下载最新的稳定版的代码"><a href="#下载最新的稳定版的代码" class="headerlink" title="下载最新的稳定版的代码"></a>下载最新的稳定版的代码</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo -u git -H git fetch --all</div><div class="line">sudo -u git -H git checkout v7<span class="number">.9</span><span class="number">.3</span></div><div class="line">``` </div><div class="line"></div><div class="line">LATEST_TAG为想要升级到的版本号，国内的网络fetch的时候可能会有问题，需要连接vpn。</div><div class="line"></div><div class="line">#### 更新最新的gitlab-shell版本 ####</div></pre></td></tr></table></figure>
<p>cd /home/git/gitlab-shell<br>sudo -u git -H git fetch<br>sudo -u git -H git checkout v<code>cat /home/git/gitlab/GITLAB_SHELL_VERSION</code><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### Install libs, migrations, etc. ####</div><div class="line">断开VPN连接，并且**修改ruby源来提高速度和成功率**。</div><div class="line"></div><div class="line">&gt; 注意：下边的bundle install命令使用的默认源是`https:<span class="comment">//rubygems.org/`，国内很慢，可以更换成淘宝的源，更改方法为:</span></div><div class="line">vim /home/git/gitlab/Gemfile 修改 其中的`source <span class="string">"https://rubygems.org"</span>` 为`source <span class="string">"https://ruby.taobao.org"</span>`</div></pre></td></tr></table></figure></p>
<p>cd /home/git/gitlab</p>
<p>#PostgreSQL<br>sudo -u git -H bundle install –without development test mysql –deployment</p>
<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>sudo -u git -H bundle install –without development test postgres –deployment</p>
<p>sudo -u git -H bundle exec rake db:migrate RAILS_ENV=production<br>sudo -u git -H bundle exec rake assets:clean RAILS_ENV=production<br>sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production<br>sudo -u git -H bundle exec rake cache:clear RAILS_ENV=production<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#### 开启服务 ####</div></pre></td></tr></table></figure></p>
<p>sudo service gitlab start<br>sudo service nginx restart<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#### 检测升级是否成功 ####</div><div class="line"></div><div class="line">- 检测环境</div></pre></td></tr></table></figure></p>
<p>sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>检测项目</div></pre></td></tr></table></figure></p>
<p>sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 从<span class="number">7.9</span>升级到<span class="number">7.13</span>版本 ###  </div><div class="line">#### 备份 ####</div></pre></td></tr></table></figure></p>
<p>sudo service gitlab stop<br>cd /home/git/gitlab<br>sudo -u git -H bundle exec rake gitlab:backup:create RAILS_ENV=production<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 更新gitlab ####</div></pre></td></tr></table></figure></p>
<p>sudo -u git -H git fetch –all<br>sudo -u git -H git checkout – db/schema.rb # local changes will be restored automatically<br>sudo -u git -H git checkout 7-13-stable<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#### 更新gitlab-shell ####</div></pre></td></tr></table></figure></p>
<p>cd /home/git/gitlab-shell<br>sudo -u git -H git fetch<br>sudo -u git -H git checkout v2.6.3<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">### Install libs, migrations, etc ###</div><div class="line">注：更换/home/git/gitlab/Gemfile中的ruby源</div></pre></td></tr></table></figure></p>
<p>cd /home/git/gitlab</p>
<h1 id="MySQL-installations-note-the-line-below-states-‘–without-…-postgres’"><a href="#MySQL-installations-note-the-line-below-states-‘–without-…-postgres’" class="headerlink" title="MySQL installations (note: the line below states ‘–without … postgres’)"></a>MySQL installations (note: the line below states ‘–without … postgres’)</h1><p>sudo -u git -H bundle install –without development test postgres –deployment</p>
<h1 id="PostgreSQL-installations-note-the-line-below-states-‘–without-…-mysql’"><a href="#PostgreSQL-installations-note-the-line-below-states-‘–without-…-mysql’" class="headerlink" title="PostgreSQL installations (note: the line below states ‘–without … mysql’)"></a>PostgreSQL installations (note: the line below states ‘–without … mysql’)</h1><p>sudo -u git -H bundle install –without development test mysql –deployment</p>
<h1 id="Run-database-migrations"><a href="#Run-database-migrations" class="headerlink" title="Run database migrations"></a>Run database migrations</h1><p>sudo -u git -H bundle exec rake db:migrate RAILS_ENV=production</p>
<h1 id="Clean-up-assets-and-cache"><a href="#Clean-up-assets-and-cache" class="headerlink" title="Clean up assets and cache"></a>Clean up assets and cache</h1><p>sudo -u git -H bundle exec rake assets:clean assets:precompile cache:clear RAILS_ENV=production</p>
<h1 id="Update-init-d-script"><a href="#Update-init-d-script" class="headerlink" title="Update init.d script"></a>Update init.d script</h1><p>sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 更新配置文件 ####</div><div class="line">因为配置文件中ldap的语法是不同的，所以将老gitlab.yml备份，用gitlab.yml.example替换他，并更改其中必要的配置。 ldap部分的配置如下：</div></pre></td></tr></table></figure></p>
<p>ldap:<br>    enabled: true<br>    servers:</p>
<pre><code>##########################################################################
#
# Since GitLab 7.4, LDAP servers get ID&apos;s (below the ID is &apos;main&apos;). GitLab
# Enterprise Edition now supports connecting to multiple LDAP servers.
#
# If you are updating from the old (pre-7.4) syntax, you MUST give your
# old server the ID &apos;main&apos;.
#
##########################################################################
main: # &apos;main&apos; is the GitLab &apos;provider ID&apos; of this LDAP server
  label: &apos;LDAP&apos;
  host: &apos;ldap-url/IP&apos;
  port: 389
  uid: &apos;uid&apos;
  method: &apos;plain&apos; # &quot;tls&quot; or &quot;ssl&quot; or &quot;plain&quot;
  bind_dn: &apos;cn=admin,dc=****,dc=com&apos;
  password: &apos;admin-passwd&apos;
  active_directory: true
  block_auto_created_users: true
  base: &apos;dc=****,dc=com&apos;
  user_filter: &apos;&apos;
</code></pre><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 启动服务 ####</div></pre></td></tr></table></figure>
<p>sudo service gitlab start<br>sudo service nginx restart<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#### 检查状态 ####</div></pre></td></tr></table></figure></p>
<p>sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production<br>sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#### 修复 ####</div><div class="line">根据上边检查的结果进行修复</div></pre></td></tr></table></figure></p>
<p>sudo -u git -H bundle exec rake gitlab:satellites:create RAILS_ENV=production<br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gitlab、GitLab-CI Runner、karma安装记录]]></title>
      <url>http://yoursite.com/2016/12/15/Gitlab-GitLab-CI-Runner-karma%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>##Gitlab的安装</p>
<p>使用源码安装，安装方法参照官方文档：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span>docs.gitlab.com<span class="regexp">/ce/i</span>nstall<span class="regexp">/README.html</span></div></pre></td></tr></table></figure>
<p>##GitLab-CI Runner安装</p>
<p>Gitlab-CI Server在Gitlab 8版本以上就集成在gitlab中，不需要单独安装，Runner可以参照官方安装文档：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//gi</span>tlab.com<span class="regexp">/gitlab-org/gi</span>tlab-ci-multi-runner</div></pre></td></tr></table></figure>
<p>本次安装使用如下方法：</p>
<ul>
<li>安装依赖包</li>
</ul>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> install -y wget curl gcc libxml2-<span class="built_in">dev</span> libxslt-<span class="built_in">dev</span> \</div><div class="line">libcurl4-openssl-<span class="built_in">dev</span> libreadline6-<span class="built_in">dev</span> libc6-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span> make \</div><div class="line">build-essential zlib1g-<span class="built_in">dev</span> openssh-server git-core libyaml-<span class="built_in">dev</span> \</div><div class="line">libpq-<span class="built_in">dev</span> libicu-<span class="built_in">dev</span> sudo</div></pre></td></tr></table></figure>
<ul>
<li>安装ruby</li>
</ul>
<p>此次gitlab-ci runner和gitlab安装在同一台服务器，ruby已经安装，过程忽略。<br>安装好ruby可以将源改为国内的淘宝的镜像，如下：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gem <span class="keyword">source</span> -r http<span class="variable">s:</span>//rubygems.org/</div><div class="line">gem <span class="keyword">source</span> -<span class="keyword">a</span> http<span class="variable">s:</span>//<span class="keyword">ruby</span>.taobao.org/</div></pre></td></tr></table></figure>
<ul>
<li>安装Gitlab-CI Runner</li>
</ul>
<p>(1) 安装ruby bundler</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem <span class="keyword">install</span> bundler</div></pre></td></tr></table></figure>
<p>(2) 建立用于安装 GitLab-CI Runner 的系统用户：</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">sudo </span><span class="string">adduser </span><span class="built_in">--disabled-login</span> <span class="built_in">--gecos</span> <span class="string">'GitLab CI Runner'</span> <span class="string">gitlab_ci_runner</span></div></pre></td></tr></table></figure>
<p>(3) 获取GitLab-CI Runner 源代码：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">su</span> gitlab_ci_runner</div><div class="line"><span class="keyword">cd</span> ~/</div><div class="line">git clone https:<span class="comment">//gitlab.com/gitlab-org/gitlab-ci-runner.git</span></div><div class="line"><span class="keyword">cd</span> gitlab-<span class="keyword">ci</span>-runner</div></pre></td></tr></table></figure>
<p>(4) 修改Gem源的镜像改为淘宝镜像：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">vim</span> Gemfile</div><div class="line">改为：</div><div class="line"><span class="keyword">source</span> <span class="string">"https://ruby.taobao.org/"</span></div></pre></td></tr></table></figure>
<p>(5) 配置完成后安装 Gitlab-CI Runner 的 Gem 包，换回root用户</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /home/gitlab_ci_runner/gitlab-<span class="keyword">ci</span>-runner</div><div class="line">bundle install</div></pre></td></tr></table></figure>
<p>(6) 修改hosts文件，填入gitlab服务器和GitLab-CI 服务器域名对应的 IP</p>
<p>(7) 在gitlab服务器上找到ci的token和url</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">su</span> gitlab_ci_runner</div><div class="line"><span class="keyword">cd</span> ~/gitlab-<span class="keyword">ci</span>-runner</div><div class="line">CI_SERVER_URL=https:<span class="comment">//git.zhai.me/ci REGISTRATION_TOKEN=replaceme bundle exec ./bin/setup</span></div></pre></td></tr></table></figure>
<p>(8) 尝试用 SSH 方式访问 GitLab 服务器，并将服务器的 ssh key 添加到已知主机列表</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">git</span>@<span class="keyword">git</span>.<span class="keyword">zhai</span>.<span class="keyword">me</span></div></pre></td></tr></table></figure>
<p>(9) 复制 GitLab-CI Runner 的自动启动脚本到系统目录</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /home/gitlab_ci_runner/gitlab-ci-runner</div><div class="line">sudo cp ./<span class="class"><span class="keyword">lib</span>/<span class="title">support</span>/<span class="title">init</span>.<span class="title">d</span>/<span class="title">gitlab_ci_runner</span> /<span class="title">etc</span>/<span class="title">init</span>.<span class="title">d</span>/<span class="title">gitlab</span>-<span class="title">ci</span>-<span class="title">runner</span></span></div><div class="line">sudo chmod +x /etc/init.d/gitlab-ci-runner</div><div class="line">sudo update-rc.d gitlab-ci-runner defaults <span class="number">21</span></div></pre></td></tr></table></figure>
<p>(10) 启动GitLab-CI Runner</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service gitlab-ci-runner <span class="literal">start</span></div></pre></td></tr></table></figure>
<p>(11) 到gitlab中去验证。</p>
<h2 id="配合karma进行工程自动化测试"><a href="#配合karma进行工程自动化测试" class="headerlink" title="配合karma进行工程自动化测试"></a>配合karma进行工程自动化测试</h2><p>karma要配合浏览器使用，（chrome、chromium-browser或者firefox），这边使用firefox，因为chrome、chromium-browser没装成功。。</p>
<h3 id="安装vnc和图形化界面"><a href="#安装vnc和图形化界面" class="headerlink" title="安装vnc和图形化界面"></a>安装vnc和图形化界面</h3><p>安装桌面图形化的一些软件包</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install x-<span class="built_in">window</span>-system-core gdm ubuntu-desktop gnome-core xfce4</div></pre></td></tr></table></figure>
<p>安装浏览器和vnc</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install vnc4server firefox</div></pre></td></tr></table></figure>
<p>因为gitlab使用git用户，所以切换到git用户并使用开启vnc</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">su</span> - git</div><div class="line">vncserver :<span class="number">1</span></div><div class="line"><span class="comment">#第一次使用可能要设置密码</span></div></pre></td></tr></table></figure>
<p>我们在客户端打开vnc viewer，连接该服务器。可能发现只有命令行，没有图形化界面，进行如下操作：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">vim /home/git/.vnc/xstartup</div><div class="line">改为：</div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line"><span class="comment"># Uncomment the following two lines for normal desktop:</span></div><div class="line"><span class="comment"># unset SESSION_MANAGER</span></div><div class="line"><span class="comment"># exec /etc/X11/xinit/xinitrc</span></div><div class="line"></div><div class="line">[ -x /etc/vnc/xstartup ] &amp;&amp; <span class="built_in">exec</span> /etc/vnc/xstartup</div><div class="line">[ -r <span class="variable">$HOME</span>/.Xresources ] &amp;&amp; xrdb <span class="variable">$HOME</span>/.Xresources</div><div class="line">xsetroot -solid grey</div><div class="line">vncconfig -iconic &amp;</div><div class="line">x-terminal-emulator -geometry 80x24+10+10 -ls -title <span class="string">"<span class="variable">$VNCDESKTOP</span> Desktop"</span> &amp;</div><div class="line"><span class="comment">#x-window-manager &amp;</span></div><div class="line">gnome-session &amp;</div></pre></td></tr></table></figure>
<p>重启vncserve，并重新连接。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">su</span> <span class="selector-tag">-</span> <span class="selector-tag">git</span></div><div class="line"><span class="selector-tag">vncserver</span> <span class="selector-tag">-kill</span><span class="selector-pseudo">:1</span></div><div class="line"><span class="selector-tag">vncserver</span> <span class="selector-pseudo">:1</span></div></pre></td></tr></table></figure>
<p>在服务器上运行firfox，或者在vnc图形化界面中打开firefox，没有报错，则正常。但是我发现肯定会报错。。。报错信息如下：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@git:~# firefox</div><div class="line"><span class="keyword">Error: </span>cannot open display: :0</div></pre></td></tr></table></figure>
<p><strong>这个坑是因为一个叫DISPLAY的变量，坑了好久。。解决办法如下：</strong></p>
<p>如果我们在git用户上使用vncserver :1来开启vnc，则在git用户中要设置变量DISPLAY为:1，如果使用vncserver :2来开启vnc，则在git用户中要设置变量DISPLAY为:2，如下：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim /<span class="built_in">home</span>/git/.bashrc</div><div class="line">写入：</div><div class="line"><span class="keyword">export</span> DISPLAY=:<span class="number">1</span></div><div class="line"></div><div class="line">source /<span class="built_in">home</span>/git/.bashrc</div></pre></td></tr></table></figure>
<p>重启vncserver，然后进行测试，之后在gitlab中的runner中进行测试。</p>
<h2 id="问题小记"><a href="#问题小记" class="headerlink" title="问题小记"></a>问题小记</h2><p>1、公司项目编译的时候使用npm，建议改为cnpm或者更改为淘宝的源。</p>
<p>2、如下报错，因为node 4以上版本升级为v8引擎，编译时需要gcc4.8以上版本，而系统默认安装gcc4.6。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This <span class="keyword">version</span> of <span class="keyword">node</span><span class="title">/NAN</span>/v8 requires a C++<span class="number">11</span> compiler</div></pre></td></tr></table></figure>
<p>升级gcc和g++，方法：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">首先添加ppa到库：</div><div class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:ubuntu-toolchain-r/test</div><div class="line">sudo apt-get update</div><div class="line">安装高版本gcc、g++</div><div class="line">sudo apt-get install gcc-5 g++-5</div><div class="line">验证(可能需要改一下软连接)</div><div class="line">gcc -v</div><div class="line">g++ -v</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gitlab迁移小记]]></title>
      <url>http://yoursite.com/2016/12/15/Gitlab%E8%BF%81%E7%A7%BB%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>情况一：A机器和B机器 使用Omnibus package（rpm）安装，且版本相同</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">备份：</div><div class="line">gitlab-rake gitlab:<span class="keyword">backup</span>:<span class="keyword">create</span></div><div class="line"></div><div class="line">恢复：</div><div class="line"># 停止相关数据连接服务</div><div class="line">gitlab-ctl <span class="keyword">stop</span> unicorn</div><div class="line">gitlab-ctl <span class="keyword">stop</span> sidekiq</div><div class="line"></div><div class="line"># 从<span class="keyword">Timestamp</span>编号备份中恢复</div><div class="line">gitlab-rake gitlab:<span class="keyword">backup</span>:<span class="keyword">restore</span> <span class="keyword">BACKUP</span>= <span class="keyword">Timestamp</span></div><div class="line"></div><div class="line"># 启动Gitlab</div><div class="line">sudo gitlab-ctl <span class="keyword">start</span></div></pre></td></tr></table></figure>
<p>情况二：使用源码安装，且版本相同</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">全量备份：</div><div class="line">sudo -u git -H bundle exec rake gitlab:<span class="keyword">backup</span>:<span class="keyword">create</span> RAILS_ENV=production</div><div class="line"></div><div class="line">恢复：</div><div class="line">sudo -u git -H bundle exec rake gitlab:<span class="keyword">backup</span>:<span class="keyword">restore</span> RAILS_ENV=production <span class="keyword">BACKUP</span>=<span class="keyword">Timestamp</span></div></pre></td></tr></table></figure>
<p>情况三：使用源码安装，版本不完全相同</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">备份：打包<span class="regexp">/home/</span>git<span class="regexp">/repositories、备份pgsql或者mysql数据（如果版本一样，可以直接打包数据目录）、/</span>home<span class="regexp">/git/</span>.ssh/authorized_keys.</div><div class="line"></div><div class="line">恢复：</div><div class="line"><span class="number">1</span>、 将上边备份的文件放到指定位置</div><div class="line"><span class="number">2</span>、 bundle exec rake <span class="string">gitlab:</span><span class="string">import:</span>repos RAILS_ENV=production</div><div class="line"></div><div class="line">检测：</div><div class="line">sudo -u git -H bundle exec rake <span class="string">gitlab:</span><span class="string">env:</span>info RAILS_ENV=production（环境检测）</div><div class="line">sudo -u git -H bundle exec rake <span class="string">gitlab:</span>check RAILS_ENV=production（项目检测）</div><div class="line"></div><div class="line">根据检测结果提示修复不正确的地方</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ELK + filebeat 日志分析工具的部署和简单应用]]></title>
      <url>http://yoursite.com/2016/12/15/ELK%E5%92%8Cfilebeat%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考文章：<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/</a></p>
</blockquote>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">环境： </div><div class="line">	-<span class="ruby"> 两台 CentOS <span class="number">6.5</span></span></div><div class="line">	-<span class="ruby"> elasticsearch-<span class="number">2.4</span>.<span class="number">1</span></span></div><div class="line">	-<span class="ruby"> kibana-<span class="number">4.6</span>.<span class="number">1</span></span></div><div class="line">	-<span class="ruby"> logstash-<span class="number">2.4</span>.<span class="number">0</span></span></div><div class="line">	-<span class="ruby"> filebeat-<span class="number">1.3</span>.<span class="number">1</span></span></div><div class="line">过程：</div><div class="line">	-<span class="ruby"> 安装 JDK</span></div><div class="line">	-<span class="ruby"> 安装 Elasticsearch</span></div><div class="line">	-<span class="ruby"> 安装 Kibana</span></div><div class="line">	-<span class="ruby"> 安装 Nginx</span></div><div class="line">	-<span class="ruby"> 安装 Logstash</span></div><div class="line">	-<span class="ruby"> 配置 Logstash</span></div><div class="line">	-<span class="ruby"> 安装 filebeat</span></div><div class="line">	-<span class="ruby"> 访问</span></div></pre></td></tr></table></figure>
<hr>
<p>ELK 服务器中：</p>
<h3 id="安装-Java-环境"><a href="#安装-Java-环境" class="headerlink" title="安装 Java 环境"></a>安装 Java 环境</h3><ul>
<li><p><code>https://www.java.com/zh_CN/download/manual.jsp</code>中下载<code>java</code>安装包</p>
</li>
<li><p>解压到<code>/usr/local/jdk</code> 目录下</p>
</li>
<li><p>在<code>/etc/profile</code>文件中追加：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk</div><div class="line"><span class="built_in">export</span> CLASS_PATH=<span class="variable">$JAVA_HOME</span>/lib</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<ul>
<li>使设置的环境变量生效。 <code>source /etc/profile</code></li>
</ul>
<h3 id="安装-Elasticsearch"><a href="#安装-Elasticsearch" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h3><ul>
<li><p>在<code>https://www.elastic.co/downloads</code>中下载<code>Elasticsearch</code>的安装包。</p>
</li>
<li><p>解压，并移动到<code>/usr/local/elasticsearch</code>目录下。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar xvf elasticsearch-2.4.1.zip</div><div class="line">$ mv  elasticsearch-2.4.1  /usr/<span class="built_in">local</span>/elasticsearch</div></pre></td></tr></table></figure>
<ul>
<li>修改<code>/usr/local/elasticsearch/config/elasticsearch.yml</code>，来更改监听端口，监听<code>127.0.0.1</code>，提高安全性。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 如下更改</div><div class="line"><span class="selector-tag">network</span><span class="selector-class">.host</span>: 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure>
<ul>
<li>启动（会有报错）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch/</div><div class="line">$ bash bin/elasticsearch <span class="_">-d</span></div><div class="line"><span class="comment"># 会有报错，信息如下：</span></div><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.RuntimeException: don<span class="string">'t run elasticsearch as root.</span></div></pre></td></tr></table></figure>
<p><code>-d</code>是让<code>es</code>保持后台运行。<br>报错信息提示我们<code>es</code>无法用<code>root</code>用户启动，所以可以创建<code>elk</code>用户，来启动<code>es</code></p>
<h3 id="安装-kibana"><a href="#安装-kibana" class="headerlink" title="安装 kibana"></a>安装 kibana</h3><ul>
<li><p>在<code>https://www.elastic.co/downloads</code>中下载<code>kibana</code>的安装包。</p>
</li>
<li><p>解压，并移动到<code>/usr/local/kibana</code>目录下。</p>
</li>
<li><p>修改<code>/usr/local/kibana/config/kibana.yml</code>，来更改监听端口，监听<code>127.0.0.1</code></p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 修改如下</div><div class="line"><span class="selector-tag">server</span><span class="selector-class">.host</span>: "127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>"</div></pre></td></tr></table></figure>
<ul>
<li>启动，观察<code>/usr/local/kibana/nohup.out</code>是否有报错信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/kibana</div><div class="line">$ nohup bin/kibana &amp;</div></pre></td></tr></table></figure>
<h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><ul>
<li>直接<code>yum</code>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install nginx</div></pre></td></tr></table></figure>
<ul>
<li>修改<code>/etc/nginx/conf.d/default.conf</code>文件，如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       <span class="number">80</span>;</div><div class="line">    server_name  _;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5601</span>/;</div><div class="line">        proxy_set_header Upgrade $http_upgrade;</div><div class="line">        proxy_set_header Connection <span class="string">'upgrade'</span>;</div><div class="line">        proxy_set_header Host $host;</div><div class="line">        proxy_cache_bypass $http_upgrade;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    error_page <span class="number">404</span> /<span class="number">404.</span>html;</div><div class="line">        location = /<span class="number">40</span>x.html &#123;</div><div class="line">    &#125;</div><div class="line">    error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /<span class="number">50</span>x.html;</div><div class="line">        location = /<span class="number">50</span>x.html &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>启动<code>nginx</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 测试配置是否正常</span></div><div class="line">$ nginx -t</div><div class="line"><span class="comment"># 启动</span></div><div class="line">$ /etc/init.d/nginx start</div></pre></td></tr></table></figure>
<h3 id="安装-Logstash"><a href="#安装-Logstash" class="headerlink" title="安装 Logstash"></a>安装 Logstash</h3><ul>
<li><p>在<code>https://www.elastic.co/downloads</code>中下载<code>Logstash</code>的安装包。</p>
</li>
<li><p>解压，并移动到<code>/usr/local/logstash</code>目录下。</p>
</li>
<li><p>验证服务可用性</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/logstash</div><div class="line">$ bin/logstash <span class="_">-e</span> <span class="string">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></div><div class="line">Settings: Default pipeline workers: 2</div><div class="line">Pipeline main started</div><div class="line"><span class="comment"># 任意输入，看输出是否正常，如下：</span></div><div class="line">hello</div><div class="line">2016-10-13T10:07:01.502Z satezheng hello</div><div class="line"><span class="comment"># CTRL-D 退出</span></div></pre></td></tr></table></figure>
<h3 id="配置-Logstash"><a href="#配置-Logstash" class="headerlink" title="配置 Logstash"></a>配置 Logstash</h3><p>我们需要配置 <code>Logstash</code> 以指明从哪里读取数据，向哪里输出数据。这个过程我们称之为定义 <code>Logstash</code> 管道（<code>Logstash Pipeline</code>）。<br>通常一个管道需要包括必须的输入（<code>input</code>），输出（<code>output</code>），和一个可选项目 <code>Filter</code></p>
<h5 id="配置-ssl"><a href="#配置-ssl" class="headerlink" title="配置 ssl"></a>配置 ssl</h5><p>客户端和服务器之间通信使用<code>ssl</code>来认证身份，更加安全。</p>
<ul>
<li>修改<code>/etc/pki/tls/openssl.cnf</code>文件</li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 找到 [v3_ca] 段，添加下面一行，保存退出。</span></div><div class="line"><span class="attr">subjectAltName</span> = IP: logstash_server_ip</div></pre></td></tr></table></figure>
<ul>
<li>生成<code>srt</code>文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /etc/pki/tls</div><div class="line">$ openssl req -config openssl.cnf -x509 -days 2650 -batch -nodes -newkey rsa:2048 -keyout private/logstash-forwarder.key -out certs/logstash-forwarder.crt</div></pre></td></tr></table></figure>
<ul>
<li>发送<code>srt</code>文件到客户端</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /etc/pki/tls</div><div class="line">$ scp certs/logstash-forwarder.crt 客户端IP:/etc/pki/tls/certs</div></pre></td></tr></table></figure>
<h5 id="配置-Logstash-管道文件"><a href="#配置-Logstash-管道文件" class="headerlink" title="配置 Logstash 管道文件"></a>配置 Logstash 管道文件</h5><ul>
<li>创建<code>filebeat-input.conf</code>文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ mkdir /usr/<span class="built_in">local</span>/logstash/conf</div><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/logstash/conf</div><div class="line">$ vim filebeat-input.conf</div><div class="line"><span class="comment"># 写入：</span></div><div class="line">input &#123;</div><div class="line">  beats &#123;</div><div class="line">    port =&gt; 5044</div><div class="line">        <span class="built_in">type</span> =&gt; <span class="string">"logs"</span></div><div class="line">        ssl =&gt; <span class="literal">true</span></div><div class="line">        ssl_certificate =&gt; <span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span></div><div class="line">        ssl_key =&gt; <span class="string">"/etc/pki/tls/private/logstash-forwarder.key"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建<code>filebeat-output.conf</code>文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ vim filebeat-input.conf</div><div class="line"><span class="comment"># 写入：</span></div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123; hosts =&gt; [<span class="string">"127.0.0.1:9200"</span>] &#125;</div><div class="line">  stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/logstash</div><div class="line">$ nohup bin/logstash <span class="_">-f</span> conf/ &amp;</div></pre></td></tr></table></figure>
<h3 id="客户端安装-filebeat"><a href="#客户端安装-filebeat" class="headerlink" title="客户端安装 filebeat"></a>客户端安装 filebeat</h3><p><code>filebeat</code>代替之前的<code>ogstash-forwarder</code></p>
<ul>
<li><p>在<code>https://www.elastic.co/downloads/beats/filebeat</code>下载</p>
</li>
<li><p>解压并放到<code>/usr/local/filebeat</code>目录下</p>
</li>
<li><p>修改<code>filebeat.yml</code></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/filebeat</div><div class="line">$ vim filebeat.yml</div></pre></td></tr></table></figure>
<p>写入：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">filebea<span class="variable">t:</span></div><div class="line">  prospector<span class="variable">s:</span></div><div class="line">    -</div><div class="line">      path<span class="variable">s:</span></div><div class="line">        - /var/<span class="built_in">log</span>/*</div><div class="line">      input_type: <span class="built_in">log</span></div><div class="line">      document_type: <span class="built_in">log</span></div><div class="line">  registry_file: /var/lib/filebeat/registry</div><div class="line"></div><div class="line">outpu<span class="variable">t:</span></div><div class="line">  logstash:</div><div class="line">    host<span class="variable">s:</span> [<span class="string">"服务端IP:5044"</span>]</div><div class="line">    <span class="keyword">tl</span><span class="variable">s:</span></div><div class="line">      certificate_authoritie<span class="variable">s:</span> [<span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span>]</div><div class="line"></div><div class="line">shipper:</div><div class="line"></div><div class="line">loggin<span class="variable">g:</span></div><div class="line">  <span class="keyword">file</span><span class="variable">s:</span></div><div class="line">    rotateeverybyte<span class="variable">s:</span> <span class="number">10485760</span> # = <span class="number">10</span>MB</div></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/filebeat</div><div class="line">$ nohup ./filebeat <span class="_">-e</span> -c filebeat.yml &amp;</div></pre></td></tr></table></figure>
<h3 id="访问服务端IP来验证是否成功，有问题可以根据输出日志来解决。"><a href="#访问服务端IP来验证是否成功，有问题可以根据输出日志来解决。" class="headerlink" title="访问服务端IP来验证是否成功，有问题可以根据输出日志来解决。"></a>访问服务端IP来验证是否成功，有问题可以根据输出日志来解决。</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker基本命令]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><strong>docker version</strong> ：查看docker的版本号，包括客户端、服务端、依赖的Go等</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]# docker <span class="keyword">version</span></div><div class="line">Client:</div><div class="line"> <span class="keyword">Version</span>:      1.8.2-el7.centos</div><div class="line"> API <span class="keyword">version</span>:  1.20</div><div class="line"> Package <span class="keyword">Version</span>: docker-1.8.2-10.el7.centos.x86_64</div><div class="line"> Go <span class="keyword">version</span>:   go1.4.2</div><div class="line"> Git commit:   a01dc02/1.8.2</div><div class="line"> Built:        </div><div class="line"> OS/<span class="keyword">Arch</span>:      linux/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> <span class="keyword">Version</span>:      1.8.2-el7.centos</div><div class="line"> API <span class="keyword">version</span>:  1.20</div><div class="line"> Package <span class="keyword">Version</span>: </div><div class="line"> Go <span class="keyword">version</span>:   go1.4.2</div><div class="line"> Git commit:   a01dc02/1.8.2</div><div class="line"> Built:        </div><div class="line"> OS/<span class="keyword">Arch</span>:      linux/amd64</div></pre></td></tr></table></figure>
<p><strong>docker info</strong>:查看系统(docker)层面信息，包括管理的images, containers数等</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker info</span></div><div class="line"><span class="symbol">Containers:</span> <span class="number">1</span></div><div class="line"><span class="symbol">Images:</span> <span class="number">4</span></div><div class="line">Storage <span class="symbol">Driver:</span> devicemapper</div><div class="line"> Pool <span class="symbol">Name:</span> docker-<span class="number">8</span>:<span class="number">3</span>-<span class="number">36786088</span>-pool</div><div class="line"> Pool <span class="symbol">Blocksize:</span> <span class="number">65.54</span> kB</div><div class="line"> Backing <span class="symbol">Filesystem:</span> xfs</div><div class="line"> Data <span class="symbol">file:</span> /dev/loop0</div><div class="line"> Metadata <span class="symbol">file:</span> /dev/loop1</div><div class="line"> Data Space <span class="symbol">Used:</span> <span class="number">2.059</span> GB</div><div class="line"> Data Space <span class="symbol">Total:</span> <span class="number">107.4</span> GB</div><div class="line"> Data Space <span class="symbol">Available:</span> <span class="number">12.93</span> GB</div><div class="line"> Metadata Space <span class="symbol">Used:</span> <span class="number">1.765</span> MB</div><div class="line"> Metadata Space <span class="symbol">Total:</span> <span class="number">2.147</span> GB</div><div class="line"> Metadata Space <span class="symbol">Available:</span> <span class="number">2.146</span> GB</div><div class="line"> Udev Sync <span class="symbol">Supported:</span> <span class="literal">true</span></div><div class="line"> Deferred Removal <span class="symbol">Enabled:</span> <span class="literal">false</span></div><div class="line"> Data loop <span class="symbol">file:</span> /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">devicemapper</span>/<span class="title">devicemapper</span>/<span class="title">data</span></span></div><div class="line"> Metadata loop <span class="symbol">file:</span> /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">devicemapper</span>/<span class="title">devicemapper</span>/<span class="title">metadata</span></span></div><div class="line"> Library <span class="symbol">Version:</span> <span class="number">1.02</span>.<span class="number">107</span>-RHEL7 (<span class="number">2015</span>-<span class="number">10</span>-<span class="number">14</span>)</div><div class="line">Execution <span class="symbol">Driver:</span> native-<span class="number">0.2</span></div><div class="line">Logging <span class="symbol">Driver:</span> json-file</div><div class="line">Kernel <span class="symbol">Version:</span> <span class="number">3.10</span>.<span class="number">0</span>-<span class="number">327</span>.el7.x86_64</div><div class="line">Operating <span class="symbol">System:</span> CentOS Linux <span class="number">7</span> (Core)</div><div class="line"><span class="symbol">CPUs:</span> <span class="number">1</span></div><div class="line">Total <span class="symbol">Memory:</span> <span class="number">977.9</span> MiB</div><div class="line"><span class="symbol">Name:</span> centos7</div><div class="line"><span class="symbol">ID:</span> <span class="symbol">BUKD:</span><span class="symbol">MUW2:</span><span class="number">5</span><span class="symbol">X2D:</span><span class="symbol">G7BF:</span><span class="number">6</span><span class="symbol">Y7G:</span><span class="symbol">SKIH:</span><span class="symbol">LD6K:</span><span class="symbol">VUAC:</span><span class="number">3</span><span class="symbol">QA4:</span><span class="symbol">JY5C:</span><span class="symbol">S3DG:</span>LFT2</div><div class="line"><span class="symbol">WARNING:</span> bridge-nf-call-iptables is disabled</div><div class="line"><span class="symbol">WARNING:</span> bridge-nf-call-ip6tables is disabled</div></pre></td></tr></table></figure>
<p><strong>search 搜索镜像</strong>：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]# docker search ubuntu12<span class="number">.10</span></div><div class="line">INDEX       NAME                                  DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</div><div class="line">docker.io   docker.io/chug/ubuntu12<span class="number">.10</span>x32         Ubuntu Quantal Quetzal <span class="number">12.10</span> <span class="number">32</span>bit  base i...   <span class="number">0</span>                    </div><div class="line">docker.io   docker.io/chug/ubuntu12<span class="number">.10</span>x64         Ubuntu Quantal Quetzal <span class="number">12.10</span> <span class="number">64</span>bit  base i...   <span class="number">0</span>                    </div><div class="line">docker.io   docker.io/marcgibbons/ubuntu12<span class="number">.10</span>                                                     <span class="number">0</span>                    </div><div class="line">docker.io   docker.io/mirolin/ubuntu12<span class="number">.10</span>                                                         <span class="number">0</span>                    </div><div class="line">docker.io   docker.io/mirolin/ubuntu12<span class="number">.10</span>_redis                                                   <span class="number">0</span></div></pre></td></tr></table></figure>
<p><strong>pull 下载镜像</strong>：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker pull ubuntu</span></div></pre></td></tr></table></figure>
<p><strong>run 使用镜像创建容器</strong>：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker run ubuntu /bin/echo hello world</span></div></pre></td></tr></table></figure>
<p><strong>run 创建容器，并交互式的运行</strong>：<br>这里会创建一个新的容器。</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker run -i -t ubuntu /bin/bash</span></div><div class="line">root@c43c7d102baa:/<span class="comment"># cat /etc/issue</span></div><div class="line">Ubuntu <span class="number">14.04</span>.<span class="number">3</span> LTS <span class="string">\n</span> <span class="string">\l</span></div><div class="line"><span class="comment"># -t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开</span></div></pre></td></tr></table></figure>
<p>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
<p><strong>run -d 守护态运行</strong>：<br>更多的时候，需要让 Docker 容器在后台以守护态（Daemonized）形式运行。此时，可以通过添加 -d 参数来实现。<br>例如下面的命令会在后台运行容器。</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker run -d ubuntu /bin/bash -c <span class="string">"while true;do echo hello world;sleep 1;done"</span></span></div></pre></td></tr></table></figure>
<p><strong>logs 查看容器的运行</strong>：</p>
<p>以上个例子为前导。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker logs 4f34f95b6abc</span></div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div></pre></td></tr></table></figure></p>
<p><strong>ps 查看容器</strong>：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]# docker ps -h</div><div class="line"></div><div class="line">Usage:	docker ps [OPTIONS]</div><div class="line"></div><div class="line">List containers</div><div class="line"></div><div class="line">  -<span class="ruby">a, --all=<span class="literal">false</span>       Show all containers (default shows just running)</span></div><div class="line">  -<span class="ruby">-before=             Show only container created before Id <span class="keyword">or</span> Name</span></div><div class="line">  -<span class="ruby">f, --filter=[]       Filter output based on conditions provided</span></div><div class="line">  -<span class="ruby">-format=             Pretty-print containers using a Go template</span></div><div class="line">  -<span class="ruby">-help=<span class="literal">false</span>          Print usage</span></div><div class="line">  -<span class="ruby">l, --latest=<span class="literal">false</span>    Show the latest created container, <span class="keyword">include</span> non-running</span></div><div class="line">  -<span class="ruby">n=-<span class="number">1</span>                 Show n last created containers, <span class="keyword">include</span> non-running</span></div><div class="line">  -<span class="ruby">-no-trunc=<span class="literal">false</span>      Don<span class="string">'t truncate output</span></span></div><div class="line">  -<span class="ruby"><span class="string">q, --quiet=false     Only </span></span></div><div class="line"> numeric IDs</div><div class="line">  -<span class="ruby"><span class="string">s, --size=false      Display total file sizes</span></span></div><div class="line">  -<span class="ruby"><span class="string">-since=              Show created since Id or Name, include non-running</span></span></div></pre></td></tr></table></figure>
<p><strong>attach 连接已经启动的容器 / start -i 启动并连接容器</strong>：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker ps -a  #查看容器ID</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker start &lt;CONTAINER ID&gt;	#启动容器</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker attach &lt;CONTAINER ID&gt;	#连接容器，该容器必须是启动状态</span></div><div class="line">或者</div><div class="line">[root@centos7 ~]<span class="comment"># docker start -i &lt;CONTAINER ID&gt;		#启动并连接容器</span></div></pre></td></tr></table></figure>
<p><strong>注</strong>：但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。</p>
<p><strong>commit 将容器的状态保存为镜像</strong>：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker commit c43c7d102baa ubhttp</span></div><div class="line">d47bbf8e50bace073de2b256b0360cfab029c11881f0d361fce7ae7464aa40ff</div><div class="line">[root@centos7 ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             VIRTUAL SIZE</div><div class="line">ubhttp              latest              d47bbf8e50ba        <span class="number">54</span> seconds ago      <span class="number">248</span> MB</div><div class="line">docker.io/ubuntu    latest              <span class="number">8693</span>db7e8a00        <span class="number">7</span> days ago          <span class="number">187.9</span> MB</div><div class="line"><span class="comment">## 更为标准点的如下：</span></div><div class="line">$ sudo docker commit -m <span class="string">"Added json gem"</span> -a <span class="string">"Docker Newbee"</span> <span class="number">0</span>b2616b0e5a8 ouruser/sinatra:v2</div><div class="line">其中，-m 来指定提交的说明信息，跟我们使用的版本控制工具一样；-a 可以指定更新的用户信息；之后是用来创建镜像的容器的 ID；最后指定目标镜像的仓库名和 <span class="keyword">tag</span> <span class="title">信息。创建成功后会返回这个镜像的 ID</span> 信息。</div></pre></td></tr></table></figure>
<p><strong>diff 命令查看容器内的文件变化</strong>：</p>
<p>它可以列出容器内发生变化的文件和目录。这些变化包括添加（A-add）、删除（D-delete）、修改（C-change）</p>
<figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="title">@centos7</span> ~]# docker diff <span class="keyword">c</span><span class="number">43</span><span class="keyword">c</span><span class="number">7</span>d<span class="number">102</span>baa</div></pre></td></tr></table></figure>
<p><strong>cp 命令拷贝文件</strong>：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#从docker中往本地拷贝文件</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker cp c43c7d102baa:/var/www/html/index.html /opt/   </span></div><div class="line">[root@centos7 ~]<span class="comment"># ls /opt/</span></div><div class="line">index.html  rh</div><div class="line"><span class="comment"># 从本地往docker中拷贝文件</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker cp aa c43c7d102baa:/var</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker start -i c43c7d102baa</span></div><div class="line">root@<span class="symbol">c43c7d102baa:</span>/<span class="comment"># ls</span></div><div class="line">bin  boot  dev  etc  home  <span class="class"><span class="keyword">lib</span>  <span class="title">lib64</span>  <span class="title">media</span>  <span class="title">mnt</span>  <span class="title">opt</span>  <span class="title">proc</span>  <span class="title">root</span>  <span class="title">run</span>  <span class="title">sbin</span>  <span class="title">srv</span>  <span class="title">sys</span>  <span class="title">tmp</span>  <span class="title">usr</span>  <span class="title">var</span></span></div><div class="line">root@<span class="symbol">c43c7d102baa:</span>/<span class="comment"># ls var/</span></div><div class="line">aa  backups  cache  <span class="class"><span class="keyword">lib</span>  <span class="title">local</span>  <span class="title">lock</span>  <span class="title">log</span>  <span class="title">mail</span>  <span class="title">opt</span>  <span class="title">run</span>  <span class="title">spool</span>  <span class="title">tmp</span>  <span class="title">www</span></span></div></pre></td></tr></table></figure>
<p><strong>inspect 收集有关容器和镜像的底层信息</strong>：</p>
<p>Docker inspect命令可以收集有关容器和镜像的底层信息。这些信息包括：</p>
<ul>
<li>容器实例的IP地址</li>
<li>端口绑定列表</li>
<li>特定端口映射的搜索</li>
<li>收集配置的详细信息</li>
</ul>
<p>语法：</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect <span class="keyword">container</span>/<span class="keyword">image</span></div></pre></td></tr></table></figure>
<p><strong>kill 命令发送sigkill信号停止容器的主进程</strong>：</p>
<p>语法：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker kill [<span class="keyword">options</span>] <span class="symbol">&lt;container_id&gt;</span></div></pre></td></tr></table></figure>
<p><strong>rmi 移除一个或多个镜像</strong>：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker rmi <span class="params">&lt;image_id&gt;</span></div><div class="line"><span class="meta">#注意：在删除镜像之前要先用 docker rm 删掉依赖于这个镜像的所有容器</span></div></pre></td></tr></table></figure>
<p><strong>wait 阻塞对指定容器的其它调用方法，直到容器停止后退出阻塞</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker wait <span class="tag">&lt;<span class="name">container_id</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>tag 修改镜像的标签</strong></p>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker images </span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">&lt;none&gt;              &lt;none&gt;              f59c7e5b1817       <span class="number"> 18 </span>hours ago       <span class="number"> 192 </span>MB</div><div class="line">docker.io/ubuntu    latest              8693db7e8a00       <span class="number"> 7 </span>days ago          187.9 MB</div><div class="line">[root@centos7 ~]<span class="comment"># docker tag f59c7e5b1817 zwx/ub_mv:127 </span></div><div class="line">[root@centos7 ~]<span class="comment"># docker images </span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">zwx/ub_mv          <span class="number"> 127 </span>                f59c7e5b1817       <span class="number"> 18 </span>hours ago       <span class="number"> 192 </span>MB</div><div class="line">docker.io/ubuntu    latest              8693db7e8a00       <span class="number"> 7 </span>days ago          187.9 MB</div></pre></td></tr></table></figure>
<h2 id="docker的导入导出操作"><a href="#docker的导入导出操作" class="headerlink" title="docker的导入导出操作"></a>docker的导入导出操作</h2><p><strong>save 保存镜像为tar文件并发送到STDOUT</strong>:</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@node2 ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             VIRTUAL SIZE</div><div class="line">zwx_ub              latest              f59c7e5b1817        <span class="number">7</span> seconds ago       <span class="number">192</span> MB</div><div class="line">ubuntu              latest              <span class="number">8693</span>db7e8a00        <span class="number">6</span> days ago          <span class="number">187.9</span> MB</div><div class="line">[root@node2 ~]<span class="comment"># docker save f59c7e5b1817 &gt;zwx_ub.tar</span></div><div class="line"><span class="comment"># 我将zwx_ub这个镜像导出成tar包，并拷贝到centos7的测试机中导入，导入过程在下边。</span></div></pre></td></tr></table></figure>
<p><strong>load 从tar文件中载入镜像或仓库到STDIN</strong>:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker load -i zwx_ub.tar </span></div><div class="line">[root@centos7 ~]<span class="comment"># docker images </span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">ubhttp              latest              d47bbf8e50ba        About an hour ago   <span class="number">248</span> MB</div><div class="line">&lt;none&gt;              &lt;none&gt;              f59c7e5b1817        <span class="number">16</span> hours ago        <span class="number">192</span> MB</div><div class="line">docker.io/ubuntu    latest              <span class="number">8693</span>db7e8a00        <span class="number">7</span> days ago          <span class="number">187.9</span> MB</div><div class="line">[root@centos7 ~]<span class="comment"># docker run -it f59c7e5b1817</span></div><div class="line">root@<span class="symbol">e17558664f8d:</span>/<span class="comment"># ls</span></div><div class="line">bin  boot  dev  etc  home  <span class="class"><span class="keyword">lib</span>  <span class="title">lib64</span>  <span class="title">media</span>  <span class="title">mnt</span>  <span class="title">opt</span>  <span class="title">proc</span>  <span class="title">root</span>  <span class="title">run</span>  <span class="title">sbin</span>  <span class="title">srv</span>  <span class="title">sys</span>  <span class="title">tmp</span>  <span class="title">usr</span>  <span class="title">var</span></span></div><div class="line">root@<span class="symbol">e17558664f8d:</span>/<span class="comment"># ls /mnt/</span></div><div class="line">zwx</div><div class="line"><span class="comment"># 可以看出，我导入zwx_ub这个镜像后，镜像ID并没有变化，我创建个容器并进入，发现打包前我创建的文件都在。</span></div></pre></td></tr></table></figure>
<p><strong>import 从本地文件系统导入一个镜像</strong></p>
<p>比如，先下载了一个 ubuntu-14.04 的镜像，之后使用以下命令导入<br>tar.gz的镜像可以在<code>http://openvz.org/Download/template/precreated</code>下载。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># cat ubuntu-14.04-x86_64-minimal.tar.gz  |docker import - ubuntu:zwx</span></div><div class="line"><span class="number">23997</span>a971195cdd826f16a50573e480e1be1679729636178146425cdd46d1b52</div><div class="line">[root@centos7 ~]<span class="comment"># docker images </span></div><div class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             VIRTUAL SIZE</div><div class="line">ubuntu              zwx                 <span class="number">23997</span>a971195        <span class="number">28</span> seconds ago      <span class="number">214.9</span> MB</div></pre></td></tr></table></figure>
<p><strong>export 容器的导出</strong></p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">16</span>f568766019        ubuntu              <span class="string">"/bin/bash"</span>         <span class="number">52</span> minutes ago      Up <span class="number">45</span> minutes                           elegant_mcclintock</div><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker export 16f568766019 &gt;ubuntu.tar</span></div></pre></td></tr></table></figure>
<p><strong>import 容器的导入</strong>：</p>
<p>可以将容器的tar文件再导入为镜像</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">cat</span> ubuntu.tar | sudo docker import - <span class="keyword">test</span>/ubuntu:v1.0</div><div class="line">$ sudo docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</div><div class="line"><span class="keyword">test</span>/ubuntu         v1.0                9d37a6082e97        <span class="keyword">About</span> a minute ago   171.3 MB</div></pre></td></tr></table></figure>
<p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> docker import http:<span class="regexp">//</span>example.com<span class="regexp">/exampleimage.tgz example/im</span>agerepo</div></pre></td></tr></table></figure>
<p><strong>注</strong>：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker私有仓库]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h3 id="安装私有仓库"><a href="#安装私有仓库" class="headerlink" title="安装私有仓库"></a>安装私有仓库</h3><p>默认情况下，仓库会被创建在容器的 <code>/tmp/registry</code> 下。可以通过 -v 参数来将镜像文件存放在本地的指定路径。 例如下面的例子将上传的镜像放到 <code>/opt/data/registry</code> 目录。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 5000:5000 -v /opt/data/registry:/tmp/registry registry</span></div></pre></td></tr></table></figure>
<h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><p>创建好私有仓库之后，就可以使用 docker tag 来标记一个镜像，然后推送它到仓库，别的机器上就可以下载下来了。例如私有仓库地址为 192.168.0.1:5000。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">sate/centos         <span class="number">6.7</span>                 <span class="number">976079</span>dcc3f5        <span class="number">3</span> days ago          <span class="number">190.6</span> MB</div><div class="line">centos              <span class="number">6.7</span>                 <span class="number">130</span>db9a2a215        <span class="number">2</span> weeks ago         <span class="number">190.6</span> MB</div></pre></td></tr></table></figure>
<p>使用docker tag 将 976079dcc3f5 这个镜像标记为 192.168.0.1:5000/sate-centos（格式为 docker tag IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]）。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">tag</span> <span class="title">976079dcc3f5</span> <span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">5000</span>/sate-centos:test</div><div class="line"></div><div class="line">$ docker images</div><div class="line">REPOSITORY                        <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             VIRTUAL SIZE</div><div class="line"><span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">5000</span>/sate-centos   test                <span class="number">976079</span>dcc3f5        <span class="number">3</span> days ago          <span class="number">190.6</span> MB</div><div class="line">sate/centos                       <span class="number">6.7</span>                 <span class="number">976079</span>dcc3f5        <span class="number">3</span> days ago          <span class="number">190.6</span> MB</div><div class="line">centos                            <span class="number">6.7</span>                 <span class="number">130</span>db9a2a215        <span class="number">2</span> weeks ago         <span class="number">190.6</span> MB</div></pre></td></tr></table></figure>
<p>使用 docker push 上传标记的镜像。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">push</span> <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/sate-centos</div><div class="line">The <span class="keyword">push</span> refers to a repository [<span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/sate-centos] (len: <span class="number">1</span>)</div><div class="line">unable to ping registry endpoint https://<span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/v0/</div><div class="line">v2 ping attempt failed with error: Get https://<span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/v2/: EOF</div><div class="line"> v1 ping attempt failed with error: Get https://<span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/v1/_ping: EOF</div></pre></td></tr></table></figure>
<p>注：报错是因为 <code>docker</code> 默认使用<code>https</code>的方式，解决办法如下：</p>
<p><strong>办法：</strong> 修改配置文件，使用 http 方式</p>
<p><code>centos</code>系统：</p>
<p>修改docker的配置文件<code>/etc/sysconfig/docker</code></p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 加入：</span></div><div class="line">INSECURE_REGISTRY=<span class="string">'--insecure-registry 192.168.0.1:5000'</span></div><div class="line"><span class="meta"># 重启服务</span></div><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p><code>ubuntu</code>系统：</p>
<p>修改docker的配置文件<code>/etc/default/docker</code></p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 加入：</span></div><div class="line">DOCKER_OPTS=<span class="string">'--insecure-registry 192.168.0.1:5000'</span></div><div class="line"><span class="meta"># 重启服务</span></div><div class="line">service docker start</div></pre></td></tr></table></figure>
<p>再次尝试 <code>push</code> 镜像，如下：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sudo docker <span class="keyword">push </span><span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">5000</span>/test</div><div class="line"><span class="symbol">The</span> <span class="keyword">push </span>refers to a repository [<span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">5000</span>/test] (len: <span class="number">1</span>)</div><div class="line"><span class="symbol">Sending</span> image list</div><div class="line"><span class="keyword">Pushing </span>repository <span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">5000</span>/test (<span class="number">1</span> tags)</div><div class="line"><span class="symbol">Image</span> <span class="number">511136</span>ea3c5a already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="symbol">Image</span> <span class="number">9</span>bad880da3d2 already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="symbol">Image</span> <span class="number">25</span>f11f5fb0cb already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="symbol">Image</span> ebc34468f71d already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="symbol">Image</span> <span class="number">2318</span>d26665ef already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="symbol">Image</span> <span class="keyword">ba5877dc9bec </span>already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="keyword">Pushing </span>tag for <span class="keyword">rev </span>[<span class="keyword">ba5877dc9bec] </span>on &#123;http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">5000</span>/<span class="built_in">v1</span>/repositories/test/tags/latest&#125;</div></pre></td></tr></table></figure>
<p>当<code>push</code>成功后，查看本地目录<code>/opt/data/registry</code>:</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root<span class="symbol">@sate</span>-z:/opt/data/registry<span class="meta"># ls</span></div><div class="line">images  repositories</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>通过私仓的链接地址查看我们刚上传的镜像：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">5000</span><span class="regexp">/v1/</span>search</div><div class="line">&#123;<span class="string">"num_results"</span>: <span class="number">1</span>, <span class="string">"query"</span>: <span class="string">""</span>, <span class="string">"results"</span>: [&#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/sate-centos"</span>&#125;]&#125;</div></pre></td></tr></table></figure>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>用<code>pull</code>命令来拉取我们的镜像：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/sate-centos:<span class="keyword">test</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker使用Dockerfile]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E4%BD%BF%E7%94%A8Dockerfile/</url>
      <content type="html"><![CDATA[<p>　使用 <code>docker commit</code> 来扩展一个镜像比较简单，但是不方便在一个团队中分享。我们可以使用 <code>docker build</code> 来创建一个新的镜像。为此，首先需要创建一个 Dockerfile，包含一些如何创建镜像的指令。</p>
<p>创建新的目录和dockerfile</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>mkdir sinatra</div><div class="line"><span class="variable">$ </span>cd sinatra</div><div class="line"><span class="variable">$ </span>touch Dockerfile</div></pre></td></tr></table></figure>
<p>Dockerfile 中每一条指令都创建镜像的一层，例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This is a comment		# 使用#来注释</span></div><div class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span>		  <span class="comment"># FROM 指令告诉 Docker 使用哪个镜像作为基础</span></div><div class="line"><span class="keyword">MAINTAINER</span> Docker Newbee &lt;newbee@docker.com&gt;	<span class="comment"># 接着是维护者的信息</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -qq update		<span class="comment"># RUN开头的指令会在创建中运行，比如安装一个软件包，在这里使用 apt-get 来安装了一些软件</span></span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -qqy install ruby ruby-dev</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> gem install sinatra</span></div></pre></td></tr></table></figure>
<p>创建完成dockerfile后可以使用<code>docker bulid</code> 来生成镜像。</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$ sudo docker build -t=<span class="string">"ouruser/sinatra:v2"</span> .</div><div class="line">Uploading context  <span class="number">2.56</span> kB</div><div class="line">Uploading context</div><div class="line">Step <span class="number">0</span> : FROM ubuntu:<span class="number">14.04</span></div><div class="line"> ---&gt; <span class="number">99</span>ec81b80c55</div><div class="line">Step <span class="number">1</span> : MAINTAINER Newbee &lt;newbee@docker.com&gt;</div><div class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">7</span>c5664a8a0c1</div><div class="line"> ---&gt; <span class="number">2</span>fa8ca4e2a13</div><div class="line">Removing intermediate container <span class="number">7</span>c5664a8a0c1</div><div class="line">Step <span class="number">2</span> : RUN apt-get -qq update</div><div class="line"> ---&gt; Running <span class="keyword">in</span> b07cc3fb4256</div><div class="line"> ---&gt; <span class="number">50</span>d21070ec0c</div><div class="line">Removing intermediate container b07cc3fb4256</div><div class="line">Step <span class="number">3</span> : RUN apt-get -qqy install ruby ruby-dev</div><div class="line"> ---&gt; Running <span class="keyword">in</span> a5b038dd127e</div><div class="line">Selecting previously unselected package libasan0:amd64.</div><div class="line">(Reading database ... <span class="number">11518</span> files and directories currently installed.)</div><div class="line">Preparing to unpack .../libasan0_4<span class="number">.8</span><span class="number">.2</span><span class="number">-19</span>ubuntu1_amd64.deb ...</div><div class="line">Setting up ruby (<span class="number">1</span>:<span class="number">1.9</span><span class="number">.3</span><span class="number">.4</span>) ...</div><div class="line">Setting up ruby1<span class="number">.9</span><span class="number">.1</span> (<span class="number">1.9</span><span class="number">.3</span><span class="number">.484</span><span class="number">-2</span>ubuntu1) ...</div><div class="line">Processing triggers for libc-bin (<span class="number">2.19</span><span class="number">-0</span>ubuntu6) ...</div><div class="line"> ---&gt; <span class="number">2</span>acb20f17878</div><div class="line">Removing intermediate container a5b038dd127e</div><div class="line">Step <span class="number">4</span> : RUN gem install sinatra</div><div class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">5e9</span>d0065c1f7</div><div class="line">. . .</div><div class="line">Successfully installed rack-protection<span class="number">-1.5</span><span class="number">.3</span></div><div class="line">Successfully installed sinatra<span class="number">-1.4</span><span class="number">.5</span></div><div class="line"><span class="number">4</span> gems installed</div><div class="line"> ---&gt; <span class="number">324104</span>cde6ad</div><div class="line">Removing intermediate container <span class="number">5e9</span>d0065c1f7</div><div class="line">Successfully built <span class="number">324104</span>cde6ad</div><div class="line"># 其中 -t 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径。</div><div class="line"># dockerfile命名是固定的。</div></pre></td></tr></table></figure>
<p>此外，还可以利用 ADD 命令复制本地文件到镜像；用 EXPOSE 命令来向外部开放端口；用 CMD 命令来描述容器启动后运行的程序等。例如</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># put my local web site in myApp folder to /var/www</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> myApp /var/www</span></div><div class="line"><span class="comment"># expose httpd port</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></div><div class="line"><span class="comment"># the command to run</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/sbin/apachectl"</span>, <span class="string">"-D"</span>, <span class="string">"FOREGROUND"</span>]</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker练习]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E7%BB%83%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>系统：ubuntu 14.04</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 升级内核</div><div class="line">$ apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">$ apt-<span class="built_in">get</span> install linux-headers-<span class="number">3.13</span>.<span class="number">0</span>-<span class="number">88</span>-generic</div><div class="line"># 安装新版本的 docker</div><div class="line">$ sudo apt-<span class="built_in">get</span> install apt-transport-https</div><div class="line">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.<span class="keyword">com</span>:<span class="number">80</span> --recv-<span class="built_in">keys</span> <span class="number">36</span>A1D7869245C8950F966E92D8576A8BA88D21E9</div><div class="line">$ <span class="keyword">deb</span> http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.io/ubuntu docker main &gt; /etc/apt/sources.<span class="keyword">list</span>.d/docker.<span class="keyword">list</span><span class="comment">"</span></div><div class="line">$ sudo bash -<span class="keyword">c</span> <span class="string">"echo deb https://get.docker.io/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list"</span></div><div class="line">$ apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">$ apt-<span class="built_in">get</span> install lxc-docker</div></pre></td></tr></table></figure>
<h3 id="下载-ubuntu-镜像"><a href="#下载-ubuntu-镜像" class="headerlink" title="下载 ubuntu 镜像"></a>下载 ubuntu 镜像</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ docker pull ubuntu</div><div class="line">$ docker images</div><div class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             VIRTUAL SIZE</div><div class="line">ubuntu              latest              <span class="number">594</span>b6e305389        <span class="number">3</span> weeks ago         <span class="number">122</span> MB</div></pre></td></tr></table></figure>
<h3 id="启动容器，并安装-nginx"><a href="#启动容器，并安装-nginx" class="headerlink" title="启动容器，并安装 nginx"></a>启动容器，并安装 nginx</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">run</span><span class="bash"> -i -t ubuntu /bin/bash</span></div><div class="line">在该 docker 容器中安装 nginx</div></pre></td></tr></table></figure>
<h3 id="将安装-nginx-的容器保存为镜像"><a href="#将安装-nginx-的容器保存为镜像" class="headerlink" title="将安装 nginx 的容器保存为镜像"></a>将安装 nginx 的容器保存为镜像</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                         PORTS               NAMES                    ecstatic_thompson</div><div class="line"><span class="keyword">b5138a3e3352 </span>       ubuntu              <span class="string">"/bin/bash"</span>              <span class="number">2</span> hours ago         Exited (<span class="number">0</span>) <span class="number">2</span> hours ago                             hopeful_perlman</div><div class="line">root@sate-z:~<span class="comment">#</span></div><div class="line">$ docker commit -m <span class="string">"nginx/ubuntu"</span> -a <span class="string">"sate"</span> <span class="keyword">b5138a3e3352 </span>ubuntu-nginx:<span class="built_in">v1</span></div><div class="line">-m 备注 -a 用户名 ubuntu-nginx:<span class="built_in">v1</span> 镜像名称和TAG 名称</div></pre></td></tr></table></figure>
<h3 id="用新创建的镜像，开一个新的容器，并映射端口"><a href="#用新创建的镜像，开一个新的容器，并映射端口" class="headerlink" title="用新创建的镜像，开一个新的容器，并映射端口"></a>用新创建的镜像，开一个新的容器，并映射端口</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">run</span><span class="bash"> -i -t -p 90:80 ubuntu-nginx:v1  /bin/bash</span></div><div class="line"><span class="comment"># 在该 docker 中启动 nginx 。可能需要自己写 nginx 的conf文件，访问宿主机的 ip:90，就可以访问到 docker 中的网站</span></div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>现在有个问题就是如何让 docker 容器在后台运行。</p>
<p>还有就是 ansible 如何控制 docker。</p>
<p>有一个可以后台运行的方法是安装 sshd 服务，然后以<code>-D</code>方式启动，但感觉应该还有更好的办法</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ apt-get install openssh-server openssh-client</div><div class="line">$ docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 50001:22 ubuntu/ruby:v2 /usr/sbin/sshd -D</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker的安装]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h3 id="centos-6-5-中docker的安装"><a href="#centos-6-5-中docker的安装" class="headerlink" title="centos 6.5 中docker的安装"></a>centos 6.5 中docker的安装</h3><ul>
<li>yum 源安装</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum <span class="keyword">install</span> docker-io</div></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="regexp">/etc/i</span>nit.d<span class="regexp">/docker start</span></div></pre></td></tr></table></figure>
<ul>
<li>日志中报错</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">time</span>=<span class="string">"2016-01-19T14:21:25.993968299+08:00"</span> level=warning msg=<span class="string">"You are running linux kernel version 2.6.32-431.el6.x86_64, which might be unstable running docker. Please upgrade your kernel to 3.10.0."</span> </div><div class="line"><span class="built_in">time</span>=<span class="string">"2016-01-19T14:21:25.997212022+08:00"</span> level=info msg=<span class="string">"Listening for HTTP on unix (/var/run/docker.sock)"</span> </div><div class="line">/usr/bin/docker: relocation <span class="keyword">error</span>: /usr/bin/docker: symbol dm_task_get_info_with_deferred_remove, <span class="built_in">version</span> Base <span class="keyword">not</span> defined <span class="keyword">in</span> <span class="built_in">file</span> libdevmapper.so<span class="number">.1</span><span class="number">.02</span> <span class="keyword">with</span> link <span class="built_in">time</span> <span class="keyword">reference</span></div></pre></td></tr></table></figure>
<p>日志可以看出，一个warning和一个error。 warning中指出我的kernel版本可能运行docker不稳定，建议我升级到3.10版本。 error的报错可以通过升级device-mapper-libs解决。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">yum upgrade device-mapper-libs</span></div></pre></td></tr></table></figure></p>
<h3 id="centos-7-中docker的安装"><a href="#centos-7-中docker的安装" class="headerlink" title="centos 7 中docker的安装"></a>centos 7 中docker的安装</h3><ul>
<li>yum 源安装</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum <span class="keyword">install</span> docker</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker容器的连接]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E5%AE%B9%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="连接docker容器的三种方式"><a href="#连接docker容器的三种方式" class="headerlink" title="连接docker容器的三种方式"></a>连接docker容器的三种方式</h2><h3 id="attach-参数"><a href="#attach-参数" class="headerlink" title="attach 参数"></a>attach 参数</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker ps -a  #查看容器ID</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker start &lt;CONTAINER ID&gt;	#启动容器</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker attach &lt;CONTAINER ID&gt;	#连接容器，该容器必须是启动状态</span></div><div class="line">或者</div><div class="line">[root@centos7 ~]<span class="comment"># docker start -i &lt;CONTAINER ID&gt;		#启动并连接容器</span></div></pre></td></tr></table></figure>
<p><strong>注</strong>：但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。</p>
<h3 id="nsenter-命令"><a href="#nsenter-命令" class="headerlink" title="nsenter 命令"></a>nsenter 命令</h3><p><strong>安装</strong></p>
<p><code>nsenter</code> 工具在 util-linux 包2.23版本后包含。 如果系统中 util-linux 包没有该命令，可以按照下面的方法从源码安装。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>cd /tmp; curl <span class="symbol">https:</span>/<span class="regexp">/www.kernel.org/pub</span><span class="regexp">/linux/utils</span><span class="regexp">/util-linux/v</span>2.<span class="number">24</span>/util-linux-<span class="number">2.24</span>.tar.gz | tar -zxf-; cd util-linux-<span class="number">2.24</span>;</div><div class="line"><span class="variable">$ </span>./configure --without-ncurses</div><div class="line"><span class="variable">$ </span>make nsenter &amp;&amp; sudo cp nsenter /usr/local/bin</div></pre></td></tr></table></figure>
<p><strong>使用</strong></p>
<p>为了连接到容器，你还需要找到容器的第一个进程的 PID，可以通过下面的命令获取。</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PID=$(docker inspect --<span class="keyword">format</span> <span class="string">"&#123;&#123; .State.Pid &#125;&#125;"</span> &lt;<span class="keyword">container</span>&gt;)</div></pre></td></tr></table></figure>
<p>通过这个 PID，就可以连接到这个容器：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">nsenter</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">target</span> <span class="comment">$PID</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mount</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">uts</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ipc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">net</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">pid</span></div></pre></td></tr></table></figure>
<p><strong>实例</strong></p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">16</span>f568766019        ubuntu              <span class="string">"/bin/bash"</span>         <span class="number">34</span> minutes ago      Up <span class="number">28</span> minutes                           elegant_mcclintock</div><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker inspect --format <span class="string">"&#123;&#123; .State.Pid &#125;&#125;"</span> 16f568766019</span></div><div class="line"><span class="number">19803</span></div><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># nsenter --target 19803 --mount --uts --ipc --net --pid</span></div><div class="line">root<span class="symbol">@16f568766019</span>:/<span class="meta">#</span></div></pre></td></tr></table></figure>
<h3 id="bashrc-docker-脚本"><a href="#bashrc-docker-脚本" class="headerlink" title=".bashrc_docker 脚本"></a>.bashrc_docker 脚本</h3><p>其实就是从docker inspect中取相关的数据，具体的脚本代码在最后贴出。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget -P ~ <span class="symbol">https:</span>/<span class="regexp">/github.com/yeasy</span><span class="regexp">/docker_practice/raw</span><span class="regexp">/master/</span>_local/.bashrc_docker;</div><div class="line">$ echo <span class="string">"[ -f ~/.bashrc_docker ] &amp;&amp; . ~/.bashrc_docker"</span> <span class="meta">&gt;&gt; </span>~<span class="regexp">/.bashrc; source ~/</span>.bashrc</div></pre></td></tr></table></figure>
<p>这个文件中定义了很多方便使用 Docker 的命令，例如 docker-pid 可以获取某个容器的 PID；而 docker-enter 可以进入容器或直接在容器内执行命令。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]# docker-pid <span class="number">16</span>f568766019</div><div class="line"><span class="number">19803</span>   </div><div class="line">[root@centos7 ~]# docker-ip <span class="number">16</span>f568766019</div><div class="line"><span class="number">172.17</span><span class="number">.0</span><span class="number">.8</span></div><div class="line">[root@centos7 ~]# docker-enter <span class="number">16</span>f568766019 uname</div><div class="line">Linux</div></pre></td></tr></table></figure>
<p><strong>脚本内容：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Some useful commands to use docker.</span></div><div class="line"><span class="comment"># Author: yeasy@github</span></div><div class="line"><span class="comment"># Created:2014-09-25</span></div><div class="line"></div><div class="line"><span class="built_in">alias</span> docker-pid=<span class="string">"sudo docker inspect --format '&#123;&#123;.State.Pid&#125;&#125;'"</span></div><div class="line"><span class="built_in">alias</span> docker-ip=<span class="string">"sudo docker inspect --format '&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;'"</span></div><div class="line"></div><div class="line"><span class="comment">#the implementation refs from https://github.com/jpetazzo/nsenter/blob/master/docker-enter</span></div><div class="line"><span class="keyword">function</span> docker-<span class="function"><span class="title">enter</span></span>() &#123;</div><div class="line">    <span class="comment">#if [ -e $(dirname "$0")/nsenter ]; then</span></div><div class="line">    <span class="comment">#Change for centos bash running</span></div><div class="line">    <span class="keyword">if</span> [ <span class="_">-e</span> $(dirname <span class="string">'$0'</span>)/nsenter ]; <span class="keyword">then</span></div><div class="line">        <span class="comment"># with boot2docker, nsenter is not in the PATH but it is in the same folder</span></div><div class="line">        NSENTER=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)/nsenter</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment"># if nsenter has already been installed with path notified, here will be clarified</span></div><div class="line">        NSENTER=$(<span class="built_in">which</span> nsenter)</div><div class="line">        <span class="comment">#NSENTER=nsenter</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    [ -z <span class="string">"<span class="variable">$NSENTER</span>"</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"WARN Cannot find nsenter"</span> &amp;&amp; <span class="built_in">return</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"Usage: `basename "</span><span class="variable">$0</span><span class="string">"` CONTAINER [COMMAND [ARG]...]"</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">""</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"Enters the Docker CONTAINER and executes the specified COMMAND."</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"If COMMAND is not specified, runs an interactive shell in CONTAINER."</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        PID=$(sudo docker inspect --format <span class="string">"&#123;&#123;.State.Pid&#125;&#125;"</span> <span class="string">"<span class="variable">$1</span>"</span>)</div><div class="line">        <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$PID</span>"</span> ]; <span class="keyword">then</span></div><div class="line">            <span class="built_in">echo</span> <span class="string">"WARN Cannot find the given container"</span></div><div class="line">            <span class="built_in">return</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="built_in">shift</span></div><div class="line"></div><div class="line">        OPTS=<span class="string">"--target <span class="variable">$PID</span> --mount --uts --ipc --net --pid"</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></div><div class="line">            <span class="comment"># No command given.</span></div><div class="line">            <span class="comment"># Use su to clear all host environment variables except for TERM,</span></div><div class="line">            <span class="comment"># initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,</span></div><div class="line">            <span class="comment"># and start a login shell.</span></div><div class="line">            <span class="comment">#sudo $NSENTER "$OPTS" su - root</span></div><div class="line">            sudo <span class="variable">$NSENTER</span> --target <span class="variable">$PID</span> --mount --uts --ipc --net --pid su - root</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="comment"># Use env to clear all host environment variables.</span></div><div class="line">            sudo <span class="variable">$NSENTER</span> --target <span class="variable">$PID</span> --mount --uts --ipc --net --pid env -i <span class="variable">$@</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible的Ad-Hoc]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E7%9A%84Ad-Hoc/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我们经常会通过命令行形式来使用 ansible， ansible 会自带很多模块.</p>
</blockquote>
<p>查看 ansible 自带模块和模块介绍的方法如下：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>ansible-doc -l		<span class="comment">#列出所有模块</span></div><div class="line"><span class="variable">$ </span>ansible-doc shell		<span class="comment">#查看 shell 模块的详细信息</span></div></pre></td></tr></table></figure>
<h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 文件的变化是通过 md5值来判断的。</span></div><div class="line">$ ansible sate -m <span class="keyword">copy</span><span class="bash"> <span class="_">-a</span> <span class="string">"src=./mysql_back.py dest=/mnt/ owner=root group=root mode=644 backup=yes"</span></span></div><div class="line"><span class="number">120.26</span>.<span class="number">45.230</span> | SUCCESS =&gt; &#123;</div><div class="line">    <span class="string">"changed"</span>: true,</div><div class="line">    <span class="string">"checksum"</span>: <span class="string">"1c332293fa02633b42ffcd10faddafc2d44083c0"</span>,</div><div class="line">    <span class="string">"dest"</span>: <span class="string">"/mnt/mysql_back.py"</span>,</div><div class="line">    <span class="string">"gid"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="string">"md5sum"</span>: <span class="string">"46959dcafe35d9b727075237fbb8a3a0"</span>,</div><div class="line">    <span class="string">"mode"</span>: <span class="string">"0644"</span>,</div><div class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="string">"size"</span>: <span class="number">1589</span>,</div><div class="line">    <span class="string">"src"</span>: <span class="string">"/root/.ansible/tmp/ansible-tmp-1465968433.17-146914892008272/source"</span>,</div><div class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>,</div><div class="line">    <span class="string">"uid"</span>: <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="包和服务管理"><a href="#包和服务管理" class="headerlink" title="包和服务管理"></a>包和服务管理</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 nginx 服务</span></div><div class="line">$ ansible sate -m apt -a <span class="string">"name=nginx state=latest"</span></div><div class="line"></div><div class="line"><span class="comment"># 服务的启动与关闭</span></div><div class="line">$ ansible sate -m service -a <span class="string">"name=nginx state=started"</span></div><div class="line"><span class="meta">120.26.45.230 | SUCCESS =&gt;</span> &#123;</div><div class="line">    <span class="string">"changed"</span>: false,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"nginx"</span>,</div><div class="line">    <span class="string">"state"</span>: <span class="string">"started"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">$ ansible sate -m service -a <span class="string">"name=nginx state=stopped"</span></div><div class="line"><span class="meta">120.26.45.230 | SUCCESS =&gt;</span> &#123;</div><div class="line">    <span class="string">"changed"</span>: true,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"nginx"</span>,</div><div class="line">    <span class="string">"state"</span>: <span class="string">"stopped"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先将要设置的账户密码进行加密</span></div><div class="line"><span class="variable">$ </span>echo sate | openssl passwd -<span class="number">1</span> -stdin</div><div class="line"><span class="variable">$1</span><span class="variable">$xZGhHuDC</span><span class="variable">$7yx6FmawND4yEKLkr35o20</span></div><div class="line"></div><div class="line"><span class="comment"># 通过 ansible 创建新的用户</span></div><div class="line"><span class="variable">$ </span>ansible sate -m user -a <span class="string">'name=sate password="$1$xZGhHuDC$7yx6FmawND4yEKLkr35o20"'</span></div><div class="line"><span class="number">120.26</span>.<span class="number">45.230</span> | SUCCESS =&gt; &#123;</div><div class="line">    <span class="string">"changed"</span>: <span class="keyword">true</span>,</div><div class="line">    <span class="string">"comment"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"createhome"</span>: <span class="keyword">true</span>,</div><div class="line">    <span class="string">"group"</span>: <span class="number">1000</span>,</div><div class="line">    <span class="string">"home"</span>: <span class="string">"/home/sate"</span>,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"sate"</span>,</div><div class="line">    <span class="string">"password"</span>: <span class="string">"NOT_LOGGING_PASSWORD"</span>,</div><div class="line">    <span class="string">"shell"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"state"</span>: <span class="string">"present"</span>,</div><div class="line">    <span class="string">"stderr"</span>: <span class="string">"useradd: warning: the home directory already exists.\nNot copying any file from skel directory into it.\n"</span>,</div><div class="line">    <span class="string">"system"</span>: <span class="keyword">false</span>,</div><div class="line">    <span class="string">"uid"</span>: <span class="number">1000</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 测试</span></div><div class="line"><span class="variable">$ </span>ssh sate<span class="variable">@120</span>.<span class="number">26.45</span>.<span class="number">230</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible的facts]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E7%9A%84facts/</url>
      <content type="html"><![CDATA[<p>facts 组件是 ansible 用于采集被管理机器信息的一个功能，我们可以使用<code>setup</code>模块查询机器所有的 facts 信息，也可以使用<code>filter</code>来查询指定信息。输出的是 JSON 格式。</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">root@sate-z:~# ansible sate -m setup</div><div class="line"><span class="number">10.117</span><span class="number">.214</span><span class="number">.178</span> | SUCCESS =&gt; &#123;</div><div class="line">    <span class="string">"ansible_facts"</span>: &#123;</div><div class="line">        <span class="string">"ansible_all_ipv4_addresses"</span>: [</div><div class="line">            <span class="string">"10.117.214.178"</span>,</div><div class="line">            <span class="string">"120.26.45.230"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"ansible_all_ipv6_addresses"</span>: [],</div><div class="line">        <span class="string">"ansible_architecture"</span>: <span class="string">"x86_64"</span>,</div><div class="line">        <span class="string">"ansible_bios_date"</span>: <span class="string">"12/16/2014"</span>,</div><div class="line">        <span class="string">"ansible_bios_version"</span>: <span class="string">"4.0.1"</span>,</div><div class="line">        <span class="string">"ansible_cmdline"</span>: &#123;</div><div class="line">            <span class="string">"BOOT_IMAGE"</span>: <span class="string">"/boot/vmlinuz-3.13.0-65-generic"</span>,</div><div class="line">            <span class="string">"quiet"</span>: true,</div><div class="line">            <span class="string">"ro"</span>: true,</div><div class="line">            <span class="string">"root"</span>: <span class="string">"UUID=af414ad8-9936-46cd-b074-528854656fcd"</span>,</div><div class="line">            <span class="string">"splash"</span>: true</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"ansible_date_time"</span>: &#123;</div><div class="line">            <span class="string">"date"</span>: <span class="string">"2016-06-16"</span>,</div><div class="line">            <span class="string">"day"</span>: <span class="string">"16"</span>,</div><div class="line">            <span class="string">"epoch"</span>: <span class="string">"1466049222"</span>,</div><div class="line">            <span class="string">"hour"</span>: <span class="string">"11"</span>,</div><div class="line">            <span class="string">"iso8601"</span>: <span class="string">"2016-06-16T03:53:42Z"</span>,</div><div class="line">            <span class="string">"iso8601_basic"</span>: <span class="string">"20160616T115342839628"</span>,</div><div class="line">            <span class="string">"iso8601_basic_short"</span>: <span class="string">"20160616T115342"</span>,</div><div class="line">            <span class="string">"iso8601_micro"</span>: <span class="string">"2016-06-16T03:53:42.839785Z"</span>,</div><div class="line">            <span class="string">"minute"</span>: <span class="string">"53"</span>,</div><div class="line">            <span class="string">"month"</span>: <span class="string">"06"</span>,</div><div class="line">            <span class="string">"second"</span>: <span class="string">"42"</span>,</div><div class="line">            <span class="string">"time"</span>: <span class="string">"11:53:42"</span>,</div><div class="line">            <span class="string">"tz"</span>: <span class="string">"CST"</span>,</div><div class="line">            <span class="string">"tz_offset"</span>: <span class="string">"+0800"</span>,</div><div class="line">            <span class="string">"weekday"</span>: <span class="string">"Thursday"</span>,</div><div class="line">            <span class="string">"weekday_number"</span>: <span class="string">"4"</span>,</div><div class="line">            <span class="string">"weeknumber"</span>: <span class="string">"24"</span>,</div><div class="line">            <span class="string">"year"</span>: <span class="string">"2016"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"ansible_default_ipv4"</span>: &#123;</div><div class="line">            <span class="string">"address"</span>: <span class="string">"120.26.45.230"</span>,</div><div class="line">            .....</div><div class="line">            .....</div><div class="line">            .....(省略 N 行)</div></pre></td></tr></table></figure>
<p>使用<code>filter</code>查看指定信息：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">root@sate-<span class="symbol">z:</span>~<span class="comment"># ansible sate -m setup -a "filter=ansible_date_time"</span></div><div class="line"><span class="meta">10.117.214.178 | SUCCESS =&gt;</span> &#123;</div><div class="line">    <span class="string">"ansible_facts"</span>: &#123;</div><div class="line">        <span class="string">"ansible_date_time"</span>: &#123;</div><div class="line">            <span class="string">"date"</span>: <span class="string">"2016-06-16"</span>,</div><div class="line">            <span class="string">"day"</span>: <span class="string">"16"</span>,</div><div class="line">            <span class="string">"epoch"</span>: <span class="string">"1466049323"</span>,</div><div class="line">            <span class="string">"hour"</span>: <span class="string">"11"</span>,</div><div class="line">            <span class="string">"iso8601"</span>: <span class="string">"2016-06-16T03:55:23Z"</span>,</div><div class="line">            <span class="string">"iso8601_basic"</span>: <span class="string">"20160616T115523414703"</span>,</div><div class="line">            <span class="string">"iso8601_basic_short"</span>: <span class="string">"20160616T115523"</span>,</div><div class="line">            <span class="string">"iso8601_micro"</span>: <span class="string">"2016-06-16T03:55:23.414901Z"</span>,</div><div class="line">            <span class="string">"minute"</span>: <span class="string">"55"</span>,</div><div class="line">            <span class="string">"month"</span>: <span class="string">"06"</span>,</div><div class="line">            <span class="string">"second"</span>: <span class="string">"23"</span>,</div><div class="line">            <span class="string">"time"</span>: <span class="string">"11:55:23"</span>,</div><div class="line">            <span class="string">"tz"</span>: <span class="string">"CST"</span>,</div><div class="line">            <span class="string">"tz_offset"</span>: <span class="string">"+0800"</span>,</div><div class="line">            <span class="string">"weekday"</span>: <span class="string">"Thursday"</span>,</div><div class="line">            <span class="string">"weekday_number"</span>: <span class="string">"4"</span>,</div><div class="line">            <span class="string">"weeknumber"</span>: <span class="string">"24"</span>,</div><div class="line">            <span class="string">"year"</span>: <span class="string">"2016"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"changed"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>facts 默认收集了很多的设备基础信息，这些信息可以在做配置管理的时候引用。<strong>可以直接把 facts 信息直接当做 playbook 变量信息引用</strong>。比如后边的 nginx的 playbook 的练习中，<code>nginx.conf.j2</code>这个模板配置文件中的<code>worker_processes</code>这个参数的取值就是用该方法获得的。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat nginx.conf.j2| head -n <span class="number">3</span></div><div class="line"><span class="keyword">user</span> <span class="title">www-data</span>;</div><div class="line">worker_processes &#123;&#123; ansible_processor_cores &#125;&#125;;</div><div class="line">pid /run/nginx.pid;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible的Inventory]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E7%9A%84Inventory/</url>
      <content type="html"><![CDATA[<p><strong>单个Inventory文件的使用：</strong></p>
<p>我们用 ansible 来管理的机器信息都放在 <code>Inventory</code> 文件中，默认的 <code>Inventory</code> 是一个静态的 INI 格式的文件 <code>/etc/ansible/hosts</code>。 我们可以通过 <code>ANSIBLE_HOSTS</code> 环境变量来制定该文件，或者在运行 ansible 和 ansible-playbook 的时候用<code>-i</code>参数临时设置。</p>
<p>常用的定义主机和主机组的方式：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 定义了两个主机，使用 Inventory 内置变量定义了 SSH 登录时的密码</span></div><div class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>	ansible_ssh_pass=<span class="string">'123456'</span></div><div class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>	ansible_ssh_pass=<span class="string">'123456'</span></div><div class="line"></div><div class="line"><span class="meta"># 定义了一个 sate 组，并且组中 IP 为192.168.0.101-192.168.0.103 三台机器</span></div><div class="line">[sate]</div><div class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span>[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="meta"># 对上边的 sate 组使用 Inventory 内置变量定义了 SSH 登录密码</span></div><div class="line">[sate:vars]</div><div class="line">ansible_ssh_pass=<span class="string">'123456'</span></div><div class="line"></div><div class="line"><span class="meta"># 定义了一个 ansible 组，这个组下面包含 docker 组。</span></div><div class="line">[ansible:children]</div><div class="line">sate</div></pre></td></tr></table></figure>
<hr>
<p><strong>多个Inventory文件：</strong></p>
<p>Ansible 支持多个 Inventory 文件，我们可以修改<code>ansible.cfg</code>文件，如下，或者使用<code>ANSIBLE_HOSTS</code>环境变量定义。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 修改 ansible.cfg 中 inventory 的值</span></div><div class="line"><span class="attr">inventory</span>      = /etc/inventory/</div></pre></td></tr></table></figure>
<p>这样我们可以在<code>/etc/inventory/</code>目录下放入多个 Inventory 文件</p>
<hr>
<p><strong>动态Inventory文件：</strong></p>
<p>可能在实际情况下会有大量的主机列表，手动维护比较困难。<strong>动态 Inventory 就是 Ansible 所有的 Inventory 文件里边的主机列表和变量信息都支持从外部拉取,比如 CMDB 系统或者 zabbix 系统。</strong><br>配置的时候我们需要将<code>ansible.cfg</code>文件中的<code>inventory</code>的定义值改成一个执行脚本。</p>
<p>执行脚本没有编程语言上种类的限制，但是脚本必须支持两个参数，如下：</p>
<ul>
<li><p><code>--list</code>或者<code>-l</code>,这个参数运行后会显示所有的主机以及主机组的信息</p>
</li>
<li><p><code>--host</code>或者<code>-H</code>，这个参数后面需要指定一个 host，运行结果会返回这台主机的所有信息（包括认证信息、主机变量等），也是 JSON 格式。  </p>
</li>
</ul>
<h3 id="常用的-Inventory-内置参数"><a href="#常用的-Inventory-内置参数" class="headerlink" title="常用的 Inventory 内置参数"></a>常用的 Inventory 内置参数</h3><pre><code>参数        |        解释          |    例子 
</code></pre><p>—————- |—————–|———————————–|<br>ansible_ssh_host| 定义 host ssh 地址  |ansible_ssh_host=192.168.0.1 |<br>ansible_ssh_port| 定义 hosts ssh 端口| ~ =5000<br>ansible_ssh_user| 定义 ssh 认证用户    | ~ =sate<br>ansible_ssh_pass| 定义 ssh 认证密码  | ~ =’password’<br>ansible_sudo         | 定义 sudo 用户 | ~ =sate<br>ansible_sudo_pass| 定义 sudo 密码| ~ =’password’<br>ansible_sudo_exe|定义 sudo  路径| ~ =/usr/bin/sudo<br>ansible_connection|定义 hosts 连接方式| ~ =local<br>ansible_ssh_private_key_file|定义 hosts 私钥|~ =/root/key<br>ansible_shell_type|定义 shell 类型|~ =zsh<br>ansible_python<em>interpreter| 定义 执行 python 路径|~ =/usr/bin/python2.7<br>ansible\</em>*_interpreter|定义其他语言解析器路径|~ =/usr/bin/ruby</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible的playbook]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E7%9A%84playbook/</url>
      <content type="html"><![CDATA[<p>案例： 部署 nginx 服务。</p>
<p><strong>Inventory hosts 文件</strong></p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">[sate]</span></div><div class="line"><span class="number">192.168.0.1</span></div><div class="line"><span class="string">[sate:vars]</span></div><div class="line">ansible_python_interpreter=/usr/bin/python2.<span class="number">7</span></div></pre></td></tr></table></figure>
<p><strong>nginx.conf.j2 模板文件</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat nginx.conf.j2| head -n 3</div><div class="line">user www-data;</div><div class="line">worker_processes &#123;&#123; ansible_processor_cores &#125;&#125;;</div><div class="line">pid /run/nginx.pid;</div></pre></td></tr></table></figure>
<p><strong>部署nignx的 playbook</strong></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">- hosts:</span> sate</div><div class="line"><span class="attr">  tasks:</span></div><div class="line"><span class="attr">    - name:</span> install nginx</div><div class="line"><span class="attr">      apt:</span> name=nginx state=present</div><div class="line"></div><div class="line"><span class="attr">    - name:</span> copy nginx.conf</div><div class="line"><span class="attr">      template:</span> src=./nginx.conf.j2 dest=/etc/nginx/nginx.conf owner=root group=root mode=<span class="number">0644</span> validate=<span class="string">'nginx -t -c %s'</span></div><div class="line"><span class="attr">      notify:</span></div><div class="line"><span class="bullet">        -</span> restart nginx</div><div class="line"></div><div class="line"><span class="attr">  handlers:</span></div><div class="line"><span class="bullet">     -</span> name : restart nginx</div><div class="line"><span class="attr">       service:</span> name=nginx state=restarted</div></pre></td></tr></table></figure>
<p><strong>检查语法</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ansible-playbook nginx.yaml --syntax-check</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible简单使用]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Ansible是新出现的运维工具是基于Python研发的，糅合了众多老牌运维工具的优点实现了批量操作系统配置、批量程序的部署、批量运行命令等功能。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>实验环境：</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　系统：<span class="selector-tag">centos</span> 6<span class="selector-class">.5</span></div><div class="line">　　机器：<span class="selector-tag">node1</span>（192<span class="selector-class">.168</span><span class="selector-class">.174</span><span class="selector-class">.128</span>），<span class="selector-tag">node2</span>（192<span class="selector-class">.168</span><span class="selector-class">.174</span><span class="selector-class">.129</span>）</div></pre></td></tr></table></figure>
<p><strong>安装：</strong></p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># yum -y install ansible</span></div></pre></td></tr></table></figure>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>定义Host Inventory ：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@node1 ~]<span class="comment"># cat /etc/ansible/hosts</span></div><div class="line">[<span class="keyword">node</span><span class="title">]</span></div><div class="line">192.<span class="number">168.174</span>.<span class="number">129</span></div></pre></td></tr></table></figure>
<p>操作实例：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@node1 ~]<span class="comment"># ansible -i /etc/ansible/hosts nodetest  -m command -a 'date'</span></div><div class="line"><span class="meta">192.168.174.129 | success | rc=0 &gt;</span>&gt;</div><div class="line">Mon Oct <span class="number">12</span> <span class="number">13</span><span class="symbol">:</span><span class="number">23</span><span class="symbol">:</span><span class="number">56</span> CST <span class="number">2015</span></div><div class="line">注：-i 使用默认hosts，该参数可以省略</div><div class="line">该命令执行成功的前提是先通过ssh-copy-id同步ssh key认证。如果没有，则需要加-k参数（需要安装sshpass）。</div></pre></td></tr></table></figure>
<p>命令常用参数</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">m 导入模块</span></div><div class="line">-<span class="ruby">i 指定host</span></div><div class="line">-<span class="ruby">u 指定远程用户</span></div><div class="line">-<span class="ruby">s 使用sudo</span></div><div class="line">-<span class="ruby">k 询问密码</span></div><div class="line">例：</div><div class="line">$ ansible -i /xx/hosts wx-test  -m ping  -u zyadmin -s -k</div><div class="line">SSH password:</div><div class="line">xxx.xxx.xxx.x | success &gt;&gt; &#123;</div><div class="line">"changed": false,</div><div class="line">"ping": "pong"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果客户端服务器的端口和用户名不为默认的22和root，也可以在hosts这样写：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[group name]</div><div class="line">wx-sate1 ansible_ssh_host=xxx<span class="selector-class">.xx</span><span class="selector-class">.xxx</span><span class="selector-class">.x</span> ansible_ssh_port=<span class="number">3544</span> ansible_ssh_user=sate</div><div class="line">wx-sate2 ansible_ssh_host=xx<span class="selector-class">.xxx</span><span class="selector-class">.xx</span><span class="selector-class">.xx</span> ansible_ssh_port=<span class="number">4002</span> ansible_ssh_user=zyadmin</div><div class="line">例：</div><div class="line">$ ansible -<span class="selector-tag">i</span> /xx/hosts wx-sate1 -m ping</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible安装]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>分两大类，源码安装和用包管理安装</p>
<h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>一、 从GitHub 源码库安装</p>
<p>1、提取 ansible 源码</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github<span class="selector-class">.com</span>:ansible/ansible<span class="selector-class">.git</span> --recursive</div><div class="line">$ cd ./ansible</div><div class="line">$ source ./hacking/env-setup -<span class="selector-tag">q</span> 		#-<span class="selector-tag">q</span> 参数可以减少安装过程中的告警/错误信息输出</div></pre></td></tr></table></figure>
<p>2、安装对应python版本的pip</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo easy_install pip</div></pre></td></tr></table></figure>
<p>3、安装ansible 控制主机需要的Python模板</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip <span class="keyword">install </span>paramiko PyYAML <span class="keyword">Jinja2 </span>httplib2 six</div></pre></td></tr></table></figure>
<p>4、当更新Ansible 版本时，不但要更新git源码树，还要更新git中指向ansible 自身的模块，称为 submodules</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">git</span> <span class="comment">pull</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rebase</span></div><div class="line"><span class="comment">$</span> <span class="comment">git</span> <span class="comment">submodule</span> <span class="comment">update</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">init</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">recursive</span></div></pre></td></tr></table></figure>
<p>5、一旦运行env-setup 脚本，就意味着ansible从源码中运行起来了。</p>
<p>二、Tar 包安装方式</p>
<p>可以在Http://release.ansible.com/ansible 中下载 Tar 包，安装过程和上边源码安装方式一样。</p>
<p>三、制作RPM 包安装</p>
<p>在 github 中提取代码或者直接下载 tar 包，使用 <code>make rpm</code> 命令创建 RPM 软件包。不过确保已经安装了 rpm-bulid、make、python2-devel 组件。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github<span class="selector-class">.com</span>:ansible/ansible<span class="selector-class">.git</span></div><div class="line">$ cd ./ansible</div><div class="line">$ make rpm</div><div class="line">$ sudo rpm -Uvh ~ /rpmbulid/ansible-*<span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></div></pre></td></tr></table></figure>
<h3 id="用包管理工具安装（方便）"><a href="#用包管理工具安装（方便）" class="headerlink" title="用包管理工具安装（方便）"></a>用包管理工具安装（方便）</h3><p>一、yum 方式安装</p>
<p>对于 RHEL、CentOS 的官方 yum 源中没有 ansible 包，或者比较老旧,所以先安装支持第三方的 yum 仓库组件，最常用的有 EPEL、Remi、RPMForge 等。</p>
<p>下面安装 EPEL 作为部署 ansible 的默认 yum 源。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># RHEL(CentOS)5</span></div><div class="line">rpm -Uvh http:<span class="regexp">//mi</span>rrors.zju.edu.cn<span class="regexp">/epel/</span><span class="number">5</span><span class="regexp">/i386/</span>epel-release-<span class="number">5</span>-<span class="number">4</span>.noarch.rpm</div><div class="line">rpm -Uvh http:<span class="regexp">//mi</span>rrors.zju.edu.cn<span class="regexp">/epel/</span><span class="number">5</span><span class="regexp">/x86_64/</span>epel-release-<span class="number">5</span>-<span class="number">4</span>.noarch.rpm</div><div class="line"></div><div class="line"><span class="comment"># RHEL(CentOS)6</span></div><div class="line">rpm -Uvh http:<span class="regexp">//mi</span>rrors.zju.edu.cn<span class="regexp">/epel/</span><span class="number">6</span><span class="regexp">/i386/</span>epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</div><div class="line">rpm -Uvh http:<span class="regexp">//mi</span>rrors.zju.edu.cn<span class="regexp">/epel/</span><span class="number">6</span><span class="regexp">/x86_64/</span>epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</div><div class="line"></div><div class="line"><span class="comment"># RHEL(CentOS)7</span></div><div class="line">rpm -Uvh http:<span class="regexp">//mi</span>rrors.zju.edu.cn<span class="regexp">/epel/</span><span class="number">7</span><span class="regexp">/x86_64/</span>e<span class="regexp">/epel-release-7-6.noarch.rpm</span></div></pre></td></tr></table></figure>
<p>准备好 yum 源后，直接 yum 安装</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum <span class="keyword">install</span> ansible</div></pre></td></tr></table></figure>
<p>二、Apt（Ubuntu）方式安装</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ apt-<span class="built_in">get</span> install software-properties-common</div><div class="line">$ apt-<span class="built_in">add</span>-repository <span class="keyword">pp</span><span class="variable">a:ansible</span>/ansible</div><div class="line">$ apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">$ apt-<span class="built_in">get</span> install ansible</div></pre></td></tr></table></figure>
<p>三、Homebrew（Mac OSX）安装方式</p>
<p>在 MAC 系统确保安装 Homebrew，直接使用下面命令安装：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>update</div><div class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>Ansible</div></pre></td></tr></table></figure>
<p>四、pip 方式安装</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo easy_install pip</div><div class="line"><span class="variable">$ </span>sudo pip install ansible</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux客户端连接(PPTP)VPN]]></title>
      <url>http://yoursite.com/2016/12/15/PPTP%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><blockquote>
<p>Ubuntu 12.04.4<br>pptp version 1.7.2 </p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install pptp-linux</div></pre></td></tr></table></figure>
<h4 id="创建连接帐号"><a href="#创建连接帐号" class="headerlink" title="创建连接帐号"></a>创建连接帐号</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">sudo</span> <span class="comment">pptpsetup</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">create</span> <span class="comment">myvpn</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">server</span> <span class="comment">xxx</span><span class="string">.</span><span class="comment">xxx</span><span class="string">.</span><span class="comment">xxx</span><span class="string">.</span><span class="comment">xxx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">username</span> <span class="comment">xxx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">password</span> <span class="comment">xxxxx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">encrypt</span></div></pre></td></tr></table></figure>
<h4 id="连接VPN"><a href="#连接VPN" class="headerlink" title="连接VPN"></a>连接VPN</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#打开vpn</span></div><div class="line">pon myvpn</div><div class="line"><span class="meta">#查看当前路由规则</span></div><div class="line">route</div><div class="line"><span class="meta">#删除老的default</span></div><div class="line">route del <span class="keyword">default</span></div><div class="line"><span class="meta">#创建新的路由规则</span></div><div class="line">route add <span class="keyword">default</span> gw <span class="number">192.168</span><span class="number">.250</span><span class="number">.1</span></div></pre></td></tr></table></figure>
<p><code>pon myvpn</code>成功时会生成ppp0：<br><img src="http://7xkm8w.com1.z0.glb.clouddn.com/ppp0.png" alt=""></p>
<h4 id="关闭VPN"><a href="#关闭VPN" class="headerlink" title="关闭VPN"></a>关闭VPN</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#关闭vpn</span></div><div class="line">poff myvpn</div><div class="line"><span class="meta">#查看当前路由规则</span></div><div class="line">route</div><div class="line"><span class="meta">#删除刚加的default规则（关闭vpn时，刚加的默认路由已经删除，此步可忽略）</span></div><div class="line">route del <span class="keyword">default</span></div><div class="line"><span class="meta">#还原以前的路由规则</span></div><div class="line">route add <span class="keyword">default</span> gw <span class="number">121.197</span><span class="number">.7</span><span class="number">.254</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tcpdump命令使用]]></title>
      <url>http://yoursite.com/2016/12/15/Tcpdump%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>tcpdump命令是一款sniffer工具，它可以打印所有经过网络接口的数据包的头信息，也可以使用-w选项将数据包保存到文件中，方便以后分析。</p>
</blockquote>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">tcpdump</span><span class="params">(选项)</span></span></div></pre></td></tr></table></figure>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">a：尝试将网络和广播地址转换成名称；</span></div><div class="line">-<span class="ruby">c&lt;数据包数目&gt;：收到指定的数据包数目后，就停止进行倾倒操作；</span></div><div class="line">-<span class="ruby">d：把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；</span></div><div class="line">-<span class="ruby">dd：把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；</span></div><div class="line">-<span class="ruby">ddd：把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；</span></div><div class="line">-<span class="ruby">e：在每列倾倒资料上显示连接层级的文件头；</span></div><div class="line">-<span class="ruby">f：用数字显示网际网络地址；</span></div><div class="line">-<span class="ruby">F&lt;表达文件&gt;：指定内含表达方式的文件；</span></div><div class="line">-<span class="ruby">i&lt;网络界面&gt;：使用指定的网络截面送出数据包；</span></div><div class="line">-<span class="ruby">l：使用标准输出列的缓冲区；</span></div><div class="line">-<span class="ruby">n：不把主机的网络地址转换成名字；</span></div><div class="line">-<span class="ruby">N：不列出域名；</span></div><div class="line">-<span class="ruby">O：不将数据包编码最佳化；</span></div><div class="line">-<span class="ruby">p：不让网络界面进入混杂模式；</span></div><div class="line">-<span class="ruby">q ：快速输出，仅列出少数的传输协议信息；</span></div><div class="line">-<span class="ruby">r&lt;数据包文件&gt;：从指定的文件读取数据包数据；</span></div><div class="line">-<span class="ruby">s&lt;数据包大小&gt;：设置每个数据包的大小；</span></div><div class="line">-<span class="ruby">S：用绝对而非相对数值列出TCP关联数；</span></div><div class="line">-<span class="ruby">t：在每列倾倒资料上不显示时间戳记；</span></div><div class="line">-<span class="ruby">tt： 在每列倾倒资料上显示未经格式化的时间戳记；</span></div><div class="line">-<span class="ruby">T&lt;数据包类型&gt;：强制将表达方式所指定的数据包转译成设置的数据包类型；</span></div><div class="line">-<span class="ruby">v：详细显示指令执行过程；</span></div><div class="line">-<span class="ruby">vv：更详细显示指令执行过程；</span></div><div class="line">-<span class="ruby">x：用十六进制字码列出数据包资料；</span></div><div class="line">-<span class="ruby">w&lt;数据包文件&gt;：把数据包数据写入指定的文件。</span></div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>直接启动tcpdump将监视第一个网络接口上所有流过的数据包</strong></p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">tcpdump</span></div></pre></td></tr></table></figure>
<p><strong>监视指定网络接口的数据包</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump -<span class="selector-tag">i</span> eth1</div></pre></td></tr></table></figure>
<p>如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，下面的例子都没有指定网络接口。</p>
<p><strong>监视指定主机的数据包</strong></p>
<ul>
<li>打印所有进入或离开sundown的数据包。</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">tcpdump host sundown</span></div></pre></td></tr></table></figure>
<ul>
<li>也可以指定ip,例如截获所有210.27.48.1 的主机收到的和发出的所有的数据包</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tcpdump</span> <span class="selector-tag">host</span> 210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure>
<ul>
<li>打印helios 与 hot 或者与 ace 之间通信的数据包</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tcpdump</span> <span class="selector-tag">host</span> <span class="selector-tag">helios</span> <span class="selector-tag">and</span> \( <span class="selector-tag">hot</span> <span class="selector-tag">or</span> <span class="selector-tag">ace</span> \)</div><div class="line">``` </div><div class="line"><span class="selector-tag">-</span> 截获主机210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.1</span> 和主机210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.2</span> 或210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.3</span>的通信</div></pre></td></tr></table></figure>
<p>tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 )<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 打印ace与任何其他主机之间通信的<span class="built_in">IP</span> 数据包, 但不包括与helios之间的数据包.</div></pre></td></tr></table></figure></p>
<p>tcpdump ip host ace and not helios<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-</span> 如果想要获取主机210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.1</span>除了和主机210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.2</span>之外所有主机通信的<span class="selector-tag">ip</span>包，使用命令：</div></pre></td></tr></table></figure></p>
<p>tcpdump ip host 210.27.48.1 and ! 210.27.48.2<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>截获主机hostname发送的所有数据</div></pre></td></tr></table></figure></p>
<p>tcpdump -i eth0 src host hostname<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">-  </span>监视所有送到主机hostname的数据包</div></pre></td></tr></table></figure></p>
<p>tcpdump -i eth0 dst host hostname<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">** 监视指定主机和端口的数据包**</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> 如果想要获取主机210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.1</span>接收或发出的<span class="selector-tag">telnet</span>包，使用如下命令</div></pre></td></tr></table></figure></p>
<p>tcpdump tcp port 23 host 210.27.48.1<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 对本机的udp <span class="number">123</span> 端口进行监视 <span class="number">123</span> 为ntp的服务端口</div></pre></td></tr></table></figure></p>
<p>tcpdump udp port 123<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">** </span>监视指定网络的数据包**</div><div class="line"></div><div class="line"><span class="bullet">- </span>打印本地主机与Berkeley网络上的主机之间的所有通信数据包</div></pre></td></tr></table></figure></p>
<p>tcpdump net ucb-ether<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> ucb-ether此处可理解为“<span class="keyword">Berkeley网络”的网络地址，此表达式最原始的含义可表达为：打印网络地址为ucb-ether的所有数据包</span></div><div class="line"></div><div class="line">- 打印所有通过网关snup的ftp数据包</div></pre></td></tr></table></figure></p>
<p>tcpdump ‘gateway snup and (port ftp or ftp-data)’<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> 注意：表达式被单引号括起来了，这可以防止shell对其中的括号进行错误解析</div><div class="line"></div><div class="line">-  打印所有源地址或目标地址是本地主机的<span class="built_in">IP</span>数据包</div></pre></td></tr></table></figure></p>
<p>tcpdump ip and not net localnet<br>```<br> 如果本地网络通过网关连到了另一网络，则另一网络并不能算作本地网络。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Strace命令分析]]></title>
      <url>http://yoursite.com/2016/12/15/Strace%E5%91%BD%E4%BB%A4%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>strace是个很好用的诊断手段，该文章整合了自己查找的比较好的网络资料和一些自己的理解，作为记录和学习。<br>借鉴网址：<a href="http://man.linuxde.net/strace" target="_blank" rel="external">http://man.linuxde.net/strace</a></p>
</blockquote>
<p><strong>Strace</strong>命令是个集诊断、调试、统计与一体的工具，我们可以使用strace对应用的系统调用和信号传递的跟踪结果来对应用进行分析，以达到解决问题或者是了解应用工作过程的目的。<br><strong>语法&amp;释义：</strong></p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">[root@node2 ~]# strace -h</div><div class="line">usage: strace [-dDffhiqrtttTvVxx] [-a column] [-e expr] ... [-o file]</div><div class="line">              [-p pid] ... [-s strsize] [-u username] [-E var=val] ...</div><div class="line">              [command [arg ...]]</div><div class="line">   or: strace -c [-D] [-e expr] ... [-O overhead] [-S sortby] [-E var=val] ...</div><div class="line">              [command [arg ...]]</div><div class="line">-<span class="ruby">c -- count time, calls, <span class="keyword">and</span> errors <span class="keyword">for</span> each syscall <span class="keyword">and</span> report summary</span></div><div class="line">        统计每一系统调用的所执行的时间,次数和出错的次数等.</div><div class="line">-<span class="ruby">f -- follow forks, -ff -- with output into separate files</span></div><div class="line">       -<span class="ruby">f 跟踪由fork产生的子进程      </span></div><div class="line">       -<span class="ruby">ff 常与-o选项一起使用，不同进程(子进程)产生的系统调用输出到filename.PI,D文件如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号.</span></div><div class="line">-<span class="ruby">F -- attempt to follow vforks, -h -- print help message</span></div><div class="line">        尝试跟踪vfork调用。在-f时，vfork不被跟踪</div><div class="line">-<span class="ruby">i -- print instruction pointer at time of syscall</span></div><div class="line">        输出系统调用的入口指针</div><div class="line">-<span class="ruby">q -- suppress messages about attaching, detaching, etc.</span></div><div class="line">        禁止输出关于脱离的消息</div><div class="line">-<span class="ruby">r -- print relative timestamp</span></div><div class="line">        打印每个系统调用的相对时间  </div><div class="line">-<span class="ruby">t -- absolute timestamp, -tt -- with usecs</span></div><div class="line">        在输出中的每一行前加上时间信息  -tt 时间确定到微秒级</div><div class="line">-<span class="ruby">T -- print time spent <span class="keyword">in</span> each syscall, -V -- print version</span></div><div class="line">        显示每个调用的花费时间</div><div class="line">-<span class="ruby">v -- verbose <span class="symbol">mode:</span> print unabbreviated argv, stat, termio[s], etc. args</span></div><div class="line">        输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出.</div><div class="line">-<span class="ruby">x -- print non-ascii strings <span class="keyword">in</span> hex, -xx -- print all strings <span class="keyword">in</span> hex</span></div><div class="line">        以十六进制形式输出非标准字符串      -xx 所有字符串以十六进制形式输出</div><div class="line">-<span class="ruby">a column -- alignment COLUMN <span class="keyword">for</span> printing syscall results (default <span class="number">40</span>)</span></div><div class="line">        设置返回值的输出位置.默认 为40.</div><div class="line">-<span class="ruby">e expr -- a qualifying <span class="symbol">expression:</span> option=[!]all <span class="keyword">or</span> option=[!]val1[,val2]...</span></div><div class="line">   options: trace, abbrev, verbose, raw, signal, read, or write</div><div class="line">   -<span class="ruby">e expr 指定一个表达式,用来控制如何跟踪.格式：[qualifier=][!]value1[,value2]... qualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如<span class="symbol">:-eopen</span>等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open 表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. 注意有些shell使用!来执行历史记录里的命令,所以要使用\\.</span></div><div class="line">   -<span class="ruby">e trace=set 只跟踪指定的系统 调用.例如<span class="symbol">:-e</span> trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all.</span></div><div class="line">   -<span class="ruby">e trace=file 只跟踪有关文件操作的系统调用. </span></div><div class="line">   -<span class="ruby">e trace=process 只跟踪有关进程控制的系统调用. </span></div><div class="line">   -<span class="ruby">e trace=network 跟踪与网络有关的所有系统调用. </span></div><div class="line">   -<span class="ruby">e strace=signal 跟踪所有与系统信号有关的 系统调用 </span></div><div class="line">   -<span class="ruby">e trace=ipc 跟踪所有与进程通讯有关的系统调用 </span></div><div class="line">   -<span class="ruby">e abbrev=set 设定strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all. </span></div><div class="line">   -<span class="ruby">e raw=set 将指定的系统调用的参数以十六进制显示. </span></div><div class="line">   -<span class="ruby">e signal=set 指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号. </span></div><div class="line">   -<span class="ruby">e read=set 输出从指定文件中读出 的数据.例如: -e read=<span class="number">3</span>,<span class="number">5</span> -e write=set 输出写入到指定文件中的数据.</span></div><div class="line"></div><div class="line">-<span class="ruby">o file -- send trace output to FILE instead of stderr</span></div><div class="line">        将strace的输出写入文件filename</div><div class="line">-<span class="ruby">O overhead -- set overhead <span class="keyword">for</span> tracing syscalls to OVERHEAD usecs</span></div><div class="line">-<span class="ruby">p pid -- trace process with process id PID, may be repeated</span></div><div class="line">        跟踪指定的进程pid.</div><div class="line">-<span class="ruby">D -- run tracer process as a detached grandchild, <span class="keyword">not</span> as parent</span></div><div class="line">-<span class="ruby">s strsize -- limit length of print strings to STRSIZE chars (default <span class="number">32</span>)</span></div><div class="line">        指定输出的字符串的最大长度.默认为32.文件名一直全部输出</div><div class="line">-<span class="ruby">S sortby -- sort syscall counts <span class="symbol">by:</span> time, calls, name, nothing (default time)</span></div><div class="line">-<span class="ruby">u username -- run command as username handling setuid <span class="keyword">and</span>/<span class="keyword">or</span> setgid</span></div><div class="line">        以username的UID和GID执行被跟踪的命令</div><div class="line">-<span class="ruby">E var=val -- put var=val <span class="keyword">in</span> the environment <span class="keyword">for</span> command</span></div><div class="line">-<span class="ruby">E var -- remove var from the environment <span class="keyword">for</span> command</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSH代理登录服务器]]></title>
      <url>http://yoursite.com/2016/12/15/SSH%E4%BB%A3%E7%90%86%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="ssh-代理登录服务器"><a href="#ssh-代理登录服务器" class="headerlink" title="ssh 代理登录服务器"></a>ssh 代理登录服务器</h2><p><strong>场景：</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">A</span>机器：10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">B</span>机器：10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">C</span>机器：10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">D</span>机器：10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.4</span></div></pre></td></tr></table></figure>
<p>现在我们在A机器上，要登陆D机器，必须要经过B、C两台跳板机，一台台的登陆太复杂，而且如果要传文件的话，那要一层层的传，我们现在要求是在A机器上直接登陆到D机器。</p>
<h3 id="一：使用ProxyCommand"><a href="#一：使用ProxyCommand" class="headerlink" title="一：使用ProxyCommand"></a>一：使用ProxyCommand</h3><p>编辑.ssh/config文件</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Host machineB</div><div class="line"> HostName <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span></div><div class="line"></div><div class="line">Host machineC</div><div class="line">  ProxyCommand ssh -q machineB nc <span class="number">10.0</span><span class="number">.0</span><span class="number">.3</span> <span class="number">22</span></div><div class="line"></div><div class="line">Host machineD</div><div class="line">  ProxyCommand ssh -q machineC nc <span class="number">10.0</span><span class="number">.0</span><span class="number">.4</span> <span class="number">22</span></div></pre></td></tr></table></figure>
<p>登陆D机器时， 直接<code>ssh machineD</code>。<br><strong>注：</strong>登陆时，可能要输入BCD机器的密码，可以事先打通key。</p>
<h3 id="二：使用ssh端口转发命令"><a href="#二：使用ssh端口转发命令" class="headerlink" title="二：使用ssh端口转发命令"></a>二：使用ssh端口转发命令</h3><p>在B机器上</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-CfgNL</span> 2222<span class="selector-pseudo">:10.0.0.3</span><span class="selector-pseudo">:222</span>  <span class="selector-tag">localhost</span></div></pre></td></tr></table></figure>
<p>在C机器上</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-CfgNL</span> 222<span class="selector-pseudo">:10.0.0.4</span><span class="selector-pseudo">:22</span>  <span class="selector-tag">localhost</span></div></pre></td></tr></table></figure>
<p>连接D机器是，连接B机器的2222端口即可：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p <span class="number">2222</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Logrotate安装配置]]></title>
      <url>http://yoursite.com/2016/12/15/Logrotate%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原文链接：<a href="https://linux.cn/article-4126-1.html" target="_blank" rel="external">https://linux.cn/article-4126-1.html</a></p>
</blockquote>
<p>logrotate是个十分有用的工具，它可以自动对日志进行截断（或轮循）、压缩以及删除旧的日志文件。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>logrotate安装非常简单。yum或apt-get安装即可。</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y <span class="keyword">install</span> logrotate</div></pre></td></tr></table></figure>
<p>配置文件目录：<code>/etc/logrotate.conf</code> ，通常不需要对它进行修改。日志文件的轮循设置在独立的配置文件中，它（们）放在<code>/etc/logrotate.d/</code>目录下</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>以下给出三个配置文件的实例：</p>
<p><strong>示例一</strong><br>创建一个log文件进行测试</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">touch /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line">head -c 20M &lt; /dev/urandom &gt; /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line">#填入一个20MB的随机比特流数据</div></pre></td></tr></table></figure>
<p>创建配置文件/etc/logrotate.d/test.conf，并写入：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/<span class="keyword">var</span>/log/test.log&#123;</div><div class="line">monthly</div><div class="line">rotate <span class="number">5</span></div><div class="line">compress</div><div class="line">delaycompress</div><div class="line">missingok</div><div class="line">notifempty</div><div class="line">create <span class="number">644</span> root root</div><div class="line">postrotate</div><div class="line">   /usr/bin/killall -HUP rsyslogd</div><div class="line">endscript</div><div class="line">&#125;</div><div class="line"><span class="meta">#注释：</span></div><div class="line"><span class="meta">#monthly: 日志文件将按月轮循。其它可用值为‘daily’，‘weekly’或者‘yearly’。</span></div><div class="line"><span class="meta">#rotate 5: 一次将存储5个归档日志。对于第六个归档，时间最久的归档将被删除。</span></div><div class="line"><span class="meta">#compress: 在轮循任务完成后，已轮循的归档将使用gzip进行压缩。</span></div><div class="line"><span class="meta">#delaycompress: 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在#下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。</span></div><div class="line"><span class="meta">#missingok: 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。</span></div><div class="line"><span class="meta">#notifempty: 如果日志文件为空，轮循不会进行。</span></div><div class="line"><span class="meta">#create 644 root root: 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件。</span></div><div class="line"><span class="meta">#postrotate/endscript: 在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，#rsyslogd 进程将立即再次读取其配置并继续运行。</span></div></pre></td></tr></table></figure>
<p><strong>示例二</strong><br>我们只想要轮循一个日志文件，然而日志文件大小可以增长到50MB。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#/etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span> 写入：</div><div class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">log</span>-<span class="keyword">file</span> &#123;</div><div class="line">    size=50M</div><div class="line">    <span class="keyword">rotate</span> 5</div><div class="line">    create 644 root root</div><div class="line">    postrotate</div><div class="line">        /usr/bin/killall -HUP rsyslogd</div><div class="line">    endscript</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>示例三</strong><br>我们想要让旧日志文件以创建日期命名，这可以通过添加dateext常熟实现。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#/etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span> 写入：</div><div class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">log</span>-<span class="keyword">file</span> &#123;</div><div class="line">    <span class="built_in">monthly</span></div><div class="line">    <span class="keyword">rotate</span> 5</div><div class="line">    dateext</div><div class="line">    create 644 root root</div><div class="line">    postrotate</div><div class="line">        /usr/bin/killall -HUP rsyslogd</div><div class="line">    endscript</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这将让归档文件在它们的文件名中包含日期信息。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>logrotate可以在任何时候从命令行手动调用。要调用为/etc/lograte.d/下配置的所有日志调用logrotate：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@node2</span> ~]<span class="meta"># ls /etc/logrotate.d/</span></div><div class="line">dracut  redis  salt  syslog  test.conf  vsftpd  yum</div><div class="line">[root<span class="symbol">@node2</span> ~]<span class="meta"># logrotate /etc/logrotate.conf</span></div></pre></td></tr></table></figure>
<p>要为某个特定的配置调用logrotate：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@node2</span> ~]<span class="meta"># logrotate /etc/logrotate.d/test.conf</span></div></pre></td></tr></table></figure>
<p><strong>预演方式运行</strong><br>使用‘-d’选项以预演方式运行logrotate。要进行验证，不用实际轮循任何日志文件，可以模拟演练日志轮循并显示其输出。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@node2 ~]# logrotate -<span class="keyword">d</span> /etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span> </div><div class="line">reading config <span class="keyword">file</span> /etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span></div><div class="line">reading config info <span class="keyword">for</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line"></div><div class="line">Handling 1 logs</div><div class="line"></div><div class="line">rotating pattern: /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span> monthly (5 rotations)</div><div class="line">empty <span class="keyword">log</span> files are not rotated, old logs are removed</div><div class="line">considering <span class="keyword">log</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line">  <span class="keyword">log</span> does not need rotating</div><div class="line">not running postrotate script, since <span class="keyword">no</span> logs were rotated</div></pre></td></tr></table></figure>
<p>正如我们从上面的输出结果可以看到的，logrotate判断该轮循是不必要的。</p>
<p><strong>强制方式运行</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@node2 bin]# logrotate -vf /etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span> </div><div class="line">reading config <span class="keyword">file</span> /etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span></div><div class="line">reading config info <span class="keyword">for</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line"></div><div class="line">Handling 1 logs</div><div class="line"></div><div class="line">rotating pattern: /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span> forced from command <span class="keyword">line</span> (5 rotations)</div><div class="line">empty <span class="keyword">log</span> files are not rotated, old logs are removed</div><div class="line">considering <span class="keyword">log</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line">  <span class="keyword">log</span> needs rotating</div><div class="line">rotating <span class="keyword">log</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span>, <span class="keyword">log</span>-&gt;rotateCount is 5</div><div class="line">dateext suffix '-20150923'</div><div class="line"><span class="keyword">glob</span> pattern '-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'</div><div class="line"><span class="keyword">glob</span> finding logs to <span class="keyword">compress</span> failed</div><div class="line"><span class="keyword">glob</span> finding old rotated logs failed</div><div class="line">renaming /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span> to /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span>-20150923</div><div class="line">creating new /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span> mode = 0644 uid = 0 gid = 0</div><div class="line">running postrotate script</div></pre></td></tr></table></figure>
<p><strong>之后配置crontab进行定时处理。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux_inode_100%问题]]></title>
      <url>http://yoursite.com/2016/12/15/Linux-inode-100-%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="查看系统的-innode-占用情况"><a href="#查看系统的-innode-占用情况" class="headerlink" title="查看系统的 innode 占用情况"></a>查看系统的 innode 占用情况</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">df -ih</span></div></pre></td></tr></table></figure>
<h3 id="查找那个目录下文件最多"><a href="#查找那个目录下文件最多" class="headerlink" title="查找那个目录下文件最多"></a>查找那个目录下文件最多</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> /*; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; find <span class="variable">$i</span> | wc <span class="_">-l</span>; <span class="keyword">done</span></div><div class="line"><span class="comment"># find $i 会列出该目录下所有文件，然后wc -l 计算总和</span></div></pre></td></tr></table></figure>
<h3 id="删除那个目录的的所有文件"><a href="#删除那个目录的的所有文件" class="headerlink" title="删除那个目录的的所有文件"></a>删除那个目录的的所有文件</h3><p>一般情况下，如果这个目录下应该会有数以百万的文件，如果你直接用 <code>rm -rf</code> 目录名 的话效率会很低，可以用下面方法,最好开一个 <code>screen</code> 来处理</p>
<p>```<br>find 目录 -type f -name ‘*’ -print0 | xargs -0 rm</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux_inodes]]></title>
      <url>http://yoursite.com/2016/12/15/Linux-inodes/</url>
      <content type="html"><![CDATA[<h3 id="一、inode是什么？"><a href="#一、inode是什么？" class="headerlink" title="一、inode是什么？"></a>一、inode是什么？</h3><p>理解inode，要从文件储存说起。 </p>
<p>文件储存在硬盘上，硬盘的最小存储单位叫做”扇区”（<code>Sector</code>）。每个扇区储存512字节（相当于0.5KB）。  </p>
<p>操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个”块”（block）。这种由多个扇区组成的”块”，是文件存取的最小单位。”块”的大小，最常见的是4KB，即连续八个<code>sector</code>组成一个 <code>block</code>。</p>
<p>文件数据都储存在”块”中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做<code>inode</code>，中文译名为”索引节点”。</p>
<p>每一个文件都有对应的<code>inode</code>，里面包含了与该文件有关的一些信息。</p>
<h3 id="二、inode的内容"><a href="#二、inode的内容" class="headerlink" title="二、inode的内容"></a>二、inode的内容</h3><p><code>inode</code>包含文件的元信息，具体来说有以下内容：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">* 文件的字节数</div><div class="line">　　* 文件拥有者的<span class="keyword">User</span> <span class="title">ID</span></div><div class="line">　　* 文件的<span class="keyword">Group</span> <span class="title">ID</span></div><div class="line">　　* 文件的读、写、执行权限</div><div class="line">　　* 文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。</div><div class="line">　　* 链接数，即有多少文件名指向这个inode</div><div class="line">　　* 文件数据block的位置</div></pre></td></tr></table></figure>
<p>可以用<code>stat</code>命令，查看某个文件的<code>inode</code>信息：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ stat sina.html</div><div class="line"><span class="symbol">  File:</span> ‘sina.html’</div><div class="line"><span class="symbol">  Size:</span> <span class="number">590188</span>    	<span class="string">Blocks:</span> <span class="number">1160</span>       IO <span class="string">Block:</span> <span class="number">4096</span>   regular file</div><div class="line"><span class="string">Device:</span> ca01h/<span class="number">51713</span>d	<span class="string">Inode:</span> <span class="number">921437</span>      <span class="string">Links:</span> <span class="number">1</span></div><div class="line"><span class="string">Access:</span> (<span class="number">0644</span><span class="regexp">/-rw-r--r--)  Uid: (    0/</span>    root)   <span class="string">Gid:</span> (    <span class="number">0</span>/    root)</div><div class="line"><span class="string">Access:</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-03</span> <span class="number">18</span>:<span class="number">08</span>:<span class="number">50.961342023</span> +<span class="number">0800</span></div><div class="line"><span class="string">Modify:</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-01</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">43.600409902</span> +<span class="number">0800</span></div><div class="line"><span class="string">Change:</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-01</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">43.600409902</span> +<span class="number">0800</span></div><div class="line"><span class="symbol"> Birth:</span> -</div></pre></td></tr></table></figure>
<h3 id="三、inode的大小"><a href="#三、inode的大小" class="headerlink" title="三、inode的大小"></a>三、inode的大小</h3><p><code>inode</code>也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是<code>inode</code>区（<code>inode table</code>），存放<code>inode</code>所包含的信息。</p>
<p>每个<code>inode</code>节点的大小，一般是128字节或256字节。<code>inode</code>节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个<code>inode</code>。假定在一块1GB的硬盘中，每个<code>inode</code>节点的大小为128字节，每1KB就设置一个<code>inode</code>，那么<code>inode table</code>的大小就会达到128MB，占整块硬盘的12.8%。</p>
<p>查看每个硬盘分区的<code>inode</code>总数和已经使用的数量，可以使用<code>df -i</code>命令。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ df -i</div><div class="line">Filesystem      Inodes  IUsed   IFree IUse% Mounted on</div><div class="line">/dev/xvda1     <span class="number">2621440</span> <span class="number">295029</span> <span class="number">2326411</span>   <span class="number">12</span>% /</div><div class="line">none            <span class="number">127041</span>     <span class="number">11</span>  <span class="number">127030</span>    <span class="number">1</span>% /sys/fs/cgroup</div><div class="line">udev            <span class="number">124329</span>    <span class="number">424</span>  <span class="number">123905</span>    <span class="number">1</span>% /dev</div><div class="line">tmpfs           <span class="number">127041</span>    <span class="number">338</span>  <span class="number">126703</span>    <span class="number">1</span>% /run</div><div class="line">none            <span class="number">127041</span>      <span class="number">3</span>  <span class="number">127038</span>    <span class="number">1</span>% /run/lock</div><div class="line">none            <span class="number">127041</span>      <span class="number">1</span>  <span class="number">127040</span>    <span class="number">1</span>% /run/shm</div><div class="line">none            <span class="number">127041</span>      <span class="number">2</span>  <span class="number">127039</span>    <span class="number">1</span>% /run/user</div></pre></td></tr></table></figure>
<p>查看每个<code>inode</code>节点的大小，可以用如下命令</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo dumpe2fs -h <span class="regexp">/dev/</span>xvda1 | <span class="keyword">grep</span> <span class="string">"Inode size"</span></div><div class="line">dumpe2fs <span class="number">1.42</span>.<span class="number">9</span> (<span class="number">4</span>-Feb-<span class="number">2014</span>)</div><div class="line">Inode <span class="keyword">size</span>:	          <span class="number">256</span></div></pre></td></tr></table></figure>
<p>由于每个文件都必须有一个<code>inode</code>，因此有可能发生<code>inode</code>已经用光，但是硬盘还未存满的情况。这时，就无法在硬盘上创建新文件。</p>
<h3 id="四、inode号码"><a href="#四、inode号码" class="headerlink" title="四、inode号码"></a>四、inode号码</h3><p>每个<code>inode</code>都有一个号码，操作系统用<code>inode</code>号码来识别不同的文件。</p>
<p>这里值得重复一遍，<code>Unix/Linux</code>系统内部不使用文件名，而使用<code>inode</code>号码来识别文件。对于系统来说，文件名只是<code>inode</code>号码便于识别的别称或者绰号。</p>
<p>表面上，用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：首先，系统找到这个文件名对应的<code>inode</code>号码；其次，通过<code>inode</code>号码，获取<code>inode</code>信息；最后，根据<code>inode</code>信息，找到文件数据所在的<code>block</code>，读出数据。<br>使用<code>ls -i</code>命令，可以看到文件名对应的<code>inode</code>号码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls -<span class="selector-tag">i</span> sina<span class="selector-class">.html</span></div><div class="line"><span class="number">921437</span> sina.html</div></pre></td></tr></table></figure>
<h3 id="五、目录文件"><a href="#五、目录文件" class="headerlink" title="五、目录文件"></a>五、目录文件</h3><p>Unix/Linux系统中，目录（<code>directory</code>）也是一种文件。打开目录，实际上就是打开目录文件。<br>目录文件的结构非常简单，就是一系列目录项（<code>dirent</code>）的列表。每个目录项，由两部分组成：所包含文件的文件名，以及该文件名对应的<code>inode</code>号码。</p>
<p><code>ls -i</code>命令列出整个目录文件，即文件名和inode号码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls -<span class="selector-tag">i</span> /mnt/</div><div class="line"><span class="number">919572</span> <span class="selector-tag">a</span><span class="selector-class">.py</span>  <span class="number">919588</span> <span class="selector-tag">b</span><span class="selector-class">.py</span>  <span class="number">919592</span> kong1  <span class="number">919591</span> kong2  <span class="number">919546</span> passwd</div></pre></td></tr></table></figure>
<p>理解了上面这些知识，就能理解目录的权限。目录文件的读权限（r）和写权限（w），都是针对目录文件本身。由于目录文件内只有文件名和<code>inode</code>号码，所以如果只有读权限，只能获取文件名，无法获取其他信息，因为其他信息都储存在<code>inode</code>节点中，而读取<code>inode</code>节点内的信息需要目录文件的执行权限（x）。</p>
<h3 id="六、硬链接"><a href="#六、硬链接" class="headerlink" title="六、硬链接"></a>六、硬链接</h3><p>一般情况下，文件名和<code>inode</code>号码是”一一对应”关系，每个<code>inode</code>号码对应一个文件名。但是，<code>Unix/Linux</code>系统允许，多个文件名指向同一个<code>inode</code>号码。</p>
<p>这意味着，可以用不同的文件名访问同样的内容；对文件内容进行修改，会影响到所有文件名；但是，删除一个文件名，不影响另一个文件名的访问。这种情况就被称为”硬链接”（<code>hard link</code>）。</p>
<p><code>ln</code>命令可以创建硬链接：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ln 源文件 目标文件</div><div class="line"><span class="variable">$ </span>touch testa</div><div class="line"><span class="variable">$ </span>ln testa testb</div><div class="line"><span class="variable">$ </span>ll -i test*</div><div class="line"><span class="number">919070</span> -rw-r--r-- <span class="number">2</span> root root <span class="number">0</span> Aug  <span class="number">4</span> 09<span class="symbol">:</span><span class="number">49</span> testa</div><div class="line"><span class="number">919070</span> -rw-r--r-- <span class="number">2</span> root root <span class="number">0</span> Aug  <span class="number">4</span> 09<span class="symbol">:</span><span class="number">49</span> testb</div><div class="line"></div><div class="line"><span class="comment"># 一些更改操作,更改操作会同时更改两个文件，删除其中一个，不会影响到另一个</span></div><div class="line"><span class="variable">$ </span>echo aa &gt; testa</div><div class="line"><span class="variable">$ </span>cat testb</div><div class="line">aa</div><div class="line"><span class="variable">$ </span>echo bb &gt; testb</div><div class="line"><span class="variable">$ </span>cat testa</div><div class="line">bb</div><div class="line"><span class="variable">$ </span>rm -rf testa</div><div class="line"><span class="variable">$ </span>ls</div><div class="line">a.py  b.py  kong1  kong2  passwd  testb  testv</div><div class="line"><span class="variable">$ </span>cat testb</div><div class="line">bb</div></pre></td></tr></table></figure>
<p>运行上面这条命令以后，源文件与目标文件的<code>inode</code>号码相同，都指向同一个<code>inode</code>。<code>inode</code>信息中有一项叫做”链接数”，记录指向该<code>inode</code>的文件名总数，这时就会增加1。</p>
<p>反过来，删除一个文件名，就会使得<code>inode</code>节点中的”链接数”减1。当这个值减到0，表明没有文件名指向这个<code>inode</code>，系统就会回收这个<code>inode</code>号码，以及其所对应<code>block</code>区域。<br>这里顺便说一下目录文件的”链接数”。创建目录时，默认会生成两个目录项：”.”和”..”。前者的<code>inode</code>号码就是当前目录的<code>inode</code>号码，等同于当前目录的”硬链接”；后者的<code>inode</code>号码就是当前目录的父目录的<code>inode</code>号码，等同于父目录的”硬链接”。所以，任何一个目录的”硬链接”总数，总是等于2加上它的子目录总数（含隐藏目录）。</p>
<h3 id="七、软链接"><a href="#七、软链接" class="headerlink" title="七、软链接"></a>七、软链接</h3><p>文件A和文件B的<code>inode</code>号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的”软链接”（<code>soft link</code>）或者”符号链接（<code>symbolic link</code>）。<br>这意味着，文件A依赖于文件B而存在，如果删除了文件B，打开文件A就会报错：<code>&quot;No such file or directory&quot;</code>。这是软链接与硬链接最大的不同：文件A指向文件B的文件名，而不是文件B的<code>inode</code>号码，文件B的<code>inode</code>“链接数”不会因此发生变化。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ln <span class="_">-s</span> 源文文件或目录 目标文件或目录</div></pre></td></tr></table></figure>
<h3 id="八、inode的特殊作用"><a href="#八、inode的特殊作用" class="headerlink" title="八、inode的特殊作用"></a>八、inode的特殊作用</h3><p>由于<code>inode</code>号码与文件名分离，这种机制导致了一些<code>Unix/Linux</code>系统特有的现象。</p>
<p>　　1. 有时，文件名包含特殊字符，无法正常删除。这时，直接删除<code>inode</code>节点，就能起到删除文件的作用。</p>
<p>　　2. 移动文件或重命名文件，只是改变文件名，不影响<code>inode</code>号码。
　</p>
<p>　　3. 打开一个文件以后，系统就以<code>inode</code>号码来识别这个文件，不再考虑文件名。因此，通常来说，系统无法从<code>inode</code>号码得知文件名。</p>
<p>　　<br>第3点使得软件更新变得简单，可以在不关闭软件的情况下进行更新，不需要重启。因为系统通过<code>inode</code>号码，识别运行中的文件，不通过文件名。更新的时候，新版文件以同样的文件名，生成一个新的<code>inode</code>，不会影响到运行中的文件。等到下一次运行这个软件的时候，文件名就自动指向新版文件，旧版文件的<code>inode</code>则被回收。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_递归]]></title>
      <url>http://yoursite.com/2016/12/15/Python-%E9%80%92%E5%BD%92/</url>
      <content type="html"><![CDATA[<p><strong>递归</strong>：函数对自身定义的引用。</p>
<p>每次函数调用时，针对这个调用的新命名空间会被创建，意味着当函数调用“自身”时，实际上运行的是两个不同的函数（或者说同一个函数具有两个不同的命名空间）。</p>
<h5 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h5><p>计算数 n 的阶乘(<code>n * (n-1) * (n-2) .. * 1</code>)：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># for 循环实现</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fac</span><span class="params">(n)</span>:</span></div><div class="line">    result = n</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line">        result *= i</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">    </div><div class="line"><span class="comment"># 递归实现</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fac</span><span class="params">(n)</span>:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rec_fac</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> n</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> n * rec_fac(n - <span class="number">1</span>)</div></pre></td></tr></table></figure>
<h5 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(sequence, number, lower=<span class="number">0</span>, upper=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> upper <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        upper = len(sequence) - <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> lower == upper:</div><div class="line">        <span class="keyword">assert</span> number == sequence[upper]</div><div class="line">        <span class="keyword">return</span> upper</div><div class="line"></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        middle = (lower + upper)//<span class="number">2</span></div><div class="line">        <span class="keyword">if</span> number &gt; sequence[middle]:</div><div class="line">            <span class="keyword">return</span> search(sequence, number, middle+<span class="number">1</span>, upper)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> search(sequence, number, lower, middle)</div></pre></td></tr></table></figure>
<h5 id="查找目录下的所有文件"><a href="#查找目录下的所有文件" class="headerlink" title="查找目录下的所有文件"></a>查找目录下的所有文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Test</span><span class="params">(rootDir)</span>:</span></div><div class="line">    <span class="keyword">for</span> lists <span class="keyword">in</span> os.listdir(rootDir):</div><div class="line">        path = os.path.join(rootDir, lists)</div><div class="line">        <span class="keyword">print</span> path</div><div class="line">        <span class="keyword">if</span> os.path.isdir(path):</div><div class="line">            Test(path)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
