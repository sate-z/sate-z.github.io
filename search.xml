<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Python_collections模块--deque]]></title>
      <url>http://yoursite.com/2017/01/09/Python-collections%E6%A8%A1%E5%9D%97-deque/</url>
      <content type="html"><![CDATA[<h4 id="deque-线程安全的双向队列"><a href="#deque-线程安全的双向队列" class="headerlink" title="deque 线程安全的双向队列"></a>deque 线程安全的双向队列</h4><ul>
<li><code>append(x)</code>  在队列的右边添加 x</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">104</span>]: q = collections.deque()</div><div class="line"></div><div class="line">In [<span class="number">105</span>]: q.append(<span class="number">1</span>)</div><div class="line"></div><div class="line">In [<span class="number">106</span>]: q.append(<span class="number">2</span>)</div><div class="line"></div><div class="line">In [<span class="number">107</span>]: q</div><div class="line">Out[<span class="number">107</span>]: deque([<span class="number">1</span>, <span class="number">2</span>])</div></pre></td></tr></table></figure>
<ul>
<li><code>appendleft(x)</code> 在队列的左边添加 x</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">108</span>]: q.appendleft(<span class="number">4</span>)</div><div class="line"></div><div class="line">In [<span class="number">109</span>]: q</div><div class="line">Out[<span class="number">109</span>]: deque([<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>])</div></pre></td></tr></table></figure>
<ul>
<li><p><code>clear()</code>  清除队列</p>
</li>
<li><p><code>count(x)</code>  计算队列中等于 x 的元素个数</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">116</span>]: q</div><div class="line">Out[<span class="number">116</span>]: deque([<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>])</div><div class="line"></div><div class="line">In [<span class="number">117</span>]: q.count(<span class="number">2</span>)</div><div class="line">Out[<span class="number">117</span>]: <span class="number">2</span></div><div class="line"></div><div class="line">In [<span class="number">118</span>]: q.count(<span class="number">1</span>)</div><div class="line">Out[<span class="number">118</span>]: <span class="number">1</span></div></pre></td></tr></table></figure>
<ul>
<li><code>extend(iterable)</code> 在队列的右边扩展可迭代的队列</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">119</span>]: q.extend([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</div><div class="line"></div><div class="line">In [<span class="number">120</span>]: q</div><div class="line">Out[<span class="number">120</span>]: deque([<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</div></pre></td></tr></table></figure>
<ul>
<li><p><code>extendleft(iterable)</code> 在队列的左边扩展可迭代的队列</p>
</li>
<li><p><code>pop()</code> 取出并删除右边的第一个元素</p>
</li>
<li><p><code>popleft()</code> 取出并删除左边的第一个元素</p>
</li>
<li><p><code>remove(value)</code> 删除队列中第一个匹配的元素</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">120</span>]: q</div><div class="line">Out[<span class="number">120</span>]: deque([<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</div><div class="line"></div><div class="line">In [<span class="number">122</span>]: q.remove(<span class="number">2</span>)</div><div class="line"></div><div class="line">In [<span class="number">123</span>]: q</div><div class="line">Out[<span class="number">123</span>]: deque([<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</div></pre></td></tr></table></figure>
<ul>
<li><p><code>reverse()</code>  反转队列，返回None</p>
</li>
<li><p><code>rotate(n)</code>        队列向右旋转n， 如果n是负值，则向左</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">127</span>]: q</div><div class="line">Out[<span class="number">127</span>]: deque([<span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">2</span>])</div><div class="line"></div><div class="line">In [<span class="number">128</span>]: q.rotate(<span class="number">3</span>)</div><div class="line"></div><div class="line">In [<span class="number">131</span>]: q</div><div class="line">Out[<span class="number">131</span>]: deque([<span class="number">7</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>])</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_collections模块--nametuple]]></title>
      <url>http://yoursite.com/2017/01/09/Python-collections%E6%A8%A1%E5%9D%97-nametuple/</url>
      <content type="html"><![CDATA[<h4 id="nametuple-可命名元祖"><a href="#nametuple-可命名元祖" class="headerlink" title="nametuple 可命名元祖"></a>nametuple 可命名元祖</h4><p><code>nametuple</code> 为元祖中每个位置分配含义，可以在使用常规元祖的地方使用，并且添加了通过名称而不是位置索引访问字段的功能。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">97</span>]: Mytuple = collections.namedtuple(<span class="string">'mytuple'</span>, [<span class="string">'x'</span>,<span class="string">'y'</span>])</div><div class="line"></div><div class="line">In [<span class="number">98</span>]: Mytuple(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">Out[<span class="number">98</span>]: mytuple(x=<span class="number">1</span>, y=<span class="number">2</span>)</div><div class="line"></div><div class="line">In [<span class="number">101</span>]: n = Mytuple(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"></div><div class="line">In [<span class="number">102</span>]: n</div><div class="line">Out[<span class="number">102</span>]: mytuple(x=<span class="number">1</span>, y=<span class="number">2</span>)</div><div class="line"></div><div class="line">In [<span class="number">103</span>]: n.x</div><div class="line">Out[<span class="number">103</span>]: <span class="number">1</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_collections模块--defaultdict]]></title>
      <url>http://yoursite.com/2017/01/09/Python-collections%E6%A8%A1%E5%9D%97-defaultdict/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="http://python.usyiyi.cn/python_278/library/collections.html" target="_blank" rel="external">http://python.usyiyi.cn/python_278/library/collections.html</a></p>
</blockquote>
<p><code>class collections.defaultdict([default_factory[, ...]])</code></p>
<p>可以为字典中的<code>value</code>设置默认类型</p>
<p>第一个参数提供的初始值为<code>default_factory</code>属性 ；它将默认为<code>None</code>。所有其余的参数是相同的处理，就像他们被传递到字典构造函数包括关键字参数.</p>
<h4 id="使用列表，作为default-factory，会默认将字典中的value值作为列表处理"><a href="#使用列表，作为default-factory，会默认将字典中的value值作为列表处理" class="headerlink" title="使用列表，作为default_factory，会默认将字典中的value值作为列表处理"></a>使用列表，作为<code>default_factory</code>，会默认将字典中的<code>value</code>值作为列表处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">90</span>]: dict1 = collections.defaultdict(list)</div><div class="line"></div><div class="line">In [<span class="number">91</span>]: dict1[<span class="string">'k1'</span>].append(<span class="number">1</span>)</div><div class="line"></div><div class="line">In [<span class="number">92</span>]: dict1</div><div class="line">Out[<span class="number">92</span>]: defaultdict(list, &#123;<span class="string">'k1'</span>: [<span class="number">1</span>]&#125;)</div><div class="line"></div><div class="line"><span class="comment"># 官方示例</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = [(<span class="string">'yellow'</span>, <span class="number">1</span>), (<span class="string">'blue'</span>, <span class="number">2</span>), (<span class="string">'yellow'</span>, <span class="number">3</span>), (<span class="string">'blue'</span>, <span class="number">4</span>), (<span class="string">'red'</span>, <span class="number">1</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = defaultdict(list)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</div><div class="line"><span class="meta">... </span>    d[k].append(v)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</div><div class="line">[(<span class="string">'blue'</span>, [<span class="number">2</span>, <span class="number">4</span>]), (<span class="string">'red'</span>, [<span class="number">1</span>]), (<span class="string">'yellow'</span>, [<span class="number">1</span>, <span class="number">3</span>])]</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_collections模块--OrderedDict]]></title>
      <url>http://yoursite.com/2017/01/09/Python-collections%E6%A8%A1%E5%9D%97-OrderedDict/</url>
      <content type="html"><![CDATA[<h4 id="OrderedDict-有序字典"><a href="#OrderedDict-有序字典" class="headerlink" title="OrderedDict 有序字典"></a>OrderedDict 有序字典</h4><p>字典是无序的，可以通过<code>OrderedDict</code>使其有序。当对字典做迭代时，它会严格按照元素的初始的添加的顺序进行。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">60</span>]: o1 = collections.OrderedDict()</div><div class="line"></div><div class="line">In [<span class="number">79</span>]: o1[<span class="string">'foo'</span>] = <span class="number">1</span></div><div class="line"></div><div class="line">In [<span class="number">80</span>]: o1[<span class="string">'bar'</span>] = <span class="number">2</span></div><div class="line"></div><div class="line">In [<span class="number">81</span>]: o1[<span class="string">'spam'</span>] = <span class="number">3</span></div><div class="line"></div><div class="line">In [<span class="number">82</span>]: o1[<span class="string">'grok'</span>] = <span class="number">4</span></div><div class="line"></div><div class="line">In [<span class="number">83</span>]: o1[<span class="string">'aa'</span>] = <span class="number">5</span></div><div class="line"></div><div class="line">In [<span class="number">84</span>]: o1</div><div class="line">Out[<span class="number">84</span>]: OrderedDict([(<span class="string">'foo'</span>, <span class="number">1</span>), (<span class="string">'bar'</span>, <span class="number">2</span>), (<span class="string">'spam'</span>, <span class="number">3</span>), (<span class="string">'grok'</span>, <span class="number">4</span>), (<span class="string">'aa'</span>, <span class="number">5</span>)])</div><div class="line"></div><div class="line">In [<span class="number">87</span>]: <span class="keyword">for</span> key <span class="keyword">in</span> o1:</div><div class="line">    ...:     <span class="keyword">print</span> key, o1[key]</div><div class="line">    ...:</div><div class="line">foo <span class="number">1</span></div><div class="line">bar <span class="number">2</span></div><div class="line">spam <span class="number">3</span></div><div class="line">grok <span class="number">4</span></div><div class="line">aa <span class="number">5</span></div></pre></td></tr></table></figure>
<p>由于有序字典会记住其插入顺序，因此可以与排序结合使用以创建排序字典</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># regular unsorted dictionary</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'banana'</span>: <span class="number">3</span>, <span class="string">'apple'</span>: <span class="number">4</span>, <span class="string">'pear'</span>: <span class="number">1</span>, <span class="string">'orange'</span>: <span class="number">2</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># dictionary sorted by key</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>OrderedDict(sorted(d.items(), key=<span class="keyword">lambda</span> t: t[<span class="number">0</span>]))</div><div class="line">OrderedDict([(<span class="string">'apple'</span>, <span class="number">4</span>), (<span class="string">'banana'</span>, <span class="number">3</span>), (<span class="string">'orange'</span>, <span class="number">2</span>), (<span class="string">'pear'</span>, <span class="number">1</span>)])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># dictionary sorted by value</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>OrderedDict(sorted(d.items(), key=<span class="keyword">lambda</span> t: t[<span class="number">1</span>]))</div><div class="line">OrderedDict([(<span class="string">'pear'</span>, <span class="number">1</span>), (<span class="string">'orange'</span>, <span class="number">2</span>), (<span class="string">'banana'</span>, <span class="number">3</span>), (<span class="string">'apple'</span>, <span class="number">4</span>)])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># dictionary sorted by length of the key string</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>OrderedDict(sorted(d.items(), key=<span class="keyword">lambda</span> t: len(t[<span class="number">0</span>])))</div><div class="line">OrderedDict([(<span class="string">'pear'</span>, <span class="number">1</span>), (<span class="string">'apple'</span>, <span class="number">4</span>), (<span class="string">'orange'</span>, <span class="number">2</span>), (<span class="string">'banana'</span>, <span class="number">3</span>)])</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_collections模块--Counter]]></title>
      <url>http://yoursite.com/2017/01/09/Python-collections%E6%A8%A1%E5%9D%97-Counter/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="https://docs.python.org/2/library/collections.html" target="_blank" rel="external">https://docs.python.org/2/library/collections.html</a></p>
</blockquote>
<p><code>collections</code>是<code>Python</code>内建的一个高性能容器数据类型，提供了许多有用的集合类。</p>
<ul>
<li><code>namedtuple()</code> :生成可以使用名字来访问元素内容的<code>tuple</code>子类</li>
<li><code>deque</code>: 双端队列，可以快速的从另外一侧追加和推出对象</li>
<li><code>Counter</code>: 计数器，主要用来计数</li>
<li><code>OrderedDict</code>: 有序字典</li>
<li><code>defaultdict</code>: 带有默认值的字典</li>
</ul>
<h4 id="Counter-计数器"><a href="#Counter-计数器" class="headerlink" title="Counter 计数器"></a>Counter 计数器</h4><ul>
<li>列表重复元素的计数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">3</span>]: <span class="keyword">import</span> collections</div><div class="line"></div><div class="line"><span class="comment"># 列表重复元素的计数</span></div><div class="line">In [<span class="number">4</span>]: c1 = collections.Counter(<span class="string">'aaabbbsssdc'</span>)</div><div class="line">In [<span class="number">5</span>]: <span class="keyword">print</span> c1</div><div class="line">Counter(&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'s'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">1</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment"># 空的计数器</span></div><div class="line">In [<span class="number">44</span>]: c = collections.Counter()</div><div class="line"></div><div class="line">In [<span class="number">45</span>]: c</div><div class="line">Out[<span class="number">45</span>]: Counter()</div><div class="line"><span class="comment"># 通过映射关系生成的计数器</span></div><div class="line">In [<span class="number">46</span>]: c = collections.Counter(&#123;<span class="string">'red'</span>: <span class="number">4</span>, <span class="string">'blue'</span>: <span class="number">2</span>&#125;)</div><div class="line"></div><div class="line">In [<span class="number">47</span>]: c</div><div class="line">Out[<span class="number">47</span>]: Counter(&#123;<span class="string">'blue'</span>: <span class="number">2</span>, <span class="string">'red'</span>: <span class="number">4</span>&#125;)</div><div class="line"><span class="comment"># 通过关键字生成的计数器</span></div><div class="line">In [<span class="number">48</span>]: c = collections.Counter(cats=<span class="number">4</span>, dogs=<span class="number">8</span>)</div><div class="line"></div><div class="line">In [<span class="number">49</span>]: c</div><div class="line">Out[<span class="number">49</span>]: Counter(&#123;<span class="string">'cats'</span>: <span class="number">4</span>, <span class="string">'dogs'</span>: <span class="number">8</span>&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>most_common(n)</code> – 列出最多的前n项</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">13</span>]: c1.most_common(<span class="number">3</span>)</div><div class="line">Out[<span class="number">13</span>]: [(<span class="string">'a'</span>, <span class="number">3</span>), (<span class="string">'s'</span>, <span class="number">3</span>), (<span class="string">'b'</span>, <span class="number">3</span>)]</div></pre></td></tr></table></figure>
<ul>
<li><code>elements()</code> – 以迭代器的方式取数据，如果某个元素的计数是负值，则忽略</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># elements() -- 以迭代器的方式取数据，如果某个元素的计数是负值，则忽略</span></div><div class="line">In [<span class="number">20</span>]: c3 = collections.Counter(a=<span class="number">3</span>, b=<span class="number">3</span>, c=<span class="number">0</span>, d=<span class="number">-2</span>)</div><div class="line"></div><div class="line">In [<span class="number">21</span>]: c3.elements()</div><div class="line">Out[<span class="number">21</span>]: &lt;itertools.chain at <span class="number">0x109127610</span>&gt;</div><div class="line"></div><div class="line">In [<span class="number">22</span>]: list(c3.elements())</div><div class="line">Out[<span class="number">22</span>]: [<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>]</div></pre></td></tr></table></figure>
<ul>
<li><code>subtract</code> – 从可迭代或从另一映射（或计数器）中减去元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># subtract -- 从可迭代或从另一映射（或计数器）中减去元素</span></div><div class="line">In [<span class="number">25</span>]: c = collections.Counter(a=<span class="number">4</span>, b=<span class="number">2</span>, c=<span class="number">0</span>, d=<span class="number">-2</span>)</div><div class="line"></div><div class="line">In [<span class="number">26</span>]: d = collections.Counter(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">4</span>)</div><div class="line"></div><div class="line">In [<span class="number">27</span>]: c.subtract(d)</div><div class="line"></div><div class="line">In [<span class="number">28</span>]: c</div><div class="line">Out[<span class="number">28</span>]: Counter(&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">0</span>, <span class="string">'c'</span>: <span class="number">-3</span>, <span class="string">'d'</span>: <span class="number">-6</span>&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>update</code> – 和 <code>subtract</code> 相反，元素相加</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># update -- 和 subtract 相反，元素相加</span></div><div class="line">In [<span class="number">29</span>]: c = collections.Counter(a=<span class="number">4</span>, b=<span class="number">2</span>, c=<span class="number">0</span>, d=<span class="number">-2</span>)</div><div class="line"></div><div class="line">In [<span class="number">30</span>]: d = collections.Counter(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">4</span>)</div><div class="line"></div><div class="line">In [<span class="number">31</span>]: c.update(d)</div><div class="line"></div><div class="line">In [<span class="number">32</span>]: c</div><div class="line">Out[<span class="number">32</span>]: Counter(&#123;<span class="string">'a'</span>: <span class="number">5</span>, <span class="string">'b'</span>: <span class="number">4</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">2</span>&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>clear</code> – 清除</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">33</span>]: c1</div><div class="line">Out[<span class="number">33</span>]: Counter(&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">1</span>, <span class="string">'d'</span>: <span class="number">1</span>, <span class="string">'s'</span>: <span class="number">3</span>&#125;)</div><div class="line"></div><div class="line">In [<span class="number">34</span>]: c1.clear()</div><div class="line"></div><div class="line">In [<span class="number">35</span>]: c1</div><div class="line">Out[<span class="number">35</span>]: Counter()</div></pre></td></tr></table></figure>
<ul>
<li>字典重复Key的计数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 字典重复Key的计数</span></div><div class="line">In [<span class="number">8</span>]: dic1 = &#123;</div><div class="line">   ...:     <span class="string">'a'</span>: <span class="number">1</span>,</div><div class="line">   ...:     <span class="string">'b'</span>: <span class="number">2</span>,</div><div class="line">   ...:     <span class="string">'a'</span>: <span class="number">1</span>,</div><div class="line">   ...:     <span class="string">'a'</span>: <span class="number">3</span>&#125;</div><div class="line">In [<span class="number">10</span>]: c2 = collections.Counter(dic1)</div><div class="line">In [<span class="number">11</span>]: <span class="keyword">print</span> c2</div><div class="line">Counter(&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;)</div><div class="line">In [<span class="number">12</span>]: c2[<span class="string">'a'</span>]</div><div class="line">Out[<span class="number">12</span>]: <span class="number">3</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_Scrapy入门]]></title>
      <url>http://yoursite.com/2016/12/15/Python-Scrapy%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考官方文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html#spider" target="_blank" rel="external">http://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html#spider</a></p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装分别在<code>ubunut</code>和<code>MAC</code>系统下安装，过程如下：</p>
<p><code>ubuntu</code>系统：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用pip安装Scrapy</span></div><div class="line">sudo pip <span class="keyword">install </span><span class="keyword">Scrapy</span></div><div class="line"><span class="comment"># 遇到报错，报哪个包没有，就是用pip安装哪个</span></div></pre></td></tr></table></figure>
<p><code>MAC</code>系统:</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先确保已经安装 xcode</span></div><div class="line">xcode-select --<span class="keyword">install</span></div><div class="line"><span class="comment"># 使用 pip 安装 Scrapy</span></div><div class="line">sudo pip <span class="keyword">install </span><span class="keyword">Scrapy</span></div><div class="line"></div><div class="line"><span class="comment"># 遇到报错 关于six-1.4.1的，无法升级到新的版本。如下两种解决办法：</span></div><div class="line"><span class="number">1</span>、 sudo pip <span class="keyword">install </span><span class="keyword">scrapy </span>--ignore-<span class="keyword">installed </span>six <span class="comment"># 跳过</span></div><div class="line"><span class="number">2</span>、 sudo easy_install <span class="string">"six&gt;=1.5.2"</span> <span class="comment"># 使用easy_install 升级six。然后安装</span></div></pre></td></tr></table></figure>
<h3 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a>创建项目：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ scrapy startproject tutorial  # 创建项目</div><div class="line">$ cd tutorial/ ; tree		    # 进入到目录，并展示目录结构</div><div class="line">.</div><div class="line">├── scrapy.cfg</div><div class="line">└── tutorial</div><div class="line">    ├── __init__.py</div><div class="line">    ├── items.py				# 保存爬去到的数据的容器,继承 scrapy.Item 类</div><div class="line">    ├── pipelines.py</div><div class="line">    ├── settings.py</div><div class="line">    └── spiders</div><div class="line">        └── __init__.py</div><div class="line">        └── dmoz_spider.py  	 # 该文件为自己创建，继承 scrapy.Spider 类。定义属性：</div><div class="line">        						 # name（唯一，区别spider）</div><div class="line">        						 # start_urls（spider启动时进行爬去的列表，第一个被获取到</div><div class="line">        						 的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提</div><div class="line">        						 取）</div><div class="line">        						 # pasrse() 方法，被调用时，每个初始URL完成下载后生成的</div><div class="line">        						 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解</div><div class="line">        						 析返回的数据(response data)，提取数据(生成item)以及生成</div><div class="line">        						 需要进一步处理的URL的 Request 对象。</div></pre></td></tr></table></figure>
<h3 id="编写第一个爬虫"><a href="#编写第一个爬虫" class="headerlink" title="编写第一个爬虫"></a>编写第一个爬虫</h3><p>目的：获取url页面源码。(并未用到上边定义的<code>Items</code>)</p>
<p>创建一个<code>spider</code>，继承<code>scrapy.Spider</code>类，并定义一些属性：</p>
<ul>
<li><code>name:</code> 用于区别<code>Spider</code>。 该名字必须是唯一的，不可以为不同的<code>Spider</code>设定相同的名字。</li>
<li><code>start_urls:</code> 包含了<code>Spider</code>在启动时进行爬取的<code>url</code>列表。 因此，第一个被获取到的页面将是其中之一。 后续的<code>URL</code>则从初始的<code>URL</code>获取到的数据中提取</li>
<li><code>parse():</code> 是<code>spider</code>的一个方法。 被调用时，每个初始<code>URL</code>完成下载后生成的<code>Response(页面内容)</code>对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成<code>item</code>)以及生成需要进一步处理的<code>URL</code>的<code>Request</code>对象。</li>
</ul>
<p>在<code>tutorial/spiders</code>目录中创建<code>dmoz_spider.py</code>，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"dmoz"</span></div><div class="line">    allow_domains = [<span class="string">"dmoz.org"</span>]</div><div class="line">    start_urls = [</div><div class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</div><div class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span></div><div class="line">    ]</div><div class="line"></div><div class="line"><span class="comment">#----- 从start_urls中读取页面源码信息,并写入本地---#</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self,response)</span>:</span></div><div class="line">        <span class="comment"># reponse.body 会输出请求url的源码,response.url 是所请求的 url 地址</span></div><div class="line">        <span class="comment"># 通过下面的输出语句发现，start_urls 中的url地址的请求结果被分别带入到该方法中。</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"debug---------"</span></div><div class="line">        <span class="keyword">print</span> response.body</div><div class="line">        <span class="keyword">print</span> response.url</div><div class="line">        <span class="keyword">print</span> <span class="string">"debug----------"</span></div><div class="line"></div><div class="line">        <span class="comment"># 过滤出请求 url 地址的最后一段，并以该段的名字来创建文件，并写入对应的网页源码。</span></div><div class="line">        filename = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>] + <span class="string">'.html'</span></div><div class="line">        <span class="keyword">with</span> open(filename,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(response.body)</div></pre></td></tr></table></figure>
<p><strong>执行：</strong></p>
<p>进入项目的根目录，执行下列命令启动spider</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>scrapy crawl dmoz</div></pre></td></tr></table></figure>
<p>执行结果：在项目目录下，会生成两个文件，<code>Books.html</code>和<code>Resources.html</code>，文件内容分别是两个url页面的源码。</p>
<h3 id="编写第二个项目（从选定的url地址中提取我们想要的信息）"><a href="#编写第二个项目（从选定的url地址中提取我们想要的信息）" class="headerlink" title="编写第二个项目（从选定的url地址中提取我们想要的信息）"></a>编写第二个项目（从选定的url地址中提取我们想要的信息）</h3><p><strong>定义Item</strong></p>
<blockquote>
<p><code>Item</code>是保存爬取到的数据的容器。其使用方法和字典类似，虽然可以在<code>Scrapy</code>中直接使用<code>dict</code>，但是<code>Item</code>提供了额外保护机制来避免拼写错误导致的未定义字段错误。</p>
</blockquote>
<p>编辑<code>tutorial</code>目录中的<code>items.py</code>文件,根据我们需要获取到的数据对<code>item</code>进行建模。下边分别定义了<code>title</code>、<code>url</code>和网站的描述。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># Define here the models for your scraped items</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># See documentation in:</span></div><div class="line"><span class="comment"># http://doc.scrapy.org/en/latest/topics/items.html</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TutorialItem</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    <span class="comment"># define the fields for your item here like:</span></div><div class="line">    <span class="comment"># name = scrapy.Field()</span></div><div class="line">    title = scrapy.Field()  </div><div class="line">    link = scrapy.Field()</div><div class="line">    desc = scrapy.Field()</div></pre></td></tr></table></figure>
<p>通过开发者工具对页面的源码进行分析，我们要提取的信息如下：<br><img src="http://7xkm8w.com1.z0.glb.clouddn.com/scrapy_dmoz.png" alt="源码分析"></p>
<p>在<code>tutorial/spiders</code>目录中创建<code>dmoz_spider.py</code>，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> tutorial.items <span class="keyword">import</span> DmozItem</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"dmoz"</span></div><div class="line">    allow_domains = [<span class="string">"dmoz.org"</span>]</div><div class="line">    start_urls = [</div><div class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</div><div class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span></div><div class="line">    ]</div><div class="line"></div><div class="line"><span class="comment"># ----- 从start_urls中的页面源码中提取自己需要的,title、link、简介</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">'//*[@class="title-and-desc"]'</span>):</div><div class="line">        <span class="comment"># item 对象是自定义的 python 字典，可以使用标准的字典语法来获取到每个段子的值，字段就是之前在items.py文件中用Field赋值的属性。</span></div><div class="line">            item = DmozItem()</div><div class="line">            item[<span class="string">'title'</span>] = sel.xpath(<span class="string">'a/div/text()'</span>).extract()</div><div class="line">            item[<span class="string">'link'</span>] = sel.xpath(<span class="string">'a/@href'</span>).extract()</div><div class="line">            item[<span class="string">'desc'</span>] = sel.xpath(<span class="string">'div/text()'</span>).extract()</div><div class="line">            <span class="keyword">yield</span> item</div></pre></td></tr></table></figure>
<p><strong>执行：</strong></p>
<p>进入项目的根目录，执行下列命令启动spider</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>scrapy crawl dmoz</div></pre></td></tr></table></figure>
<p>在输出的<code>debug</code>信息中，可以看到生成的<code>items</code>列表。更直观一点可以将<code>items</code>写入文件：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$  <span class="keyword">scrapy </span>crawl dmoz -o items.<span class="keyword">json </span>-t <span class="keyword">josn</span></div><div class="line"><span class="comment"># -o 指定文件名称  -t 指定格式</span></div></pre></td></tr></table></figure>
<p>查看<code>items.json</code>内容：</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ cat items.json | head -n 5</div><div class="line">[</div><div class="line">&#123;"title": ["eff-bot's Daily Python URL "], "link": ["http://www.pythonware.com/daily/"], "desc": ["<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\t</span><span class="symbol">\t</span><span class="symbol">\t</span><span class="symbol">\r</span><span class="symbol">\n</span>                                    Contains links to assorted resources from the Python universe, compiled by PythonWare.<span class="symbol">\r</span><span class="symbol">\n</span>                                    ", "<span class="symbol">\r</span><span class="symbol">\n</span>                                  "]&#125;,</div><div class="line">&#123;"title": ["O'Reilly Python Center "], "link": ["http://oreilly.com/python/"], "desc": ["<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\t</span><span class="symbol">\t</span><span class="symbol">\t</span><span class="symbol">\r</span><span class="symbol">\n</span>                                    Features Python books, resources, news and articles.<span class="symbol">\r</span><span class="symbol">\n</span>                                    ", "<span class="symbol">\r</span><span class="symbol">\n</span>                                  "]&#125;,</div><div class="line">&#123;"title": ["Python Developer's Guide "], "link": ["https://www.python.org/dev/"], "desc": ["<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\t</span><span class="symbol">\t</span><span class="symbol">\t</span><span class="symbol">\r</span><span class="symbol">\n</span>                                    Resources for reporting bugs, accessing the Python source tree with CVS and taking part in the development of Python.<span class="symbol">\r</span><span class="symbol">\n</span>                                    ", "<span class="symbol">\r</span><span class="symbol">\n</span>                                  "]&#125;,</div><div class="line">&#123;"title": ["Social Bug "], "link": ["http://win32com.goermezer.de/"], "desc": ["<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\t</span><span class="symbol">\t</span><span class="symbol">\t</span><span class="symbol">\r</span><span class="symbol">\n</span>                                    Scripts, examples and news about Python programming for the Windows platform.<span class="symbol">\r</span><span class="symbol">\n</span>                                    ", "<span class="symbol">\r</span><span class="symbol">\n</span>                                  "]&#125;</div></pre></td></tr></table></figure>
<h3 id="追踪链接项目"><a href="#追踪链接项目" class="headerlink" title="追踪链接项目"></a>追踪链接项目</h3><p>上边两个项目，<code>url</code>地址都是直接给出，现在需要将一个页面中的<code>url</code>地址提取出来，并依次进行处理。</p>
<p>取<code>http://www.dmoz.org/Computers/Programming/Languages/Python/</code>中<code>Related categories</code>部分的<code>url</code>地址。如图：</p>
<p><img src="http://7xkm8w.com1.z0.glb.clouddn.com/scrapy_dmoz2.png" alt="网站源码"></p>
<p>更改<code>tutorial/items.py</code>文件，加入<code>fromurl</code>，来表明这个信息来自哪个链接。如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="comment"># Define here the models for your scraped items</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># See documentation in:</span></div><div class="line"><span class="comment"># http://doc.scrapy.org/en/latest/topics/items.html</span></div><div class="line"></div><div class="line">import <span class="keyword">scrapy</span></div><div class="line"></div><div class="line">class DmozItem(<span class="keyword">scrapy.Item):</span></div><div class="line">    <span class="comment"># define the fields for your item here like:</span></div><div class="line">    <span class="comment"># name = scrapy.Field()</span></div><div class="line">    title = <span class="keyword">scrapy.Field()</span></div><div class="line">    link = <span class="keyword">scrapy.Field()</span></div><div class="line">    desc = <span class="keyword">scrapy.Field()</span></div><div class="line">    fromurl = <span class="keyword">scrapy.Field()</span></div></pre></td></tr></table></figure>
<p>在<code>tutorial/spiders</code>目录中创建<code>dmoz_spider.py</code>，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> tutorial.items <span class="keyword">import</span> DmozItem</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"dmoz"</span></div><div class="line">    allow_domains = [<span class="string">"dmoz.org"</span>]</div><div class="line">    start_urls = [</div><div class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/"</span></div><div class="line">    ]</div><div class="line"></div><div class="line"><span class="comment"># ----- 追踪链接----#</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line"><span class="comment"># 提取需要爬取的链接，产生(yield)一个请求， 该请求使用 parse_dir_contents() 方法作为回调函数, 用于最终产生我们想要的数据.。</span></div><div class="line">        <span class="keyword">print</span> response.url</div><div class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> response.xpath(<span class="string">'//div[@class="see-also-row"]/a/@href'</span>):</div><div class="line">            url = response.urljoin(link.extract())</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(url,callback=self.parse_dir_contents)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_dir_contents</span><span class="params">(self,response)</span>:</span></div><div class="line"><span class="comment"># 提取信息，放入item中。这边增加了一个fromurl，所以在items.py 文件中，也要加入。</span></div><div class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">'//*[@class="title-and-desc"]'</span>):</div><div class="line">            item = DmozItem()</div><div class="line">            item[<span class="string">'title'</span>] = sel.xpath(<span class="string">'a/div/text()'</span>).extract()</div><div class="line">            item[<span class="string">'link'</span>] = sel.xpath(<span class="string">'a/@href'</span>).extract()</div><div class="line">            item[<span class="string">'fromurl'</span>] = response.url</div><div class="line">            item[<span class="string">'desc'</span>] = sel.xpath(<span class="string">'div/text()'</span>).extract()</div><div class="line">            <span class="keyword">yield</span>  item</div></pre></td></tr></table></figure>
<p><strong>执行：</strong></p>
<p>进入项目的根目录，执行下列命令启动spider</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  <span class="keyword">scrapy </span>crawl dmoz -o items1.<span class="keyword">json </span>-t <span class="keyword">josn</span></div></pre></td></tr></table></figure>
<p>查看<code>items1.json</code>内容：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat items2.json | head -n <span class="number">5</span></div><div class="line">[</div><div class="line">&#123;<span class="string">"link"</span>: [<span class="string">"http://en.wikipedia.org/wiki/Bytecode"</span>], <span class="string">"title"</span>: [<span class="string">"Bytecode "</span>], <span class="string">"fromurl"</span>: <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Interpreted/Bytecode/"</span>, <span class="string">"desc"</span>: [<span class="string">"\r\n\t\t\t\r\n                                    Growing article, with links to many related topics. [Wikipedia, open content, GNU FDL]\r\n                                    "</span>, <span class="string">"\r\n                                  "</span>]&#125;,</div><div class="line">&#123;<span class="string">"link"</span>: [<span class="string">"http://www.parrotcode.org/"</span>], <span class="string">"title"</span>: [<span class="string">"Parrotcode "</span>], <span class="string">"fromurl"</span>: <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Interpreted/Bytecode/"</span>, <span class="string">"desc"</span>: [<span class="string">"\r\n\t\t\t\r\n                                    Home of Parrot Virtual Machine, made for dynamic languages, originally a target for Perl 6 compiler, hosts many language implementations in varied stages of completion: Tcl, Javascript, Ruby, Lua, Scheme, PHP, Python, Perl 6, APL, .NET. Open source.\r\n                                    "</span>, <span class="string">"\r\n                                  "</span>]&#125;,</div><div class="line">&#123;<span class="string">"link"</span>: [<span class="string">"http://vvm.lip6.fr/"</span>], <span class="string">"title"</span>: [<span class="string">"Virtual Virtual Machine "</span>], <span class="string">"fromurl"</span>: <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Interpreted/Bytecode/"</span>, <span class="string">"desc"</span>: [<span class="string">"\r\n\t\t\t\r\n                                    VVM overview, history, members, projects, realizations, publications.\r\n                                    "</span>, <span class="string">"\r\n                                  "</span>]&#125;,</div><div class="line">&#123;<span class="string">"link"</span>: [<span class="string">"http://os.inf.tu-dresden.de/L4/l3elan.html"</span>], <span class="string">"title"</span>: [<span class="string">"ELAN "</span>], <span class="string">"fromurl"</span>: <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Multiparadigm/"</span>, <span class="string">"desc"</span>: [<span class="string">"\r\n\t\t\t\r\n                                    Created 1974 by Technical University of Berlin group, as alternative to BASIC in teaching, for systematic programming, and related styles: top-down, bottom-up, recursive, modular, syntax-directed. Descriptions, brief resource list, documents. English, Deutsch.\r\n                                    "</span>, <span class="string">"\r\n                                  "</span>]&#125;,</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_Scrapy命令行工具]]></title>
      <url>http://yoursite.com/2016/12/15/Python-Scrapy%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p><code>scrapy.cfg</code>存放的目录认定是 <strong>项目的根目录</strong></p>
<p><code>scrapy</code> 针对不同目的提供了多个命令。</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scrapy startproject my_pro</div></pre></td></tr></table></figure>
<p><strong>有些<code>Scrapy</code>命令(比如<code>crawl</code>)要求必须在<code>Scrapy</code>项目中运行，有些则不用</strong></p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 全局命令（不需要在项目中执行）：</span></div><div class="line">startproject</div><div class="line">settings</div><div class="line">runspider</div><div class="line">shell</div><div class="line">fetch</div><div class="line">view</div><div class="line">version</div><div class="line"></div><div class="line"><span class="comment"># 项目命令（必须在项目中执行）：</span></div><div class="line">crawl<span class="built_in"></span></div><div class="line">check</div><div class="line">list</div><div class="line">edit</div><div class="line">parse</div><div class="line">genspider</div><div class="line">bench</div></pre></td></tr></table></figure>
<h3 id="命令注解"><a href="#命令注解" class="headerlink" title="命令注解"></a>命令注解</h3><hr>
<p><strong><code>startproject</code></strong></p>
<ul>
<li>语法:<code>scrapy startproject &lt;project_name&gt;</code></li>
<li>全局命令</li>
</ul>
<p>在 <code>project_name</code> 文件夹下创建一个名为 <code>project_name</code> 的<code>Scrapy</code>项目，如上边例子。</p>
<hr>
<p><strong><code>genspider</code></strong></p>
<ul>
<li>语法:<code>scrapy genspider [-t template] &lt;name&gt; &lt;domain&gt;</code></li>
<li>项目命令</li>
</ul>
<p>在当前项目中创建<code>spider</code>。</p>
<p>这仅仅是创建<code>spider</code>的一种快捷方法。该方法可以使用提前定义好的模板来生成<code>spider</code>。您也可以自己创建<code>spider</code>的源码文件。</p>
<p>查看模板的方法如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看模板</span></div><div class="line">$ scrapy genspider -l</div><div class="line">Available <span class="symbol">templates:</span></div><div class="line">  basic</div><div class="line">  crawl</div><div class="line">  csvfeed</div><div class="line">  xmlfeed</div><div class="line"></div><div class="line"><span class="comment"># 编辑模板</span></div><div class="line">$ scrapy genspider -d basic</div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">import scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> $<span class="title">classname</span>(<span class="title">scrapy</span>.<span class="title">Spider</span>):</span></div><div class="line">    name = <span class="string">"$name"</span></div><div class="line">    allowed_domains = [<span class="string">"$domain"</span>]</div><div class="line">    start_urls = (</div><div class="line">        <span class="string">'http://www.$domain/'</span>,</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(<span class="keyword">self</span>, response)</span></span>:</div><div class="line">        pass</div></pre></td></tr></table></figure>
<p>根据模板来生成<code>spider</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ scrapy genspider -t basic sina sina.com</div><div class="line"></div><div class="line">$ scrapy genspider baidu baidu.com</div><div class="line"></div><div class="line">$ scrapy genspider zhihu zhihu.com</div><div class="line"></div><div class="line">$ scrapy list</div><div class="line">baidu</div><div class="line">sina</div><div class="line">zhihu</div><div class="line"></div><div class="line">$ ls my_pro/spiders/</div><div class="line">baidu.py  baidu.pyc  __init__.py  __init__.pyc  sina.py  sina.pyc  zhihu.py  zhihu.pyc</div></pre></td></tr></table></figure>
<hr>
<p><strong><code>crawl</code></strong></p>
<ul>
<li>语法:<code>scrapy crawl &lt;spider&gt;</code></li>
<li>项目命令</li>
</ul>
<p>使用<code>spider</code>进行爬取</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 例子</span></div><div class="line"><span class="variable">$ </span>scrapy crawl myspider</div></pre></td></tr></table></figure>
<hr>
<p><strong><code>check</code></strong></p>
<ul>
<li>语法:<code>scrapy check [-l] &lt;spider&gt;</code></li>
<li>项目命令</li>
</ul>
<p>运行<code>contract</code>检查。</p>
<hr>
<p><strong><code>list</code></strong></p>
<ul>
<li>语法:<code>scrapy list</code></li>
<li>项目命令</li>
</ul>
<p>列出当前项目中所有可用的<code>spider</code>。每行输出一个<code>spider</code>。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 例子</span></div><div class="line">$ <span class="keyword">scrapy </span>list</div><div class="line"><span class="keyword">baidu</span></div><div class="line">sina</div><div class="line">zhihu</div></pre></td></tr></table></figure>
<hr>
<p><strong><code>edit</code></strong></p>
<ul>
<li>语法:<code>scrapy edit &lt;spider&gt;</code></li>
<li>项目命令</li>
</ul>
<p>使用 <code>EDITOR</code> 中设定的编辑器编辑给定的<code>spider</code></p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 例子</span></div><div class="line">$ scrapy <span class="keyword">edit</span> baidu</div></pre></td></tr></table></figure>
<hr>
<p><strong><code>fetch</code></strong></p>
<ul>
<li>语法:<code>scrapy fetch &lt;url&gt;</code></li>
<li>全局命令或项目命令，但结果不同</li>
</ul>
<p>使用<code>Scrapy</code>下载器(<code>downloader</code>)下载给定的<code>URL</code></p>
<p>该命令以<code>spider</code>下载页面的方式获取页面。例如，如果<code>spider</code>有 <code>USER_AGENT</code> 属性修改了 <code>User Agent</code>，该命令将会使用该属性。</p>
<p>因此，您可以使用该命令来查看<code>spider</code>如何获取某个特定页面。</p>
<p>该命令如果非项目中运行则会使用默认<code>Scrapy downloader</code>设定。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 例子：项目外边执行</span></div><div class="line"></div><div class="line">$ scrapy fetch --nolog --headers http://www.baidu.com</div><div class="line">&gt; Accept-Language: en</div><div class="line">&gt; Accept-Encoding: gzip,deflate</div><div class="line">&gt; Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*/*;q=<span class="number">0.8</span></div><div class="line">&gt; User-Agent: Scrapy/<span class="number">1.1</span><span class="number">.1</span> (+http://scrapy.org)</div><div class="line">&gt;</div><div class="line">&lt; Bdqid: <span class="number">0xfbf98a3b0000db32</span></div><div class="line"><span class="keyword">...</span></div><div class="line"><span class="keyword">...</span></div><div class="line"><span class="keyword">...</span></div><div class="line"></div><div class="line">$ scrapy fetch --nolog  http://www.baidu.com</div><div class="line"><span class="keyword">...</span></div><div class="line"><span class="keyword">...</span></div><div class="line"><span class="keyword">...</span></div></pre></td></tr></table></figure>
<hr>
<p><strong><code>view</code></strong></p>
<ul>
<li>语法:<code>scrapy view &lt;url&gt;</code></li>
<li>全局命令</li>
</ul>
<p>在浏览器中打开给定的<code>URL</code>，并以<code>Scrapy spider</code>获取到的形式展现。 有些时候<code>spider</code>获取到的页面和普通用户看到的并不相同。 因此该命令可以用来检查<code>spider</code>所获取到的页面，并确认这是您所期望的。</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scrapy <span class="keyword">view</span> http:<span class="comment">//www.baidu.com</span></div></pre></td></tr></table></figure>
<hr>
<p><strong><code>shell</code></strong></p>
<ul>
<li>语法:<code>scrapy shell [url]</code></li>
<li>全局命令</li>
</ul>
<p>以给定的<code>URL</code>(如果给出)或者空(没有给出<code>URL</code>)启动<code>Scrapy shell</code></p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> scrapy shell</div><div class="line"><span class="symbol">$</span> scrapy shell http:<span class="comment">//www.baidu.com</span></div></pre></td></tr></table></figure>
<hr>
<p><strong><code>parse</code></strong></p>
<ul>
<li>语法:<code>scrapy parse &lt;url&gt; [options]</code></li>
<li>全局命令</li>
</ul>
<p>获取给定的<code>URL</code>并使用相应的<code>spider</code>分析处理。如果您提供 <code>--callback</code> 选项，则使用<code>spider</code>的该方法处理，否则使用 <code>parse</code> 。</p>
<hr>
<p><strong><code>settings</code></strong></p>
<ul>
<li>语法:<code>scrapy settings [options]</code></li>
<li>全局命令</li>
</ul>
<p>获取<code>Scrapy</code>的设定</p>
<p>在项目中运行时，该命令将会输出项目的设定值，否则输出<code>Scrapy</code>默认设定。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">scrapy </span>settings --get <span class="keyword">BOT_NAME</span></div><div class="line"><span class="keyword">scrapybot</span></div><div class="line">$ <span class="keyword">scrapy </span>settings --get DOWNLOAD_DELAY</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<hr>
<p><strong><code>runspider</code></strong></p>
<ul>
<li>语法:<code>scrapy runspider &lt;spider_file.py&gt;</code></li>
<li>全局命令</li>
</ul>
<p>在未创建项目的情况下，运行一个编写在<code>Python</code>文件中的<code>spider</code>。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>scrapy runspider first_mod.py</div></pre></td></tr></table></figure>
<hr>
<p><strong><code>bench</code></strong></p>
<ul>
<li>语法:<code>scrapy bench</code></li>
<li>全局命令</li>
</ul>
<p><code>Scrapy</code>提供了一个简单的性能测试工具。其创建了一个本地<code>HTTP</code>服务器，并以最大可能的速度进行爬取。 该测试性能工具目的是测试<code>Scrapy</code>在您的硬件上的效率，来获得一个基本的底线用于对比。 其使用了一个简单的<code>spider</code>，仅跟进链接，不做任何处理。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>scrapy bench</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_网络爬虫初识]]></title>
      <url>http://yoursite.com/2016/12/15/Python-%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%88%9D%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>简单的下拉一个网页</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"> </div><div class="line">response = urllib2.urlopen(<span class="string">"http://120.26.45.230/dis/forum.php"</span>)</div><div class="line"><span class="keyword">print</span> response.read()</div></pre></td></tr></table></figure>
<p>urlopen一般接受三个参数,<code>url</code>、<code>date</code>、<code>timeout</code></p>
<ul>
<li><code>url</code>:请求的 URL</li>
<li><code>data</code>:访问 URL 时要传送的数据，默认是<code>none</code></li>
<li><code>timeout</code>:这是超时时间，默认是<code>socket._GLOBAL_DEFAULT_TIMEOUT</code></li>
</ul>
<p><strong>构造 Request</strong>:</p>
<p>和上边运行结果一样，中间多了一个<code>request</code>对象，逻辑上更清晰</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">request = urllib2.Request(<span class="string">"http://120.26.45.230/dis/forum.php"</span>)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"><span class="keyword">print</span> response.read()</div></pre></td></tr></table></figure>
<p>在服务器上看nginx 的访问日志是：</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">120.26.42.23</span> - - <span class="string">[29/Jun/2016:17:30:58 +0800]</span> <span class="string">"<span class="keyword">GET</span> /dis/forum.php HTTP/1.1"</span> <span class="number">200</span> <span class="number">12964</span> <span class="string">"-"</span> <span class="string">"Python-urllib/2.7"</span></div></pre></td></tr></table></figure>
<h3 id="POST、GET-数据传送"><a href="#POST、GET-数据传送" class="headerlink" title="POST、GET 数据传送"></a>POST、GET 数据传送</h3><p>大部分网站是动态页面，需要动态传递参数，如登录网站的时候。</p>
<p>数据传送分为POST和GET两种方式，两种方式有什么区别呢？</p>
<p>最重要的区别是GET方式是直接以链接形式访问，链接中包含了所有的参数，当然如果包含了密码的话是一种不安全的选择，不过你可以直观地看到自己提交了什么内容。POST则不会在网址上显示所有的参数，不过如果你想直接查看提交了什么就不太方便了，大家可以酌情选择。</p>
<p><strong>POST 方式</strong></p>
<p>下边方式只是介绍 POST 和 GET 方式，可能会被屏蔽掉，因为没有 headers 信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">values = &#123;<span class="string">"username"</span>:<span class="string">"1016903103@qq.com"</span>,<span class="string">"password"</span>:<span class="string">"XXXX"</span>&#125;</div><div class="line">data = urllib.urlencode(values) </div><div class="line">url = <span class="string">"https://passport.csdn.net/account/login?from=http://my.csdn.net/my/mycsdn"</span></div><div class="line">request = urllib2.Request(url,data)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"><span class="keyword">print</span> response.read()</div></pre></td></tr></table></figure>
<p><strong>GET 方式</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">values=&#123;&#125;</div><div class="line">values[<span class="string">'username'</span>] = <span class="string">"1016903103@qq.com"</span></div><div class="line">values[<span class="string">'password'</span>]=<span class="string">"XXXX"</span></div><div class="line">data = urllib.urlencode(values) </div><div class="line">url = <span class="string">"http://passport.csdn.net/account/login"</span></div><div class="line">geturl = url + <span class="string">"?"</span>+data</div><div class="line">request = urllib2.Request(geturl)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"><span class="keyword">print</span> response.read()</div></pre></td></tr></table></figure>
<h3 id="设置-Headers"><a href="#设置-Headers" class="headerlink" title="设置 Headers"></a>设置 Headers</h3><p>有些网站会有安全策略，会过滤 Headers，比如上边的访问肯定会被屏蔽。</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">120.26.42.23</span> - - <span class="string">[29/Jun/2016:17:30:58 +0800]</span> <span class="string">"<span class="keyword">GET</span> /dis/forum.php HTTP/1.1"</span> <span class="number">200</span> <span class="number">12964</span> <span class="string">"-"</span> <span class="string">"Python-urllib/2.7"</span></div></pre></td></tr></table></figure>
<p>设置 headers 中的 agent。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line"><span class="comment"># 指定访问的 url 地址</span></div><div class="line">url = <span class="string">"http://120.26.45.230/dis/forum.php"</span></div><div class="line"></div><div class="line"><span class="comment"># 设置头信息中的请求agent</span></div><div class="line">user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></div><div class="line"></div><div class="line"><span class="comment"># 用户名和密码，如果不用可以省略</span></div><div class="line">values = &#123;<span class="string">'username'</span>:<span class="string">'admin'</span>,<span class="string">'password'</span>:<span class="string">'zhaimi'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># User-Agent 设置agent 信息，Referer 来对付防盗链</span></div><div class="line">headers = &#123;<span class="string">'User-Agent'</span>:user_agent,<span class="string">'Referer'</span>:<span class="string">'http://www.zhihu.com/articles'</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 利用urllib的urlencode方法将字典编码</span></div><div class="line">data = urllib.urlencode(values)</div><div class="line"></div><div class="line"><span class="comment"># 请求信息，如果不用密码和用户名，可以改成request = urllib2.Request(url,"",headers)</span></div><div class="line">request = urllib2.Request(url,data,headers)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"><span class="keyword">print</span> response.read()</div></pre></td></tr></table></figure>
<h3 id="Proxy-代理的设置"><a href="#Proxy-代理的设置" class="headerlink" title="Proxy 代理的设置"></a>Proxy 代理的设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">enable_proxy = <span class="keyword">True</span></div><div class="line">proxy_handler = urllib2.ProxyHandler(&#123;<span class="string">"http"</span> : <span class="string">'http://some-proxy.com:8080'</span>&#125;)</div><div class="line">null_proxy_handler = urllib2.ProxyHandler(&#123;&#125;)</div><div class="line"><span class="keyword">if</span> enable_proxy:</div><div class="line">    opener = urllib2.build_opener(proxy_handler)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    opener = urllib2.build_opener(null_proxy_handler)</div><div class="line">urllib2.install_opener(opener)</div></pre></td></tr></table></figure>
<h3 id="下载，比如一个图片，或者一个其他的文件"><a href="#下载，比如一个图片，或者一个其他的文件" class="headerlink" title="下载，比如一个图片，或者一个其他的文件"></a>下载，比如一个图片，或者一个其他的文件</h3><p>使用<code>urllib.urlretrieve</code>方法.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line">url = <span class="string">"http://nginx.org/download/nginx-1.8.1.tar.gz"</span></div><div class="line">urllib.urlretrieve(url,<span class="string">"nginx.tar.gz"</span>)</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_网络爬虫_cookies操作]]></title>
      <url>http://yoursite.com/2016/12/15/Python-%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-cookies%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>摘抄自 <a href="http://cuiqingcai.com/968.html" target="_blank" rel="external">http://cuiqingcai.com/968.html</a></p>
</blockquote>
<h3 id="1、Opener"><a href="#1、Opener" class="headerlink" title="1、Opener"></a>1、Opener</h3><p>当你获取一个URL你使用一个<code>opener</code>(一个urllib2.OpenerDirector的实例)。在前面，我们都是使用的默认的opener，也就是urlopen。它是一个特殊的opener，可以理解成opener的一个特殊实例，传入的参数仅仅是<code>url</code>，<code>data</code>，<code>timeout</code>。</p>
<p>如果我们需要用到Cookie，只用这个opener是不能达到目的的，所以我们需要创建更一般的opener来实现对Cookie的设置。</p>
<h3 id="2、Cookieslib"><a href="#2、Cookieslib" class="headerlink" title="2、Cookieslib"></a>2、Cookieslib</h3><p><code>cookielib</code> 模块的主要作用是提供可存储 <code>cookies</code> 的对象，以便于 <code>urllib2</code> 模块配合使用来访问 Internet 资源，我们可以利用本模块的 <code>CookieJar</code> 类的对象来捕获 <code>cookie</code> 并在后续连接请求时重新发送，可实现模拟登陆的功能。</p>
<p>该模块的主要对象有<code>CookieJar</code>、<code>FileCookieJar</code>、<code>MozillaCookieJar</code>、<code>LWPCookieJar</code></p>
<p>他们的关系：<code>CookieJar</code> —-派生—-&gt;<code>FileCookieJar</code>  —-派生—–&gt;<code>MozillaCookieJar</code>和<code>LWPCookieJar</code></p>
<p><strong>下边会从获取cookies开始，一步步实现模拟登陆</strong></p>
<h4 id="1-、获取cookies并保存到变量中"><a href="#1-、获取cookies并保存到变量中" class="headerlink" title="1)、获取cookies并保存到变量中"></a>1)、获取<code>cookies</code>并保存到变量中</h4><p>首先，我们先利用CookieJar对象实现获取cookie的功能，存储到变量中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> cookielib</div><div class="line"><span class="comment"># ----------------获取 cookies 保存到变量---------------</span></div><div class="line"><span class="comment"># 声明一个 CookiesJar 对象实例来保存 cookies</span></div><div class="line">cookie = cookielib.CookieJar()</div><div class="line"></div><div class="line"><span class="comment"># 利用 urllib2库的HTTPCookieProcessor对象来创建 cookie 处理器</span></div><div class="line">hander = urllib2.HTTPCookieProcessor(cookie)</div><div class="line"></div><div class="line"><span class="comment"># 通过 hander 来构建 opener</span></div><div class="line">opener = urllib2.build_opener(hander)</div><div class="line"></div><div class="line"><span class="comment"># 添加 header</span></div><div class="line">opener.addheaders = [(<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"</span>)]</div><div class="line"></div><div class="line"><span class="comment"># 此处 open 方法和 urllib2的 urlopen 方法一样,也可以传入 request</span></div><div class="line">response1 = opener.open(<span class="string">'http://www.baidu.com'</span>)</div><div class="line"></div><div class="line"><span class="comment"># response 变量保存网页信息,cookie 变量保存 cookies 信息</span></div><div class="line"><span class="keyword">print</span> cookie</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cookie:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Name = "</span> + i.name</div><div class="line">    <span class="keyword">print</span> <span class="string">"Value = "</span> + i.value</div></pre></td></tr></table></figure>
<h4 id="2-、获取cookies保存到文件中"><a href="#2-、获取cookies保存到文件中" class="headerlink" title="2)、获取cookies保存到文件中"></a>2)、获取<code>cookies</code>保存到文件中</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> urllib2</div><div class="line"><span class="built_in">import</span> cookielib</div><div class="line"><span class="comment"># ----------------获取 cookies 保存到文件--------------</span></div><div class="line"><span class="comment">#设置保存cookie的文件，同级目录下的cookie.txt</span></div><div class="line"><span class="attr">filename</span> = 'cookie.txt'</div><div class="line"></div><div class="line"><span class="comment"># 声明一个MozillaCookieJar对象实例来保存cookie，之后写入文件</span></div><div class="line"><span class="attr">cookie</span> = cookielib.MozillaCookieJar(filename)</div><div class="line"></div><div class="line"><span class="comment"># 利用urllib2库的HTTPCookieProcessor对象来创建cookie处理器</span></div><div class="line"><span class="attr">hander</span> = urllib2.HTTPCookieProcessor(cookie)</div><div class="line"></div><div class="line"><span class="comment"># 通过handler来构建opener</span></div><div class="line"><span class="attr">opener</span> = urllib2.build_opener(hander)</div><div class="line"></div><div class="line"><span class="comment"># 添加 header</span></div><div class="line">opener.<span class="attr">addheaders</span> = [(<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"</span>)]</div><div class="line"></div><div class="line"><span class="comment"># 创建一个请求，原理同urllib2的urlopen</span></div><div class="line"><span class="attr">response2</span> = opener.open(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 保存cookie到文件</span></div><div class="line">cookie.save(<span class="attr">ignore_discard=True,ignore_expires=True)</span></div></pre></td></tr></table></figure>
<h4 id="3-、从文件中获取cookies并访问网站"><a href="#3-、从文件中获取cookies并访问网站" class="headerlink" title="3)、从文件中获取cookies并访问网站"></a>3)、从文件中获取<code>cookies</code>并访问网站</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> cookielib</div><div class="line"><span class="comment"># -----------------从文件中获取并访问-------------------</span></div><div class="line"><span class="comment"># 创建 MozillaCookieJar 实例对象</span></div><div class="line">cookie = cookielib.MozillaCookieJar()</div><div class="line"></div><div class="line"><span class="comment"># 从文件中读取 cookies 内容到变量</span></div><div class="line">cookie.load(<span class="string">'cookie.txt'</span>,ignore_discard=<span class="keyword">True</span>,ignore_expires=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># 创建请求的 request</span></div><div class="line">req = urllib2.Request(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 利用urllib2库的HTTPCookieProcessor对象来创建cookie处理器</span></div><div class="line">hander = urllib2.HTTPCookieProcessor(cookie)</div><div class="line"></div><div class="line"><span class="comment"># 通过handler来构建opener</span></div><div class="line">opener = urllib2.build_opener(hander)</div><div class="line"></div><div class="line"><span class="comment"># 添加 header</span></div><div class="line">opener.addheaders = [(<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"</span>)]</div><div class="line"></div><div class="line">response3 = opener.open(req)</div><div class="line"><span class="keyword">print</span> response3.read()</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_模拟登录新浪微博]]></title>
      <url>http://yoursite.com/2016/12/15/Python-%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在极客学院中看了一个关于爬虫的视频，然后自己实现一遍，并做此记录。 视频链接：<a href="http://www.jikexueyuan.com/course/995_4.html?ss=1" target="_blank" rel="external">http://www.jikexueyuan.com/course/995_4.html?ss=1</a></p>
</blockquote>
<p>使用<code>requests</code>模块，<code>post</code>需要的表单数据来登录新浪微博手机端（手机端简单点。。），并访问登录后的页面。该方法是定向页面的爬取，如果要批量爬取，使用框架会好一些。</p>
<h3 id="确认登录所需的表单数据"><a href="#确认登录所需的表单数据" class="headerlink" title="确认登录所需的表单数据"></a>确认登录所需的表单数据</h3><p><code>chrome</code>浏览器中访问<code>http://weibo.cn/pub/</code>,点击登录，会进入手机端登录页面。登录微博，并通过开发者工具抓包来分析提交的<code>form</code>信息。如下图：</p>
<p>图1：登录页面(有验证码)</p>
<p><img src="http://7xkm8w.com1.z0.glb.clouddn.com/weibologin.png" alt="微博登录页面"></p>
<p>图2：打开开发者工具，输入账号密码登录，看需要提交的<code>form</code>信息</p>
<p><img src="http://7xkm8w.com1.z0.glb.clouddn.com/weibokaifazhe.png" alt="开发者工具"></p>
<p>根据图2，发现需要提交的<code>form</code>信息有下边几个：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">mobile:</span>login_name				<span class="meta">#用户名</span></div><div class="line"><span class="symbol">password_8891:</span>login_password	<span class="meta">#密码（password_8891 这个每次都变）</span></div><div class="line"><span class="symbol">code:</span>fcjf						<span class="meta">#验证码</span></div><div class="line"><span class="symbol">remember:</span>on						<span class="meta">#是否记住登录状态，相当于图1中选中的’记住登录状态‘选项</span></div><div class="line"><span class="symbol">backURL:</span>http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fweibo.cn%<span class="number">2</span>F	<span class="meta">#登录成功后返回的页面</span></div><div class="line"><span class="symbol">backTitle:</span>微博</div><div class="line"><span class="symbol">tryCount:</span>						<span class="meta">#尝试的登录次数</span></div><div class="line"><span class="symbol">vk:</span><span class="number">8891</span>_ea7c_2358890024			<span class="meta"># vk（每次登录可能会不一样）</span></div><div class="line"><span class="symbol">capId:</span><span class="number">2</span>_5cb16cf8473df571		<span class="meta"># capId</span></div><div class="line"><span class="symbol">submit:</span>登录</div></pre></td></tr></table></figure>
<p><code>form</code>表单中不固定，需要我们自己取的表单项有<code>password_8891</code>、<code>code</code>、<code>vk</code>、<code>capId</code>。这些值实际上是从图1中带过来的，使用浏览器打开图1的源码，会发现这些选项。如下图图3：</p>
<p>图3：图1登录页面的部分源码<br><img src="http://7xkm8w.com1.z0.glb.clouddn.com/weibo03.png" alt="登录页面源码"><br>基本上我们可以从上图获取到<code>form</code>表单中所需的数据。使用<code>lxml</code>模块来分离出这些信息来。</p>
<h3 id="处理验证码"><a href="#处理验证码" class="headerlink" title="处理验证码"></a>处理验证码</h3><p>在表单信息中，有一个<code>code</code>的表单项，是图1中的验证码，自动识别验证码现在还不会，只能用人肉识别，处理方式是在图1的源码中取得验证码的<code>url</code>地址，并保存到本地，然后手动输入。</p>
<h3 id="登录login页面"><a href="#登录login页面" class="headerlink" title="登录login页面"></a>登录login页面</h3><p>使用<code>requests</code>模块登录页面，如果我们想访问一些登录后才能访问的页面，有两种方式。</p>
<p>方法一：一开始就访问目标页面，会跳转到登录页面，当我们成功登录后，会根据表单中的<code>backURL</code>自动跳转到目标页面，从而获取我们需要数据。</p>
<p>方法二：使用<code>requests</code>模块的<code>session</code>保持功能，直接请求登录页面，成功后，因为有cookies，所以我们可以直接访问我们需要的页面。这里使用这种方式。</p>
<h3 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 刚学不久，比较low</span></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line"><span class="comment"># 使用requests的会话方法</span></div><div class="line">s = requests.session()</div><div class="line"></div><div class="line"><span class="comment"># 定义登录页面和最终要访问的页面（需要登录才能访问）</span></div><div class="line">url_login = <span class="string">"http://login.weibo.cn/login/"</span></div><div class="line">url_final = <span class="string">"http://weibo.cn/msg/"</span></div><div class="line"></div><div class="line"><span class="comment"># 定义自己微博的账户和密码</span></div><div class="line">login_name = <span class="string">"..."</span>	</div><div class="line">login_password = <span class="string">"..."</span></div><div class="line"></div><div class="line"><span class="comment"># 如果使用第一种方式，可以这样请求</span></div><div class="line"><span class="comment">#res = requests.get(url_final).content</span></div><div class="line"></div><div class="line"><span class="comment"># 请求登录页面，获取上面图3所示的源码</span></div><div class="line">res = s.get(url_login).content</div><div class="line"></div><div class="line"><span class="comment"># 使用xpath的方式分离表单信息</span></div><div class="line">html = etree.HTML(res)</div><div class="line">password = html.xpath(<span class="string">'//input[@type="password"]/@name'</span>)[<span class="number">0</span>]</div><div class="line">backURL = html.xpath(<span class="string">'//input[@name="backURL"]/@value'</span>)[<span class="number">0</span>]</div><div class="line">vk = html.xpath(<span class="string">'//input[@name="vk"]/@value'</span>)[<span class="number">0</span>]</div><div class="line">capID =  html.xpath(<span class="string">'//input[@name="capId"]/@value'</span>)[<span class="number">0</span>]</div><div class="line">codeurl = html.xpath(<span class="string">'//img/@src'</span>)[<span class="number">0</span>]</div><div class="line">action = html.xpath(<span class="string">'//form/@action'</span>)[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment"># 拼接 Request URL，用来提交表单，实现登录</span></div><div class="line">post_url = url_login + action</div><div class="line"></div><div class="line"><span class="comment"># 下载验证码到当前目录，并手动输入验证码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_code</span><span class="params">(codeurl)</span>:</span></div><div class="line">    urllib.urlretrieve(codeurl,<span class="string">"code.jpg"</span>)</div><div class="line">    code = raw_input(<span class="string">"please input the code: "</span>)</div><div class="line">    <span class="keyword">return</span> code</div><div class="line">code = download_code(codeurl)</div><div class="line"></div><div class="line"><span class="comment"># 定义表单信息</span></div><div class="line">post_data = &#123;</div><div class="line">    <span class="string">"mobile"</span> : login_name,</div><div class="line">    password : login_password,</div><div class="line">    <span class="string">"code"</span> : code,</div><div class="line">    <span class="string">"remember"</span> : <span class="string">"on"</span>,</div><div class="line">    <span class="string">"backURL"</span> : backURL,</div><div class="line">    <span class="string">"backTitle"</span> : <span class="string">u"微博"</span>,</div><div class="line">    <span class="string">"tryCount"</span> : <span class="string">""</span>,</div><div class="line">    <span class="string">"vk"</span> : vk,</div><div class="line">    <span class="string">"capId"</span> : capID,</div><div class="line">    <span class="string">"submit"</span> : <span class="string">u"登录"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 第一种方法，可以使用，返回的源码就是目标地址的源码</span></div><div class="line"><span class="comment">#do_post = requests.post(post_url,data=post_data).content</span></div><div class="line"></div><div class="line"><span class="comment"># 提交表单，完成登录</span></div><div class="line">do_post = s.post(post_url,data=post_data).content</div><div class="line"></div><div class="line"><span class="comment"># 判断返回的页面是否是验证码错误的页面</span></div><div class="line"><span class="keyword">if</span> <span class="string">"验证码错误"</span> <span class="keyword">in</span> do_post:</div><div class="line">    <span class="keyword">print</span> <span class="string">"验证码输入错误"</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">	<span class="comment"># 请求最终页面</span></div><div class="line">    <span class="keyword">print</span> s.get(url_final).content</div><div class="line">    </div><div class="line"></div><div class="line"><span class="comment"># 后续可以写各种匹配规则，来匹配出需要的信息。</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_request模块]]></title>
      <url>http://yoursite.com/2016/12/15/Python-request%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>官方文档链接 ： <a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external">http://docs.python-requests.org/en/master/</a></p>
</blockquote>
<p><code>requests</code>模块</p>
<h3 id="最简单的方式请求页面"><a href="#最简单的方式请求页面" class="headerlink" title="最简单的方式请求页面"></a>最简单的方式请求页面</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import requests</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.get(<span class="string">"http://www.baidu.com"</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; r.text</div></pre></td></tr></table></figure>
<p>其他的<code>HTTP</code>请求类型：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.post(<span class="string">"http://httpbin.org/post"</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.put(<span class="string">"http://httpbin.org/put"</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.delete(<span class="string">"http://httpbin.org/delete"</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.head(<span class="string">"http://httpbin.org/get"</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.options(<span class="string">"http://httpbin.org/get"</span>)</div></pre></td></tr></table></figure>
<h3 id="带有参数的请求页面"><a href="#带有参数的请求页面" class="headerlink" title="带有参数的请求页面"></a>带有参数的请求页面</h3><p>有时需要为 URL 的查询字符串(<code>query string</code>)传递某种数据，<code>requests</code>允许使用<code>params</code>关键字参数，并以一个字典来提供这些参数。举例如果想传递<code>key1=value1</code>和<code>key2=value2</code>到<code>httpbin.org/get</code>，可以使用如下方式：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; payload = &#123;<span class="string">"key1"</span><span class="symbol">:<span class="string">"value1"</span></span>,<span class="string">"key2"</span><span class="symbol">:<span class="string">"value2"</span></span>&#125;  <span class="comment"># 定义传递的参数</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.get(<span class="string">"http://httpbin.org/get"</span>,params=payload)  <span class="comment"># 请求</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print r.text</div><div class="line">&#123;</div><div class="line">  <span class="string">"args"</span>: &#123;</div><div class="line">    <span class="string">"key1"</span>: <span class="string">"value1"</span>,</div><div class="line">    <span class="string">"key2"</span>: <span class="string">"value2"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"headers"</span>: &#123;</div><div class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>,</div><div class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</div><div class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>,</div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.10.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"origin"</span>: <span class="string">"180.168.112.222"</span>,</div><div class="line">  <span class="string">"url"</span>: <span class="string">"http://httpbin.org/get?key2=value2&amp;key1=value1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="读取响应内容"><a href="#读取响应内容" class="headerlink" title="读取响应内容"></a>读取响应内容</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.get(<span class="string">"http://www.jianshu.com"</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print r.text <span class="comment"># 可以读取到简书首页的html源码</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; r.encoding <span class="comment"># requests 根据头信息推测的编码</span></div><div class="line"><span class="string">'utf-8'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; r.encoding = <span class="string">'ISO-8859-1'</span> <span class="comment"># 改变编码，并重新读取刚刚的页面</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print r.text <span class="comment"># 会发现中文部分乱码</span></div></pre></td></tr></table></figure>
<p><strong>关于编码</strong>：<code>requests</code>会自动解码来自服务器的内容，大多数的<code>unicode</code>字符集都能被无缝的解码，请求发出后，<code>requests</code>会基于<code>HTTP</code>头部对响应的编码做出推测。<code>r.encoding</code>可以显示目前使用的编码，也可以赋值为其他的编码。</p>
<h3 id="二进制响应内容"><a href="#二进制响应内容" class="headerlink" title="二进制响应内容"></a>二进制响应内容</h3><p>可以以字节的方式访问请求响应体，对于非文本请求，<code>requests</code>会自动解码<code>gzip</code>和<code>deflate</code>传输编码的响应数据。</p>
<h3 id="JSON-响应内容"><a href="#JSON-响应内容" class="headerlink" title="JSON 响应内容"></a>JSON 响应内容</h3><p><code>requests</code>中也有一个内置的<code>JSON</code>解码器，<code>r.json()</code>来处理<code>JSON</code>数据。</p>
<h3 id="原始响应内容"><a href="#原始响应内容" class="headerlink" title="原始响应内容"></a>原始响应内容</h3><p>在罕见的情况下，你可能想获取来自服务器的原始套接字响应，那么你可以访问<code>r.raw</code>，并确保初始请求中设置了<code>stream=True</code>。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; r = requests.get(<span class="string">'https://github.com/timeline.json'</span>, stream=True)</div><div class="line">&gt;&gt;&gt; r<span class="selector-class">.raw</span></div><div class="line">&lt;requests<span class="selector-class">.packages</span><span class="selector-class">.urllib3</span><span class="selector-class">.response</span><span class="selector-class">.HTTPResponse</span> <span class="selector-tag">object</span> at <span class="number">0</span>x101194810&gt;</div><div class="line">&gt;&gt;&gt; r<span class="selector-class">.raw</span><span class="selector-class">.read</span>(<span class="number">10</span>)</div><div class="line"><span class="string">'\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03'</span></div></pre></td></tr></table></figure>
<h3 id="定制-headers"><a href="#定制-headers" class="headerlink" title="定制 headers"></a>定制 headers</h3><p>为请求添加<code>HTTP</code>头部，只要简单地传递一个<code>dict</code>给<code>headers</code>参数就可以了</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; headers = &#123;<span class="string">"user-agent"</span><span class="symbol">:<span class="string">"hoho"</span></span>&#125;</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.get(<span class="string">"http://httpbin.org/get"</span>,headers = headers)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print r.text</div><div class="line">&#123;</div><div class="line">  <span class="string">"args"</span>: &#123;&#125;,</div><div class="line">  <span class="string">"headers"</span>: &#123;</div><div class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>,</div><div class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</div><div class="line">    <span class="string">"Host"</span>: <span class="string">"www.httpbin.org"</span>,</div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"hoho"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"origin"</span>: <span class="string">"180.168.112.222"</span>,</div><div class="line">  <span class="string">"url"</span>: <span class="string">"http://www.httpbin.org/get"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意: 定制 header 的优先级低于某些特定的信息源，例如：</p>
<ul>
<li>如果在<code>.netrc</code>中设置了用户认证信息，使用<code>headers=</code>设置的授权就不会生效。而如果设置了 <code>auth=</code>参数，<code>.netrc</code>的设置就无效了。</li>
<li>如果被重定向到别的主机，授权<code>header</code>就会被删除。</li>
<li>代理授权<code>header</code>会被<code>URL</code>中提供的代理身份覆盖掉。</li>
<li>在我们能判断内容长度的情况下,<code>header</code>的<code>Content-Length</code>会被改写。</li>
</ul>
<h3 id="POST-请求发送数据"><a href="#POST-请求发送数据" class="headerlink" title="POST 请求发送数据"></a>POST 请求发送数据</h3><p>通常要发送一些编码为表单形式的数据，可以讲一个字典传递给<code>data</code>参数，数据字典在发出请求时会自动编码为表单形式：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; r = requests.post(<span class="string">"http://httpbin.org/post"</span>, data=payload)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print(r.text)</div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  <span class="string">"form"</span>: &#123;</div><div class="line">    <span class="string">"key2"</span>: <span class="string">"value2"</span>,</div><div class="line">    <span class="string">"key1"</span>: <span class="string">"value1"</span></div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有时候我们需要传送的信息不是表单形式的，需要我们传JSON格式的数据过去，所以我们可以用 json.dumps() 方法把表单数据序列化。</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="keyword">import</span> json</div><div class="line">&gt;&gt;&gt; <span class="keyword">import</span> requests</div><div class="line"></div><div class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</div><div class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>, <span class="keyword">data</span>=json.dumps(payload))</div><div class="line">print r.<span class="keyword">text</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_random模块]]></title>
      <url>http://yoursite.com/2016/12/15/Python-random%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>摘自 <a href="http://my.oschina.net/cuffica/blog/33336" target="_blank" rel="external">http://my.oschina.net/cuffica/blog/33336</a></p>
</blockquote>
<p><code>random</code>用于生成随机数，可以随机生成数字或者选择字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</div></pre></td></tr></table></figure>
<hr>
<ul>
<li><code>random.random</code> 生成一个随机的浮点数，大小在 0.0 到 1.0 之间</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()</div><div class="line"><span class="number">0.6754760175030391</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li><code>random.uniform(a,b)</code> 用于生成一个指定范围内的随机浮点数，a,b为上下限，只要a!=b,就会生成介于两者之间的一个浮点数，若a=b，则生成的浮点数就是a</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.uniform(<span class="number">1</span>,<span class="number">5</span>)</div><div class="line"><span class="number">3.5512959593743996</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.uniform(<span class="number">5</span>,<span class="number">1</span>)</div><div class="line"><span class="number">1.7146358802022172</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.uniform(<span class="number">5</span>,<span class="number">5</span>)</div><div class="line"><span class="number">5.0</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li><code>random.randint(a,b)</code> 用于生成一个指定范围内的整数，a为下限，b为上限，生成的随机整数a&lt;=n&lt;=b;若a=b，则n=a；若a&gt;b，报错</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">10</span>)</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">10</span>,<span class="number">1</span>) <span class="comment"># 报错</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"/usr/lib/python2.7/random.py"</span>, line <span class="number">240</span>, <span class="keyword">in</span> randint</div><div class="line">    <span class="keyword">return</span> self.randrange(a, b+<span class="number">1</span>)</div><div class="line">  File <span class="string">"/usr/lib/python2.7/random.py"</span>, line <span class="number">216</span>, <span class="keyword">in</span> randrange</div><div class="line">    <span class="keyword">raise</span> ValueError, <span class="string">"empty range for randrange() (%d,%d, %d)"</span> % (istart, istop, width)</div><div class="line">ValueError: empty range <span class="keyword">for</span> randrange() (<span class="number">10</span>,<span class="number">2</span>, <span class="number">-8</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">1</span>)</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li><code>random.randrange([start], stop [,step])</code> 从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">10</span>,<span class="number">100</span>) <span class="comment">#输出为10到100间的任意数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">10</span>,<span class="number">100</span>,<span class="number">4</span>) <span class="comment">#输出为10到100内以4递增的序列[10,14,18,22...]</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(range(<span class="number">10</span>,<span class="number">100</span>,<span class="number">4</span>)) <span class="comment">#输出在结果上与上一条等效</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li><code>random.choice(sequence)</code> 从序列中获取一个随机元素，参数sequence表示一个有序类型，并不是一种特定类型，泛指list，tuple，字符串等</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(range(<span class="number">10</span>)) <span class="comment">#输出0到10内随机整数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(range(<span class="number">10</span>,<span class="number">100</span>,<span class="number">2</span>)) <span class="comment">#输出随机值[10,12,14,16...]</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(<span class="string">"I love python"</span>) <span class="comment">#输出随机字符I,o,v,p,y...</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice((<span class="string">"I love python"</span>)) <span class="comment">#同上</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="string">"I love python"</span>]) <span class="comment">#输出“I love python”</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(<span class="string">"I"</span>,<span class="string">"love"</span>,<span class="string">"python"</span>) <span class="comment">#Error</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice((<span class="string">"I"</span>,<span class="string">"love"</span>,<span class="string">"python"</span>)) <span class="comment">#输出随机字符串“I”，“love”，“python”</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="string">"I"</span>,<span class="string">"love"</span>,<span class="string">"python"</span>]) <span class="comment">#输出随机字符串“I”，“love”，“python”</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li><code>random.shuffle(x[,random])</code>  用于将一个列表中的元素打乱 </li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lis = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">"o"</span>,<span class="string">"b"</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; random.shuffle(lis)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print lis</div><div class="line">[<span class="string">'b'</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'o'</span>, <span class="number">2</span>]</div></pre></td></tr></table></figure>
<hr>
<ul>
<li><code>random.sample(sequence,k)</code> 从指定序列中随机获取k个元素作为一个片段返回，sample函数不会修改原有序列</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; print lis</div><div class="line">[<span class="string">'b'</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="string">'o'</span>, <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; random.sample(lis,<span class="number">3</span>)</div><div class="line">[<span class="string">'b'</span>, <span class="number">3</span>, <span class="string">'o'</span>]</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_psutil模块]]></title>
      <url>http://yoursite.com/2016/12/15/Python-psutil%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>下载</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">https:</span>//pypi.python<span class="meta">.org</span> 网站下载</div></pre></td></tr></table></figure>
<ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar xvf psutil-4.1.0.tar.gz</div><div class="line">$ psutil-4.1.0</div><div class="line">$ python setup.py install</div></pre></td></tr></table></figure>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>psutil 是一个跨平台库，能够轻松的实现获取系统运行的进程和系统利用率（包括cpu、内存、磁盘、网络等）信息。</p>
<h3 id="获取系统性能信息"><a href="#获取系统性能信息" class="headerlink" title="获取系统性能信息"></a>获取系统性能信息</h3><p>(1)  cpu 信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> psutil</div><div class="line">＃使用 cpu_times 方法获取CPU的完整信息</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_times()</div><div class="line">scputimes(user=<span class="number">29835.75</span>, nice=<span class="number">0.0</span>, system=<span class="number">18475.44</span>, idle=<span class="number">546295.5</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_times().user</div><div class="line"><span class="number">29851.7</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_times().nice</div><div class="line"><span class="number">0.0</span></div><div class="line"></div><div class="line"><span class="comment"># 指定方法变量 percpu=true ,显示所有逻辑cpu信息</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_times(percpu=<span class="keyword">True</span>)</div><div class="line">[scputimes(user=<span class="number">11854.24</span>, nice=<span class="number">0.0</span>, system=<span class="number">8223.53</span>, idle=<span class="number">128562.62</span>), scputimes(user=<span class="number">3587.42</span>, nice=<span class="number">0.0</span>, system=<span class="number">2143.94</span>, idle=<span class="number">142905.42</span>), scputimes(user=<span class="number">10573.42</span>, nice=<span class="number">0.0</span>, system=<span class="number">5857.35</span>, idle=<span class="number">132206.04</span>), scputimes(user=<span class="number">3817.91</span>, nice=<span class="number">0.0</span>, system=<span class="number">2248.85</span>, idle=<span class="number">142570.0</span>)]</div><div class="line"></div><div class="line">＃ 获取cpu逻辑个数，默认方法 logical=<span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_count()</div><div class="line"><span class="number">4</span></div><div class="line"></div><div class="line">＃ 获取cpu物理个数</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_count(logical=<span class="keyword">False</span>)</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<p>(2)  内存信息</p>
<blockquote>
<p>Linux系统的内存利用率信息设计total（内存总数）、used（已使用的内存数）、free（空闲内存数）、buffers（缓冲使用数）、cache（缓存使用数）、swap（交换分区使用数）等，分别使用<code>psutil.virtual_memory()</code>与<code>psutil.swap_memory()</code>方法获取。</p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; mem = psutil.virtual_memory()</div><div class="line">&gt;&gt;&gt; mem</div><div class="line">svmem(total=<span class="number">1043046400</span>, available=<span class="number">489234432</span>, percent=<span class="number">53.1</span>, used=<span class="number">973860864</span>, free=<span class="number">69185536</span>, active=<span class="number">649924608</span>, inactive=<span class="number">220930048</span>, buffers=<span class="number">105512960</span>, cached=<span class="number">314535936</span>)</div><div class="line">&gt;&gt;&gt; psutil.virtual_memory()</div><div class="line">svmem(total=<span class="number">1043046400</span>, available=<span class="number">489242624</span>, percent=<span class="number">53.1</span>, used=<span class="number">973860864</span>, free=<span class="number">69185536</span>, active=<span class="number">649924608</span>, inactive=<span class="number">220938240</span>, buffers=<span class="number">105521152</span>, cached=<span class="number">314535936</span>)</div><div class="line">&gt;&gt;&gt; psutil.virtual_memory().total</div><div class="line"><span class="number">1043046400</span></div><div class="line">&gt;&gt;&gt; psutil.virtual_memory().free</div><div class="line"><span class="number">68669440</span></div><div class="line">&gt;&gt;&gt; mem.free</div><div class="line"><span class="number">69185536</span></div><div class="line">&gt;&gt;&gt; psutil.swap_memory()</div><div class="line">sswap(total=<span class="number">0</span>, used=<span class="number">0</span>, free=<span class="number">0</span>, percent=<span class="number">0.0</span>, sin=<span class="number">0</span>, sout=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>(3) 磁盘信息</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># psutil.disk_partitions 获取磁盘完整信息</span></div><div class="line">&gt;&gt;&gt; psutil.disk_partitions()</div><div class="line">[sdiskpart(<span class="attr">device='/dev/xvda1',</span> <span class="attr">mountpoint='/',</span> <span class="attr">fstype='ext4',</span> <span class="attr">opts='rw,barrier=0')]</span></div><div class="line"></div><div class="line"><span class="comment"># psutil.disk_usage 获取分区（参数）的使用情况</span></div><div class="line">&gt;&gt;&gt; psutil.disk_usage('/')</div><div class="line">sdiskusage(<span class="attr">total=42273669120,</span> <span class="attr">used=3997454336,</span> <span class="attr">free=36128837632,</span> <span class="attr">percent=9.5)</span></div><div class="line"></div><div class="line"><span class="comment"># psutil.disk_io_counters 获取磁盘总的IO个数</span></div><div class="line">&gt;&gt;&gt; psutil.disk_io_counters()</div><div class="line">sdiskio(<span class="attr">read_count=73895,</span> <span class="attr">write_count=163753,</span> <span class="attr">read_bytes=1255839744,</span> <span class="attr">write_bytes=1650024448,</span> <span class="attr">read_time=470216,</span> <span class="attr">write_time=3454793,</span> <span class="attr">read_merged_count=268,</span> <span class="attr">write_merged_count=238305,</span> <span class="attr">busy_time=362447)</span></div><div class="line"></div><div class="line"><span class="comment"># psutil.disk_io_counters(perdisk=Ture) 获取单个分区的IO个数</span></div><div class="line">&gt;&gt;&gt; psutil.disk_io_counters(<span class="attr">perdisk=True)</span></div><div class="line">&#123;'xvda1': sdiskio(<span class="attr">read_count=73895,</span> <span class="attr">write_count=163784,</span> <span class="attr">read_bytes=1255839744,</span> <span class="attr">write_bytes=1650151424,</span> <span class="attr">read_time=470216,</span> <span class="attr">write_time=3454878,</span> <span class="attr">read_merged_count=268,</span> <span class="attr">write_merged_count=238305,</span> <span class="attr">busy_time=362486)&#125;</span></div></pre></td></tr></table></figure>
<p>(4) 网络信息</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取网络总的IO信息，默认 pernic=False</span></div><div class="line">&gt;&gt;&gt; psutil.net_io_counters()</div><div class="line">snetio(<span class="attr">bytes_sent=60804444,</span> <span class="attr">bytes_recv=187669805,</span> <span class="attr">packets_sent=259503,</span> <span class="attr">packets_recv=344634,</span> <span class="attr">errin=0,</span> <span class="attr">errout=0,</span> <span class="attr">dropin=0,</span> <span class="attr">dropout=0)</span></div><div class="line"></div><div class="line"><span class="comment"># 获取每个网络接口的IO信息</span></div><div class="line">&gt;&gt;&gt; psutil.net_io_counters(<span class="attr">pernic=True)</span></div><div class="line">&#123;'lo': snetio(<span class="attr">bytes_sent=22812792,</span> <span class="attr">bytes_recv=22812792,</span> <span class="attr">packets_sent=91403,</span> <span class="attr">packets_recv=91403,</span> <span class="attr">errin=0,</span> <span class="attr">errout=0,</span> <span class="attr">dropin=0,</span> <span class="attr">dropout=0),</span> 'eth1': snetio(<span class="attr">bytes_sent=36941320,</span> <span class="attr">bytes_recv=164227892,</span> <span class="attr">packets_sent=154261,</span> <span class="attr">packets_recv=245344,</span> <span class="attr">errin=0,</span> <span class="attr">errout=0,</span> <span class="attr">dropin=0,</span> <span class="attr">dropout=0),</span> 'eth0': snetio(<span class="attr">bytes_sent=1052292,</span> <span class="attr">bytes_recv=631555,</span> <span class="attr">packets_sent=13857,</span> <span class="attr">packets_recv=7922,</span> <span class="attr">errin=0,</span> <span class="attr">errout=0,</span> <span class="attr">dropin=0,</span> <span class="attr">dropout=0)&#125;</span></div></pre></td></tr></table></figure>
<p>(5) 其他系统信息</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取当前登陆用户的信息</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; psutil.users()</div><div class="line">[suser(name=<span class="string">'root'</span>, terminal=<span class="string">'pts/0'</span>, host=<span class="string">'180.168.112.222'</span>, started=<span class="number">1461911552.0</span>)]</div><div class="line"></div><div class="line"><span class="comment"># 获取开机时长</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; psutil.boot_time()</div><div class="line"><span class="number">1461576707.0</span></div><div class="line"></div><div class="line"><span class="comment"># 将开机时长转换成自然格式</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; import datetime,psutil</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; datetime.datetime.fromtimestamp(psutil.boot_time()).strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div><div class="line"><span class="string">'2016-04-25 17:31:47'</span></div></pre></td></tr></table></figure>
<h3 id="系统进程管理方法"><a href="#系统进程管理方法" class="headerlink" title="系统进程管理方法"></a>系统进程管理方法</h3><p>(1) 进程信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> psutil</div><div class="line"><span class="comment"># 列出所有进程PID</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.pids()</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">73</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">225</span>, <span class="number">226</span>, <span class="number">308</span>, <span class="number">525</span>, <span class="number">601</span>, <span class="number">823</span>, <span class="number">842</span>, <span class="number">874</span>, <span class="number">937</span>, <span class="number">969</span>, <span class="number">1003</span>, <span class="number">1020</span>, <span class="number">1022</span>, <span class="number">1024</span>, <span class="number">1026</span>, <span class="number">1027</span>, <span class="number">1029</span>, <span class="number">1031</span>, <span class="number">1059</span>, <span class="number">1094</span>, <span class="number">1392</span>, <span class="number">5427</span>, <span class="number">12014</span>, <span class="number">12016</span>, <span class="number">12105</span>, <span class="number">13842</span>, <span class="number">14099</span>, <span class="number">14191</span>]</div><div class="line"></div><div class="line"><span class="comment"># 实例化一个Process对象，参数为一进程PID</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = psutil.Process(<span class="number">14191</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 进程名</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.name()</div><div class="line"><span class="string">'java'</span></div><div class="line"></div><div class="line"><span class="comment"># 进程bin路径</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.exe()</div><div class="line"><span class="string">'/usr/local/jdk/bin/java'</span></div><div class="line"></div><div class="line"><span class="comment"># 进程工作目录绝对路径</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.cwd()</div><div class="line"><span class="string">'/usr/local/nginx/conf/vhosts'</span></div><div class="line"></div><div class="line"><span class="comment"># 进程状态</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.status()</div><div class="line"><span class="string">'sleeping'</span></div><div class="line"></div><div class="line"><span class="comment"># 进程创建时间</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.create_time()</div><div class="line"><span class="number">1461738772.66</span></div><div class="line"></div><div class="line"><span class="comment"># 进程 uid 信息</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.uids()</div><div class="line">puids(real=<span class="number">0</span>, effective=<span class="number">0</span>, saved=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 进程 git 信息</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.gids()</div><div class="line">pgids(real=<span class="number">0</span>, effective=<span class="number">0</span>, saved=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 进程CPU时间信息，报错user、system两个CPU时间</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.cpu_times()</div><div class="line">pcputimes(user=<span class="number">263.48</span>, system=<span class="number">43.18</span>, children_user=<span class="number">0.21</span>, children_system=<span class="number">0.13</span>)</div><div class="line"></div><div class="line"><span class="comment">#get进程亲和度</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.cpu_affinity()</div><div class="line">[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment"># 进程内存利用率</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.memory_percent()</div><div class="line"><span class="number">42.151973296681724</span></div><div class="line"></div><div class="line">＃ 进程内存rss、vms信息</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.memory_info()</div><div class="line">pmem(rss=<span class="number">439664640</span>, vms=<span class="number">2446684160</span>, shared=<span class="number">8585216</span>, text=<span class="number">4096</span>, lib=<span class="number">0</span>, data=<span class="number">2281676800</span>, dirty=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 进程IO信息</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.io_counters()</div><div class="line">pio(read_count=<span class="number">870377</span>, write_count=<span class="number">40979</span>, read_bytes=<span class="number">21909504</span>, write_bytes=<span class="number">115916800</span>)</div><div class="line"></div><div class="line"><span class="comment"># 返回打开进程socket 的namedutples 列表，包括fd、family、laddr等信息</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.connections()</div><div class="line">[pconn(fd=<span class="number">343</span>, family=<span class="number">2</span>, type=<span class="number">2</span>, laddr=(<span class="string">'0.0.0.0'</span>, <span class="number">5353</span>), raddr=(), status=<span class="string">'NONE'</span>), pconn(fd=<span class="number">330</span>, family=<span class="number">2</span>, type=<span class="number">1</span>, laddr=(<span class="string">'0.0.0.0'</span>, <span class="number">54711</span>), raddr=(), status=<span class="string">'LISTEN'</span>), pconn(fd=<span class="number">47</span>, family=<span class="number">2</span>, type=<span class="number">1</span>, laddr=(<span class="string">'0.0.0.0'</span>, <span class="number">8009</span>), raddr=(), status=<span class="string">'LISTEN'</span>), pconn(fd=<span class="number">341</span>, family=<span class="number">2</span>, type=<span class="number">2</span>, laddr=(<span class="string">'0.0.0.0'</span>, <span class="number">33848</span>), raddr=(), status=<span class="string">'NONE'</span>), pconn(fd=<span class="number">340</span>, family=<span class="number">2</span>, type=<span class="number">1</span>, laddr=(<span class="string">'0.0.0.0'</span>, <span class="number">32996</span>), raddr=(), status=<span class="string">'LISTEN'</span>), pconn(fd=<span class="number">46</span>, family=<span class="number">2</span>, type=<span class="number">1</span>, laddr=(<span class="string">'0.0.0.0'</span>, <span class="number">8080</span>), raddr=(), status=<span class="string">'LISTEN'</span>), pconn(fd=<span class="number">180</span>, family=<span class="number">2</span>, type=<span class="number">1</span>, laddr=(<span class="string">'127.0.0.1'</span>, <span class="number">8005</span>), raddr=(), status=<span class="string">'LISTEN'</span>)]</div><div class="line"></div><div class="line"><span class="comment"># 进程开启等线程数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.num_threads()</div><div class="line"><span class="number">54</span></div></pre></td></tr></table></figure>
<p>(2) popen 类的使用</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 通过psutil 的Popen方法启动的应用程序，可以跟踪该程序运行的所有相关信息</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; psutil.Popen([<span class="string">"/usr/bin/python"</span>, <span class="string">"-c"</span>, <span class="string">"print('hello')"</span>], stdout=PIPE)</div><div class="line">&lt;psutil.Popen(pid=<span class="number">12139</span>, name=<span class="string">'python'</span>) at <span class="number">32848976</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; p = psutil.Popen([<span class="string">"/usr/bin/python"</span>, <span class="string">"-c"</span>, <span class="string">"print('hello')"</span>], stdout=PIPE)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; p.username()</div><div class="line"><span class="string">'root'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; p.communicate()</div><div class="line">(<span class="string">'hello\n'</span>, None)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_IPy模块]]></title>
      <url>http://yoursite.com/2016/12/15/Python-IPy%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h3 id="IP地址、网段的基本处理"><a href="#IP地址、网段的基本处理" class="headerlink" title="IP地址、网段的基本处理"></a>IP地址、网段的基本处理</h3><blockquote>
<p>IPy模块包含IP类，可以方便的处理绝大部分个是为IPv6和IPv4的网络和地址。可以通过version方法就可以分出IPv4和IPv6，如：</p>
</blockquote>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import IPy</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; IPy.IP(<span class="string">'10.0.0.0/8'</span>).version()</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; IPy.IP(<span class="string">'::1'</span>).version()</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure>
<p>通过指定网段输出该网段的IP个数以及所有IP地址清单，代码示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@sate_z python]<span class="comment"># cat ip_list.py</span></div><div class="line"><span class="comment">#!/bin/python</span></div><div class="line"></div><div class="line"><span class="comment"># print ip list</span></div><div class="line"><span class="keyword">from</span> IPy <span class="keyword">import</span> IP</div><div class="line">ip = IP(<span class="string">'192.168.0.0/24'</span>)</div><div class="line"><span class="keyword">print</span> ip.len()	<span class="comment"># 输出该网段的IP个数</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ip:	<span class="comment"># 列出所有网段中的IP</span></div><div class="line">	<span class="keyword">print</span> i</div></pre></td></tr></table></figure>
<p><strong>下面介绍IP类几个常见的方法，包括反向解析名称、IP类型、IP转换等</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; from IPy import IP</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; ip = IP(<span class="string">'58.217.200.15'</span>)</div><div class="line"></div><div class="line">＃反向解析地址格式</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; ip.reverseNames()</div><div class="line">[<span class="string">'15.200.217.58.in-addr.arpa.'</span>]</div><div class="line"></div><div class="line">＃判断ip类型，私有还是共有</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; ip.iptype()</div><div class="line"><span class="string">'PUBLIC'</span></div><div class="line"></div><div class="line">＃转换成十六进制</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; ip.strHex()</div><div class="line"><span class="string">'0x3ad9c80f'</span></div><div class="line"></div><div class="line">＃转换成二进制</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; ip.strBin()</div><div class="line"><span class="string">'00111010110110011100100000001111'</span></div><div class="line"></div><div class="line">＃将十六进制转换成IP格式</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print(IP(<span class="number">0x3ad9c80f</span>))</div><div class="line"><span class="number">58.217</span>.<span class="number">200.15</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">＃也可以使用如下格式来使用</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; from IPy import IP</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; IP(<span class="string">'10.0.0.1'</span>).iptype()</div><div class="line"><span class="string">'PRIVATE'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; IP(<span class="string">'10.0.0.1'</span>).strHex()</div><div class="line"><span class="string">'0xa000001'</span></div></pre></td></tr></table></figure>
<h3 id="IP方法也支持网络地址等转换，例如根据IP与掩码生产网段格式。例如"><a href="#IP方法也支持网络地址等转换，例如根据IP与掩码生产网段格式。例如" class="headerlink" title="IP方法也支持网络地址等转换，例如根据IP与掩码生产网段格式。例如"></a>IP方法也支持网络地址等转换，例如根据IP与掩码生产网段格式。例如</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from IPy import IP</div><div class="line">&gt;&gt;&gt; ip_mask = IP('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>').make_net('<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>')</div><div class="line">&gt;&gt;&gt; print ip_mask</div><div class="line"><span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span></div><div class="line"># 也可以</div><div class="line">&gt;&gt;&gt; print (IP('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>').make_net('<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>'))</div><div class="line"><span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; print (IP('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>',make_net=True))</div><div class="line"><span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; print (IP('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span><span class="number">-10.0</span><span class="number">.0</span><span class="number">.255</span>',make_net=True))</div><div class="line"><span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span></div></pre></td></tr></table></figure>
<h3 id="通过strNormal方法指定不同wantprefixlen参数值以定制不同输出类型的网段。输出类型为字符串，如下："><a href="#通过strNormal方法指定不同wantprefixlen参数值以定制不同输出类型的网段。输出类型为字符串，如下：" class="headerlink" title="通过strNormal方法指定不同wantprefixlen参数值以定制不同输出类型的网段。输出类型为字符串，如下："></a>通过strNormal方法指定不同wantprefixlen参数值以定制不同输出类型的网段。输出类型为字符串，如下：</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; IP('<span class="number">10.0</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>').strNormal(<span class="number">0</span>)</div><div class="line">'<span class="number">10.0</span><span class="number">.1</span><span class="number">.0</span>'</div><div class="line">&gt;&gt;&gt; IP('<span class="number">10.0</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>').strNormal(<span class="number">1</span>)</div><div class="line">'<span class="number">10.0</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>'</div><div class="line">&gt;&gt;&gt; IP('<span class="number">10.0</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>').strNormal(<span class="number">2</span>)</div><div class="line">'<span class="number">10.0</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>'</div><div class="line">&gt;&gt;&gt; IP('<span class="number">10.0</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>').strNormal(<span class="number">3</span>)</div><div class="line">'<span class="number">10.0</span><span class="number">.1</span><span class="number">.0</span><span class="number">-10.0</span><span class="number">.1</span><span class="number">.255</span>'</div></pre></td></tr></table></figure>
<h3 id="多网络计算方法详解"><a href="#多网络计算方法详解" class="headerlink" title="多网络计算方法详解"></a>多网络计算方法详解</h3><p>判断两个网段是否存在包含关系。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; '<span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>' in IP('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>')</div><div class="line">True</div><div class="line">&gt;&gt;&gt; '<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">26</span>' in IP('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>')</div><div class="line">True</div><div class="line">&gt;&gt;&gt; '<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>' in IP('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>')</div><div class="line">True</div><div class="line">&gt;&gt;&gt; '<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">23</span>' in IP('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>')</div><div class="line">False</div></pre></td></tr></table></figure>
<p>判断两个网段是否存在重叠，采用IPy提供的overlaps方法，如：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import IPy</div><div class="line">&gt;&gt;&gt; IPy.IP('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>').overlaps('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">26</span>')</div><div class="line"><span class="number">1</span></div><div class="line">&gt;&gt;&gt; IPy.IP('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>').overlaps('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">23</span>')</div><div class="line"><span class="number">1</span></div><div class="line">&gt;&gt;&gt; IPy.IP('<span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>').overlaps('<span class="number">11.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">23</span>')</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_getpass模块]]></title>
      <url>http://yoursite.com/2016/12/15/Python-getpass%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<p><code>getpass</code>模块提供了两个函数：</p>
<ul>
<li><code>getpass()</code> 获取输入的密码，并且输入内容屏幕不显示，和Linux系统登录类似</li>
<li><code>getuser()</code> 获取当前登录的用户名。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># getpass()</span></div><div class="line"></div><div class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> getpass</div><div class="line"></div><div class="line">In [<span class="number">2</span>]: password = getpass.getpass(<span class="string">'input your password: '</span>)</div><div class="line">input your password:		<span class="comment"># 输入密码</span></div><div class="line"></div><div class="line">In [<span class="number">3</span>]: <span class="keyword">print</span> password</div><div class="line">Out[<span class="number">3</span>]: <span class="string">'passwd'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># getuser()</span></div><div class="line"></div><div class="line">In [<span class="number">4</span>]: getpass.getuser()</div><div class="line">Out[<span class="number">4</span>]: <span class="string">'zheng'</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_SocketSever模块]]></title>
      <url>http://yoursite.com/2016/12/15/Python-SocketSever%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>内容学习记录自 :</p>
<p><a href="https://docs.python.org/2/library/socketserver.html#asynchronous-mixins" target="_blank" rel="external">https://docs.python.org/2/library/socketserver.html#asynchronous-mixins</a></p>
<p><a href="http://acen-chen.iteye.com/blog/290177" target="_blank" rel="external">http://acen-chen.iteye.com/blog/290177</a></p>
</blockquote>
<p>在<code>SocketServer</code>模块中有四个基础的类,比较常用的是<code>TCPServer</code></p>
<ul>
<li><strong>TCPServer(server_address, RequestHandlerClass, bind_and_activate=True)</strong></li>
<li><strong>UDPServer(server_address, RequestHandlerClass, bind_and_activate=True)</strong></li>
<li><strong>UnixStreamServer(server_address, RequestHandlerClass, bind_and_activate=True)</strong></li>
<li><strong>UnixDatagramServer(server_address, RequestHandlerClass, bind_and_activate=True)</strong></li>
</ul>
<p>这四个类的进程是同步的，即一次只能连接一个客户机并处理她的请求，请求结束后再接受其他请求。    解决办法是创建新的进程或者线程来处理每个请求。<code>ForkingMixIn</code>和<code>TheadingMixIn</code>两个混合类可以用来支持这种异步的行为。  实际上，<code>SocketServer</code>模块提供了一些对些有用的类来解决你这个问题，它们是：<code>ForkingUDPServer</code>、<code>ForkingTCPServer</code>、<code>ThreadingUDPServer</code>、<code>ThreadingTCPServer</code>、<code>ThreadingUnixStreamServer</code>和<code>ThreadingUnixDatagramServer</code>。</p>
<blockquote>
<p><code>fork</code>是通过复制进程来实现多进程， <code>threading</code>是通过创建进程来实现同时处理多个请求。</p>
</blockquote>
<p>如果要写一个自己的监听服务，我们要自己写一个请求处理的类来完成对请求数据的处理，<code>SocketServer</code>中的<code>BaseRequestHandler</code>是所有请求处理的类的父类。</p>
<p>例：写一个多线程服务，客户端发过来的数据，稍微处理再发送回去。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server 服务端</span></div><div class="line"><span class="keyword">import</span> SocketServer</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTCPHandler</span><span class="params">(SocketServer.BaseRequestHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.request  <span class="comment">#客户端的socket对象,&lt;socket._socketobject object at 0x1048be830&gt;</span></div><div class="line">        <span class="keyword">print</span> self.client_address   <span class="comment"># 客户端的地址和IP,('127.0.0.1', 55270)</span></div><div class="line">        <span class="keyword">print</span> self.server   <span class="comment"># 服务端socketserver对象,&lt;SocketServer.ThreadingTCPServer instance at 0x1048eeab8&gt;</span></div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">"get connection from : "</span> ,self.client_address</div><div class="line">        </div><div class="line">        <span class="comment"># 连接后，向客户端返回数据</span></div><div class="line">        self.request.send(<span class="string">'hello'</span>)</div><div class="line">        flag = <span class="keyword">True</span></div><div class="line">        <span class="keyword">while</span> flag:</div><div class="line">        	<span class="comment"># 接收客户端发来的数据</span></div><div class="line">            self.data = self.request.recv(<span class="number">4096</span>).strip()</div><div class="line">            <span class="keyword">print</span> self.data</div><div class="line">            <span class="keyword">if</span> self.data == <span class="string">'exit'</span>:</div><div class="line">                flag = <span class="keyword">False</span></div><div class="line">            final_data = <span class="string">"input is %s \r\n"</span> % self.data</div><div class="line">            <span class="comment"># 处理后返回数据</span></div><div class="line">            self.request.sendall(final_data)</div><div class="line"></div><div class="line">h, p = <span class="string">'127.0.0.1'</span>, <span class="number">9999</span></div><div class="line">server = SocketServer.ThreadingTCPServer((h, p), MyTCPHandler)</div><div class="line">server.serve_forever()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># client 客户端</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line">client = socket.socket()</div><div class="line"></div><div class="line"><span class="comment"># 建立连接</span></div><div class="line">ip_port = (<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>)</div><div class="line">client.connect(ip_port)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment"># 接受服务端发过来的数据</span></div><div class="line">    data = client.recv(<span class="number">1024</span>)</div><div class="line">    <span class="keyword">print</span> data</div><div class="line">    <span class="comment"># 向服务端发送数据</span></div><div class="line">    inp = raw_input(<span class="string">'client: '</span>)</div><div class="line">    client.send(inp)</div><div class="line">    <span class="keyword">if</span> inp == <span class="string">'exit'</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>在程序中，自定义了一个<code>MyTCPHandler</code>类来处理接受的数据，它的父类是<code>BaseRequestHandler</code>，当一个新的连接来到时，<code>server</code>会创建一个新的<code>MyTCPHandler</code>实例并调用<code>hande()</code>方法来处理该请求。<code>server</code>继承自<code>SocketServer.ThreadingTCPServer</code>，对于每个新的请求都会启动一个单独的线程来处理这个请求。如果用<code>server.handle_request()</code>替代<code>server.serve_forever()</code>，它将一个一个的处理连接请求，<code>server.serve_forever()</code>只是反复的调用<code>server.handle_request()</code></p>
<p>一般来说，你只需使用<code>socket</code>服务之一，但是如果你需要创建你自己的子类的话，你可以覆盖我们下面提到的方法来定制它。</p>
<p>当服务被第一次创建的时候，<code>__init__</code>函数调用<code>server_bind()</code>方法来绑定监听<code>socket(self.socket)</code>到正确的地址(<code>self.server_address</code>)。然后调用<code>server_activate()</code>来激活这个服务(默认情况下，调用<code>socket</code>的<code>listen</code>方法)。</p>
<p>这个<code>socket</code>服务不做任何事情直到调用了<code>handle_request</code>或<code>serve_forever</code>方法。<code>handle_request</code>调用<code>get_request()</code>去等待和接收一个新的<code>socket</code>连接，然后调用<code>verify_request(request,client_address)</code>去看服务是否会处理这个连接(你可以在访问控制中使用这个，默认情况下面<code>verify_request</code>总是返回<code>true</code>)。如果会处理这个请求，<code>handle_request</code>然后调用<code>process_request(request,client_address)</code>，如果<code>process_request(request,client_address)</code>导致一个异常的话，将调用<code>handle_error(request,client_address)</code>。默认情况下，<code>process_request</code>简单地调用<code>finish_request(request,client_address)</code>；子进程和线程类覆盖了这个行为去开始一新的进程或线程，然后调用<code>finish_request</code>。<code>finish_request</code>实例化一个新的请求处理器，请求处理器轮流调用它们的<code>handle()</code>方法。</p>
<p>当<code>SocketServer</code>创建一个新的请求处理器时，它传递给这个处理器的<code>__init__</code>函数的<code>self</code>变量，以便于这个处理器能够访问关于这个服务的信息。</p>
<p><code>SocketServer</code>的<code>fileno()</code>方法返回监听<code>socket</code>的文件描述符。<code>address_family</code>成员变量指定了监听<code>socket</code>的<code>socket</code>族(如<code>AF_INET</code>)，<code>server_address</code>包含了监听<code>socket</code>被绑定到的地址。<code>socket</code>变量包含监听<code>socket</code>自身。</p>
<p><strong>请求处理器中：</strong></p>
<p>即我们自己写的<code>MyTCPHandler</code>类，请求处理器有<code>setup()</code>、<code>handle()</code>和<code>finish()</code>方法，你可以覆盖它们来定制你自己的行为。一般情况下，你只需要覆盖<code>handle()</code>方法。<code>BaseRequestHandler</code>的<code>__init__</code>函数调用<code>setup()</code>方法来做初始化的工作，<code>handle()</code>服务于请求，<code>finish()</code>用于执行清理工作，如果<code>handle</code>或<code>setup</code>导致一个异常，<code>finish</code>不会被调用。记住，你的请求处理器会为每个请求创建一个新的实例。</p>
<p><code>SocketServer</code>模块也定义了<code>BaseRequestHandler</code>的两个子类：<code>StreamRequestHandler</code>和<code>DatagramRequestHandler</code>。它们覆盖了<code>setup</code>和<code>finish</code>方法并创建了两个文件对象<code>rfile</code>和<code>wfile</code>，你可以用这两个文件对象来向客户端读写数据，从而代替使用<code>socket</code>方法。如下例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> SocketServer <span class="keyword">import</span> ThreadingTCPServer, StreamRequestHandler</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStreamRequestHandlerr</span><span class="params">(StreamRequestHandler)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                data = self.rfile.readline().strip()</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data: <span class="keyword">break</span></div><div class="line">                <span class="keyword">print</span> <span class="string">"receive from (%r):%r"</span> % (self.client_address, data)</div><div class="line">                self.wfile.write(data.upper())</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                traceback.print_exc()</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    host = <span class="string">""</span>       <span class="comment">#主机名，可以是ip,像localhost的主机名,或""</span></div><div class="line">    port = <span class="number">9999</span>     <span class="comment">#端口</span></div><div class="line">    addr = (host, port)</div><div class="line"></div><div class="line">    <span class="comment">#ThreadingTCPServer从ThreadingMixIn和TCPServer继承</span></div><div class="line">    <span class="comment">#class ThreadingTCPServer(ThreadingMixIn, TCPServer): pass</span></div><div class="line">    server = ThreadingTCPServer(addr, MyStreamRequestHandlerr)</div><div class="line">    server.serve_forever()</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_socket模块]]></title>
      <url>http://yoursite.com/2016/12/15/Python-socket%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<p><code>socket</code> 也称套接字，用于描述IP地址和端口，是一个通信链的句柄，应用程序通过“套接字”向网络发出请求或者应答网络请求</p>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server 端</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"><span class="comment"># 创建socket对象</span></div><div class="line">sk = socket.socket()</div><div class="line"></div><div class="line"><span class="comment"># 绑定端口和IP</span></div><div class="line">ip_port = (<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>)</div><div class="line">sk.bind(ip_port)</div><div class="line"></div><div class="line">sk.listen(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment"># 处理完一个请求后，会处理下一个，持续监听。</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment"># 建立监听, sk.accept() 返回值为一个元祖,conn的值为客户端的socket对象,address为客户端连接过来的地址。</span></div><div class="line">    conn, address = sk.accept()</div><div class="line">    <span class="keyword">print</span> conn	<span class="comment">#结果==》&lt;socket._socketobject object at 0x1066330c0&gt;</span></div><div class="line"></div><div class="line">    <span class="comment"># 当客户端连接上之后,向客户端发送数据</span></div><div class="line">    conn.send(<span class="string">'hello'</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># 定义标志位，用来跳出循环</span></div><div class="line">    flag = <span class="keyword">True</span></div><div class="line">    </div><div class="line">    <span class="comment"># 该循环用于和一个用户的持续连接</span></div><div class="line">    <span class="keyword">while</span> flag:</div><div class="line">        <span class="comment"># 接收客户端的数据</span></div><div class="line">        data = conn.recv(<span class="number">1024</span>)</div><div class="line">        <span class="keyword">print</span> data</div><div class="line">        <span class="keyword">if</span> data == <span class="string">'exit'</span>:</div><div class="line">            flag = <span class="keyword">False</span></div><div class="line">        <span class="comment"># 向客户端发送数据</span></div><div class="line">        conn.send(<span class="string">'sb'</span>)</div><div class="line"></div><div class="line">    conn.close()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># client 端</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line">client = socket.socket()</div><div class="line"></div><div class="line"><span class="comment"># 建立连接</span></div><div class="line">ip_port = (<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>)</div><div class="line">client.connect(ip_port)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment"># 接受服务端发过来的数据</span></div><div class="line">    data = client.recv(<span class="number">1024</span>)</div><div class="line">    <span class="keyword">print</span> data</div><div class="line"></div><div class="line">    <span class="comment"># 向服务端发送数据</span></div><div class="line">    inp = raw_input(<span class="string">'client: '</span>)</div><div class="line">    client.send(inp)</div><div class="line">    <span class="keyword">if</span> inp == <span class="string">'exit'</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<h3 id="socket-参数"><a href="#socket-参数" class="headerlink" title="socket 参数"></a>socket 参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 实例化时，不加参数，默认是如下参数</span></div><div class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM, <span class="number">0</span>)</div></pre></td></tr></table></figure>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 参数一： 地址簇</span></div><div class="line"><span class="built_in">socket</span>.AF_INET :服务器之间网络通信，用于ipv4（默认）</div><div class="line"><span class="built_in">socket</span>.AF_UNIX :只能够用于单一的unix系统进程间通信，不能进行网络通信</div><div class="line"><span class="built_in">socket</span>.AF_INET6 :IPV6</div><div class="line"></div><div class="line"><span class="comment"># 参数二： 类型</span></div><div class="line"><span class="built_in">socket</span>.SOCK_STREAM 流式<span class="built_in">socket</span>，<span class="keyword">for</span> TCP（默认）</div><div class="line"><span class="built_in">socket</span>.SOCK_DGRAM 数据报式<span class="built_in">socket</span>，<span class="keyword">for</span> UDP</div><div class="line"><span class="built_in">socket</span>.SOCK_RAW 原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以。其次SOCK_RAW也可以处理特殊的IPv4报文；使用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头</div><div class="line"><span class="built_in">socket</span>.SOCK_RDM 一种课改的UDP形式，保证数据但不保证顺序，很少用</div><div class="line"><span class="built_in">socket</span>.SOCK_SEQPACKET 可靠的连续数据包服务，很少用</div><div class="line"></div><div class="line"><span class="comment"># 参数三： 协议</span></div><div class="line"><span class="number">0</span> （默认），于特定的地址家族相关的协议，如果是<span class="number">0</span>，则系统会根据地址格式和套接类别自动选择一个合适的协议</div></pre></td></tr></table></figure>
<h3 id="socket-方法"><a href="#socket-方法" class="headerlink" title="socket 方法"></a>socket 方法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.bind</span>(<span class="selector-tag">address</span>):</div><div class="line">　　<span class="selector-tag">s</span><span class="selector-class">.bind</span>(<span class="selector-tag">address</span>) 将套接字绑定到地址。<span class="selector-tag">address</span>地址的格式取决于地址族。在<span class="selector-tag">AF_INET</span>下，以元组（<span class="selector-tag">host</span>,<span class="selector-tag">port</span>）的形式表示地址。</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.listen</span>(<span class="selector-tag">backlog</span>):</div><div class="line">　　开始监听传入连接。<span class="selector-tag">backlog</span>指定在拒绝连接之前，可以挂起的最大连接数量。<span class="selector-tag">backlog</span>等于5，</div><div class="line">　　表示内核已经接到了连接请求，但服务器还没有调用<span class="selector-tag">accept</span>进行处理的连接个数最大为5,</div><div class="line">　　这个值不能无限大，因为要在内核中维护连接队列</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.setblocking</span>(<span class="selector-tag">bool</span>):</div><div class="line">　　是否阻塞（默认<span class="selector-tag">True</span>），如果设置<span class="selector-tag">False</span>，那么<span class="selector-tag">accept</span>和<span class="selector-tag">recv</span>时一旦无数据，则报错。</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.accept</span>():</div><div class="line">　　接受连接并返回（<span class="selector-tag">conn</span>,<span class="selector-tag">address</span>）,其中<span class="selector-tag">conn</span>是新的套接字对象，可以用来接收和发送数据。<span class="selector-tag">address</span>是连接客户端的地址。</div><div class="line">　　接收<span class="selector-tag">TCP</span> 客户的连接（阻塞式）等待连接的到来</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.connect</span>(<span class="selector-tag">address</span>):</div><div class="line">　　连接到<span class="selector-tag">address</span>处的套接字。一般，<span class="selector-tag">address</span>的格式为元组（<span class="selector-tag">hostname</span>,<span class="selector-tag">port</span>）,如果连接出错，返回<span class="selector-tag">socket</span><span class="selector-class">.error</span>错误。</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.connect_ex</span>(<span class="selector-tag">address</span>)</div><div class="line">　　同上，只不过会有返回值，连接成功时返回 0 ，连接失败时候返回编码，例如：10061</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.close</span>():</div><div class="line">　　关闭套接字</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.recv</span>(<span class="selector-tag">bufsize</span><span class="selector-attr">[,flag]</span>):</div><div class="line">　　接受套接字的数据。数据以字符串形式返回，<span class="selector-tag">bufsize</span>指定最多可以接收的数量。<span class="selector-tag">flag</span>提供有关消息的其他信息，通常可以忽略。</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.recvfrom</span>(<span class="selector-tag">bufsize</span><span class="selector-attr">[.flag]</span>):</div><div class="line">　　与<span class="selector-tag">recv</span>()类似，但返回值是（<span class="selector-tag">data</span>,<span class="selector-tag">address</span>）。其中<span class="selector-tag">data</span>是包含接收数据的字符串，<span class="selector-tag">address</span>是发送数据的套接字地址。</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.send</span>(<span class="selector-tag">string</span><span class="selector-attr">[,flag]</span>):</div><div class="line">　　将<span class="selector-tag">string</span>中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于<span class="selector-tag">string</span>的字节大小。即：可能未将指定内容全部发送。</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.sendall</span>(<span class="selector-tag">string</span><span class="selector-attr">[,flag]</span>):</div><div class="line">　　将<span class="selector-tag">string</span>中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回<span class="selector-tag">None</span>，失败则抛出异常。</div><div class="line">    内部通过递归调用<span class="selector-tag">send</span>，将所有内容发送出去。</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.sendto</span>(<span class="selector-tag">string</span><span class="selector-attr">[,flag]</span>,<span class="selector-tag">address</span>):</div><div class="line">　　将数据发送到套接字，<span class="selector-tag">address</span>是形式为（<span class="selector-tag">ipaddr</span>，<span class="selector-tag">port</span>）的元组，指定远程地址。返回值是发送的字节数。该函数主要用于<span class="selector-tag">UDP</span>协议。</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.settimeout</span>(<span class="selector-tag">timeout</span>):</div><div class="line">　　设置套接字操作的超时期，<span class="selector-tag">timeout</span>是一个浮点数，单位是秒。值为<span class="selector-tag">None</span>表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如 <span class="selector-tag">client</span> 连接最多等待5<span class="selector-tag">s</span> ）</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.getpeername</span>():</div><div class="line">　　返回连接套接字的远程地址。返回值通常是元组（<span class="selector-tag">ipaddr</span>,<span class="selector-tag">port</span>）。</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.getsockname</span>():</div><div class="line">　　返回套接字自己的地址。通常是一个元组(<span class="selector-tag">ipaddr</span>,<span class="selector-tag">port</span>)</div><div class="line">　　</div><div class="line">　　</div><div class="line"><span class="selector-tag">sk</span><span class="selector-class">.fileno</span>(): </div><div class="line">　　套接字的文件描述符</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_Redis的订阅和发布]]></title>
      <url>http://yoursite.com/2016/12/15/Python-Redis%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%8F%91%E5%B8%83/</url>
      <content type="html"><![CDATA[<h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 订阅功能终端</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> redis</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = redis.Redis()</div><div class="line"><span class="comment"># 打开订阅功能</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sub = r.pubsub()</div><div class="line"><span class="comment"># 声明订阅的频道</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sub.subscribe(<span class="string">'fm87.7'</span>)</div><div class="line"><span class="comment"># 开始订阅,第一次会返回一条订阅信息，第二次开始持续订阅</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sub.parse_response()</div><div class="line">[<span class="string">'subscribe'</span>, <span class="string">'fm87.7'</span>, <span class="number">1L</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sub.parse_response() <span class="comment">#此时会一直等待数据</span></div></pre></td></tr></table></figure>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>打开新的终端，执行发布部分</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 发布功能终端</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> redis</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = redis.Redis()</div><div class="line"><span class="comment"># 指定频道发送数据</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r.publish(<span class="string">'fm87.7'</span>, <span class="string">'send msg'</span>)</div></pre></td></tr></table></figure>
<p>执行后，订阅终端会受到发布终端发布信息，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'message'</span>, <span class="string">'fm87.7'</span>, <span class="string">'send msg'</span>]</div></pre></td></tr></table></figure>
<p>可以将订阅终端使用<code>while</code>循环，进行持续订阅。如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> redis</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = redis.Redis()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sub = r.pubsub()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sub.subscribe(<span class="string">'fm87.7'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"><span class="meta">... </span>  sub.parse_response()</div><div class="line">...</div><div class="line"><span class="comment"># 可以持续接受消息。</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_Mysqldb模块]]></title>
      <url>http://yoursite.com/2016/12/15/Python-Mysql%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">系统：Ubuntu 14.04</div><div class="line">MySQLdb</div><div class="line">$ pip install Mysql-python</div><div class="line">-&gt; 报错：EnvironmentError: mysql_config not found （安装libmysqlclient-dev）</div><div class="line">$ apt-get install libmysqlclient-dev</div><div class="line">$ pip install Mysql-python</div><div class="line"></div><div class="line">如果是MAC系统，则需要先安装 mysql 服务。</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>查数据示例（<code>fetchall()获取数据</code>）</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"></div><div class="line"><span class="comment"># 建立连接</span></div><div class="line">conn = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'sate'</span>, db=<span class="string">'dbtest'</span>, passwd=<span class="string">'password'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 设置游标</span></div><div class="line">cur = conn.cursor()</div><div class="line"></div><div class="line"><span class="comment"># 执行SQL命令，并不会直接返回查询结果，而是返回SQL语句影响的行数</span></div><div class="line">reCount = cur.execute(<span class="string">'select * from Products;'</span>)</div><div class="line"><span class="keyword">print</span> reCount		<span class="comment"># 输出一个数字，是SQL影响的行数</span></div><div class="line"></div><div class="line"><span class="comment"># 使用 fetchall()方法获取数据，循环输出结果，以元祖的方式输出</span></div><div class="line"><span class="keyword">for</span> data <span class="keyword">in</span> cur.fetchall():</div><div class="line">    <span class="keyword">print</span> data</div><div class="line">    </div><div class="line"><span class="comment"># 关闭连接</span></div><div class="line">cur.close()</div><div class="line">conn.close()</div><div class="line"><span class="comment"># 结果==》</span></div><div class="line"><span class="number">5</span></div><div class="line">(<span class="string">'00001'</span>, <span class="string">'hilife'</span>)</div><div class="line">(<span class="string">'00002'</span>, <span class="string">'GTL'</span>)</div><div class="line">(<span class="string">'00003'</span>, <span class="string">'GLA'</span>)</div><div class="line">(<span class="string">'000004'</span>, <span class="string">'TYA'</span>)</div><div class="line">(<span class="string">'000005'</span>, <span class="string">'TUH'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>插入或者更改数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"></div><div class="line">conn = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'sate'</span>, db=<span class="string">'dbtest'</span>, passwd=<span class="string">'password'</span>)</div><div class="line">cur = conn.cursor()</div><div class="line"></div><div class="line"><span class="comment"># 定义SQL语句</span></div><div class="line">sql = <span class="string">'insert into Products(prod_id, prod_name) values(%s, %s);'</span></div><div class="line"><span class="comment"># 定义数据</span></div><div class="line">params = (<span class="string">'00002'</span>, <span class="string">'GLA'</span>)</div><div class="line">reCount = cur.execute(sql, params)        <span class="comment">#为了防止SQL注入,可以使用该方法</span></div><div class="line">conn.commit()   <span class="comment">#提交</span></div><div class="line"></div><div class="line">cur.close()</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
<ul>
<li>批量插入数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"></div><div class="line">conn = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'sate'</span>, db=<span class="string">'dbtest'</span>, passwd=<span class="string">'password'</span>)</div><div class="line">cur = conn.cursor()</div><div class="line"></div><div class="line"><span class="comment"># 要批量插入的数据</span></div><div class="line">li = [</div><div class="line">    (<span class="string">'000004'</span>, <span class="string">'TYA'</span>),</div><div class="line">    (<span class="string">'000005'</span>, <span class="string">'TUH'</span>)</div><div class="line">]</div><div class="line">sql = <span class="string">'insert into Products(prod_id, prod_name) values(%s, %s);'</span></div><div class="line"><span class="comment"># 批量使用executemany</span></div><div class="line">reCount = cur.executemany(sql, li)        <span class="comment">#为了防止SQL注入,可以使用该方法</span></div><div class="line">conn.commit()   <span class="comment">#提交</span></div><div class="line"></div><div class="line">cur.close()</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
<ul>
<li>之前查看数据时，返回是元祖形式，有时看起来并不明显，我们可以选择用字典的方式，将列名一起输出。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"></div><div class="line">conn = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'zheng'</span>, db=<span class="string">'satezheng'</span>, passwd=<span class="string">'satezheng'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 使用字典形式返回数据</span></div><div class="line">cur = conn.cursor(cursorclass = MySQLdb.cursors.DictCursor)</div><div class="line"></div><div class="line"><span class="comment"># 执行命令，并不会直接打印,可以使用fetchall来读取。</span></div><div class="line">reCount1 = cur.execute(<span class="string">'select * from Products'</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> reCount1		<span class="comment"># 输出一个数字，是SQL影响的行数</span></div><div class="line"><span class="keyword">for</span> data <span class="keyword">in</span> cur.fetchall():</div><div class="line">    <span class="keyword">print</span> data</div><div class="line">cur.close()</div><div class="line">conn.close()</div><div class="line"><span class="comment"># 结果==》</span></div><div class="line"><span class="number">5</span></div><div class="line">&#123;<span class="string">'prod_name'</span>: <span class="string">'hilife'</span>, <span class="string">'prod_id'</span>: <span class="string">'00001'</span>&#125;</div><div class="line">&#123;<span class="string">'prod_name'</span>: <span class="string">'GLA'</span>, <span class="string">'prod_id'</span>: <span class="string">'00002'</span>&#125;</div><div class="line">&#123;<span class="string">'prod_name'</span>: <span class="string">'GTL'</span>, <span class="string">'prod_id'</span>: <span class="string">'00003'</span>&#125;</div><div class="line">&#123;<span class="string">'prod_name'</span>: <span class="string">'TYA'</span>, <span class="string">'prod_id'</span>: <span class="string">'000004'</span>&#125;</div><div class="line">&#123;<span class="string">'prod_name'</span>: <span class="string">'TUH'</span>, <span class="string">'prod_id'</span>: <span class="string">'000005'</span>&#125;</div></pre></td></tr></table></figure>
<p><code>cursor</code>读取执行结果的方法有：</p>
<ul>
<li><code>fetchall()</code> 把所有的都读出来</li>
<li><code>fetchmany(n)</code> 输出指定数量n的行</li>
<li><p><code>fetchone()</code> 只返回第一条结果</p>
</li>
<li><p><code>fetchone()</code> 一次只返回一条结果，下次返回第二条，和文件的<code>readlines</code>类似</p>
</li>
</ul>
<p>对应的也会有指针的概念，<code>scroll()</code>可以指定读取的位置</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cur.scroll(<span class="number">0</span>, mode='absolute')	# 绝对指针， <span class="number">0</span> 就是指针的位置</div><div class="line">cur.scroll(<span class="number">-1</span>, mode='relative')	# 相对指针， <span class="number">-1</span> 指针位置向前移一位（指针位置<span class="number">-1</span>）</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"></div><div class="line">conn = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'zheng'</span>, db=<span class="string">'satezheng'</span>, passwd=<span class="string">'satezheng'</span>)</div><div class="line">cur = conn.cursor()</div><div class="line"></div><div class="line">reCount = cur.execute(<span class="string">'select * from Products;'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 使用 fetchone()方法获取数据</span></div><div class="line">data = cur.fetchone()</div><div class="line"><span class="keyword">print</span> data</div><div class="line">data = cur.fetchone()</div><div class="line"><span class="keyword">print</span> data</div><div class="line">data = cur.fetchone()</div><div class="line"><span class="keyword">print</span> data</div><div class="line"><span class="comment"># 结果==》</span></div><div class="line">(<span class="string">'00001'</span>, <span class="string">'hilife'</span>)</div><div class="line">(<span class="string">'00002'</span>, <span class="string">'GTL'</span>)</div><div class="line">(<span class="string">'00003'</span>, <span class="string">'GLA'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 使用绝对指针时</span></div><div class="line">...</div><div class="line">data = cur.fetchone()</div><div class="line"><span class="keyword">print</span> data</div><div class="line">data = cur.fetchone()</div><div class="line"><span class="keyword">print</span> data</div><div class="line">cur.scroll(<span class="number">0</span>, mode=<span class="string">'absolute'</span>)	<span class="comment"># 将指针指向 0</span></div><div class="line">data = cur.fetchone()</div><div class="line"><span class="keyword">print</span> data</div><div class="line"><span class="comment"># 结果==》</span></div><div class="line">(<span class="string">'00001'</span>, <span class="string">'hilife'</span>)</div><div class="line">(<span class="string">'00002'</span>, <span class="string">'GTL'</span>)</div><div class="line">(<span class="string">'00001'</span>, <span class="string">'hilife'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 使用相对指针</span></div><div class="line">data = cur.fetchone()</div><div class="line"><span class="keyword">print</span> data</div><div class="line">data = cur.fetchone()</div><div class="line"><span class="keyword">print</span> data</div><div class="line">cur.scroll(<span class="number">-1</span>, mode=<span class="string">'relative'</span>)	<span class="comment"># 指针位置减1</span></div><div class="line">data = cur.fetchone()</div><div class="line"><span class="keyword">print</span> data</div><div class="line"><span class="comment"># 结果==》</span></div><div class="line">(<span class="string">'00001'</span>, <span class="string">'hilife'</span>)</div><div class="line">(<span class="string">'00002'</span>, <span class="string">'GTL'</span>)</div><div class="line">(<span class="string">'00002'</span>, <span class="string">'GTL'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><code>cur.lastrawid()</code> 获取自增id</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python异常]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h3><p>Python 用异常处理来表示异常情况。</p>
<p>事实上每个异常都是一些类的实例，可以被引发，也可以用很多方法进行捕捉，并对其处理。</p>
<h3 id="引发异常"><a href="#引发异常" class="headerlink" title="引发异常"></a>引发异常</h3><p>异常可以自己引发</p>
<h5 id="raise语句"><a href="#raise语句" class="headerlink" title="raise语句"></a><code>raise</code>语句</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> Exception</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">Exception</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> Exception(<span class="string">"oh,error"</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">Exception: oh,error</div></pre></td></tr></table></figure>
<p>一些重要的内建异常类：</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Exception</td>
<td>所有异常的基类</td>
</tr>
<tr>
<td>AttributeError</td>
<td>特性引用或赋值失败时引发</td>
</tr>
<tr>
<td>IOError</td>
<td>试图打开不存在的文件时引发</td>
</tr>
<tr>
<td>IndexError</td>
<td>在使用序列中不存在的索引时引发</td>
</tr>
<tr>
<td>keyError</td>
<td>在使用映射中不存在的键时引发</td>
</tr>
<tr>
<td>NameError</td>
<td>在找不到名字（变量）时引发</td>
</tr>
<tr>
<td>SyntaxError</td>
<td>在代码为错误形式时引发</td>
</tr>
<tr>
<td>TypeError</td>
<td>在内建操作或者函数应用于错误类型的对象时引发</td>
</tr>
<tr>
<td>ValueError</td>
<td>在内建操作或者函数应用于正确类型的对象，但是该对象使用不合适的值时引发</td>
</tr>
<tr>
<td>ZeroDivisionError</td>
<td>在除法或者模除操作的第二个参数为0时引发</td>
</tr>
</tbody>
</table>
<h5 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h5><p>和其他类一样，只要确保从<code>Exception</code>类继承。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeCustomException</span><span class="params">(Exception)</span>:</span> <span class="keyword">pass</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_zabbix_api]]></title>
      <url>http://yoursite.com/2016/12/15/Python-zabbix-api/</url>
      <content type="html"><![CDATA[<blockquote>
<p>运维生存时间: <a href="http://www.ttlsa.com/zabbix/zabbix-dev-api/" target="_blank" rel="external">http://www.ttlsa.com/zabbix/zabbix-dev-api/</a></p>
<p>zabbix api 官方文档: <a href="https://www.zabbix.com/documentation/2.4/manual/api" target="_blank" rel="external">https://www.zabbix.com/documentation/2.4/manual/api</a></p>
</blockquote>
<p><code>zabbix</code> 提供<code>api</code>来完成实现我们需要做的各种操作，如获取数据，创建监控项等。</p>
<p><strong><code>zabbix</code>接口地址：<code>http://zabbix地址/api_jsonrpc.php</code>,请求是必须包括<code>Content-Type</code>头信息，值为<code>application/json-rpc、application/json 或 application/jsonrequest</code></strong></p>
<h3 id="通过zabbix-api登录，获取token"><a href="#通过zabbix-api登录，获取token" class="headerlink" title="通过zabbix api登录，获取token"></a>通过<code>zabbix api</code>登录，获取<code>token</code></h3><p>要想通过<code>zabbix api</code>来进行各种操作，首先要先通过<code>api</code>的认证，带着返回的<code>token</code>值来获取操作的权限。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> pprint</div><div class="line"></div><div class="line">url = <span class="string">'https://zabbix地址/api_jsonrpc.php'</span></div><div class="line">username = <span class="string">'*******'</span></div><div class="line">password = <span class="string">'****'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Authid</span><span class="params">(url, username, password)</span>:</span></div><div class="line">    values = &#123;<span class="string">'jsonrpc'</span>: <span class="string">'2.0'</span>,			<span class="comment">#JSON-RPC版本</span></div><div class="line">              <span class="string">'method'</span>: <span class="string">'user.login'</span>,	<span class="comment">#调用的API方法</span></div><div class="line">              <span class="string">'params'</span>: &#123;					<span class="comment">#传递的参数</span></div><div class="line">                  <span class="string">'user'</span>: username,</div><div class="line">                  <span class="string">'password'</span>: password</div><div class="line">              &#125;,</div><div class="line">              <span class="string">'id'</span>: <span class="number">0</span>						<span class="comment">#请求标志</span></div><div class="line">              &#125;</div><div class="line">    data = json.dumps(values)</div><div class="line">    req = urllib2.Request(url, data, &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json-rpc'</span>&#125;)</div><div class="line">    response = urllib2.urlopen(req)</div><div class="line">    output = json.loads(response.read())</div><div class="line">    <span class="keyword">return</span> output</div><div class="line"></div><div class="line"><span class="keyword">print</span> authid(url, username, password)</div><div class="line"><span class="comment"># 结果</span></div><div class="line">&#123;<span class="string">u'jsonrpc'</span>: <span class="string">u'2.0'</span>, <span class="string">u'result'</span>: <span class="string">u'04033a250a41c8786d8dc9045b2b1a7c'</span>, <span class="string">u'id'</span>: <span class="number">0</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="通过token来获取zabbix数据"><a href="#通过token来获取zabbix数据" class="headerlink" title="通过token来获取zabbix数据"></a>通过<code>token</code>来获取<code>zabbix</code>数据</h3><p>上边函数已经将<code>token</code>取出，现在我们根据官方提供的方法来获取数据。</p>
<p>可以参照官方文档中：<code>https://www.zabbix.com/documentation/2.4/manual/api/reference</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义获取数据的函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gethostinfo</span><span class="params">(auth)</span>:</span></div><div class="line">    values = &#123;</div><div class="line">        <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</div><div class="line">        <span class="string">"method"</span>: <span class="string">"host.get"</span>,		<span class="comment">#调用host.get方法</span></div><div class="line">        <span class="string">"params"</span>: &#123;</div><div class="line">            <span class="string">"output"</span>: [<span class="string">"hostid"</span>, <span class="string">"host"</span>],</div><div class="line">            <span class="string">"selectInterfaces"</span>: [</div><div class="line">                <span class="string">"interfaceid"</span>,</div><div class="line">                <span class="string">"ip"</span>],</div><div class="line">            <span class="string">"filter"</span>: &#123;</div><div class="line">                <span class="string">"host"</span>: [<span class="string">"zabbix-node1"</span>]	<span class="comment">#指定一个zabbix中的一个host，否则会输出全部的host</span></div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"auth"</span>: auth,				<span class="comment">#使用上一步获取的token值</span></div><div class="line">        <span class="string">"id"</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    data = json.dumps(values)</div><div class="line">    req = urllib2.Request(url, data, &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json-rpc'</span>&#125;)</div><div class="line">    response = urllib2.urlopen(req)</div><div class="line">    output = json.loads(response.read())</div><div class="line">    <span class="keyword">return</span> output</div><div class="line"></div><div class="line">auth = authid()[<span class="string">'result'</span>]			<span class="comment">#获取token值</span></div><div class="line">hostinfo = gethostinfo(auth)		<span class="comment">#带入token，获取数据</span></div><div class="line">pprint.pprint(hostinfo)				<span class="comment">#输出，为了格式的好看，使用pprint</span></div><div class="line"><span class="comment"># 结果</span></div><div class="line">&#123;<span class="string">u'id'</span>: <span class="number">1</span>,</div><div class="line"> <span class="string">u'jsonrpc'</span>: <span class="string">u'2.0'</span>,</div><div class="line"> <span class="string">u'result'</span>: [&#123;<span class="string">u'host'</span>: <span class="string">u'zabbix-node1'</span>,</div><div class="line">              <span class="string">u'hostid'</span>: <span class="string">u'10156'</span>,</div><div class="line">              <span class="string">u'interfaces'</span>: [&#123;<span class="string">u'interfaceid'</span>: <span class="string">u'53'</span>,</div><div class="line">                               <span class="string">u'ip'</span>: <span class="string">u'10.47.123.35'</span>&#125;]&#125;]&#125;</div></pre></td></tr></table></figure>
<p>获取到数据后， 就可以交给其他的程序来处理并输出。</p>
<h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><p>为了程序的整洁性，调整代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> pprint</div><div class="line"></div><div class="line">url = <span class="string">'https://zabbix地址/api_jsonrpc.php'</span></div><div class="line">username = <span class="string">'******'</span></div><div class="line">password = <span class="string">'****'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(values)</span>:</span></div><div class="line">    data = json.dumps(values)</div><div class="line">    req = urllib2.Request(url, data, &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json-rpc'</span>&#125;)</div><div class="line">    response = urllib2.urlopen(req)</div><div class="line">    output = json.loads(response.read())</div><div class="line">    <span class="keyword">return</span> output[<span class="string">'result'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">authid</span><span class="params">()</span>:</span></div><div class="line">    values = &#123;<span class="string">'jsonrpc'</span>: <span class="string">'2.0'</span>,</div><div class="line">              <span class="string">'method'</span>: <span class="string">'user.login'</span>,</div><div class="line">              <span class="string">'params'</span>: &#123;</div><div class="line">                  <span class="string">'user'</span>: username,</div><div class="line">                  <span class="string">'password'</span>: password</div><div class="line">              &#125;,</div><div class="line">              <span class="string">'id'</span>: <span class="number">1</span></div><div class="line">              &#125;</div><div class="line">    <span class="keyword">return</span> get_data(values)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_host_info</span><span class="params">(auth)</span>:</span></div><div class="line">    values = &#123;</div><div class="line">        <span class="string">"jsonrpc"</span>: <span class="string">"2.0"</span>,</div><div class="line">        <span class="string">"method"</span>: <span class="string">"host.get"</span>,</div><div class="line">        <span class="string">"params"</span>: &#123;</div><div class="line">            <span class="string">"output"</span>: [<span class="string">"hostid"</span>, <span class="string">"host"</span>],</div><div class="line">            <span class="string">"selectInterfaces"</span>: [</div><div class="line">                <span class="string">"interfaceid"</span>,</div><div class="line">                <span class="string">"ip"</span>],</div><div class="line">            <span class="string">"filter"</span>: &#123;</div><div class="line">                <span class="string">"host"</span>: [<span class="string">"zabbix-node1"</span>]</div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"auth"</span>: auth,</div><div class="line">        <span class="string">"id"</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> get_data(values)</div><div class="line"></div><div class="line">auth = authid()</div><div class="line">hostinfo = get_host_info(auth)</div><div class="line"></div><div class="line">pprint.pprint(hostinfo)</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_virtualenv教程]]></title>
      <url>http://yoursite.com/2016/12/15/Python-virtualenv%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>文中知识点学习自 : <a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000</a></p>
</blockquote>
<p>在开发Python应用程序的时候，系统安装的Python3只有一个版本：3.4。所有第三方的包都会被pip安装到Python3的site-packages目录下。</p>
<p>如果我们要同时开发多个应用程序，那这些应用程序都会共用一个Python，就是安装在系统的Python 3。如果应用A需要jinja 2.7，而应用B需要jinja 2.6怎么办？</p>
<p>这种情况下，每个应用可能需要各自拥有一套“独立”的Python运行环境。virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。</p>
<p><strong>安装：</strong></p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip <span class="keyword">install</span> virtualenv</div></pre></td></tr></table></figure>
<p><strong>使用：</strong></p>
<p>1、创建项目目录</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">mkdir</span> virenv</div><div class="line">$ <span class="built_in">cd</span> virenv/</div></pre></td></tr></table></figure>
<p>2、创建一个独立的<code>Python</code>运行环境，命名为<code>venv</code></p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> virtualenv --<span class="keyword">no</span>-site-packages venv</div><div class="line">New python executable in /root/virenv/venv/bin/python</div><div class="line"><span class="function"><span class="title">Installing</span></span> setuptools, pip, wheel...done.</div></pre></td></tr></table></figure>
<p>命令<code>virtualenv</code>就可以创建一个独立的<code>Python</code>运行环境，我们还加上了参数<code>--no-site-packages</code>，这样，已经安装到系统<code>Python</code>环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的<code>Python</code>运行环境。</p>
<p>3、进入环境</p>
<p>新建的<code>Python</code>环境被放到当前目录下的<code>venv</code>目录。有了<code>venv</code>这个<code>Python</code>环境，可以用<code>source</code>进入该环境：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ source venv/bin/<span class="built_in">activate</span></div><div class="line">(venv) root@sate-z:~/virenv<span class="comment">#</span></div><div class="line"><span class="comment"># 注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。</span></div></pre></td></tr></table></figure>
<p>下面正常安装各种第三方包，并运行<code>python</code>命令</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root<span class="symbol">@sate</span>-z:~/virenv<span class="meta"># pip install lxml</span></div></pre></td></tr></table></figure>
<p>在<code>venv</code>环境下，用<code>pip</code>安装的包都被安装到<code>venv</code>这个环境下，系统<code>Python</code>环境不受任何影响。也就是说，<code>venv</code>环境是专门针对<code>myproject</code>这个应用创建的。</p>
<p>退出当前的<code>venv</code>环境，使用<code>deactivate</code>命令：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(venv) root<span class="symbol">@sate</span>-z:~/virenv<span class="meta"># deactivate</span></div><div class="line">root<span class="symbol">@sate</span>-z:~/virenv<span class="meta">#</span></div></pre></td></tr></table></figure>
<p><code>virtualenv</code>是如何创建“独立”的<code>Python</code>运行环境的呢？原理很简单:就是把系统<code>Python</code>复制一份到<code>virtualenv</code>的环境，用命令<code>source venv/bin/activate</code>进入一个<code>virtualenv</code>环境时，<code>virtualenv</code>会修改相关环境变量，让命令<code>python</code>和<code>pip</code>均指向当前的<code>virtualenv</code>环境。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python装饰器]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>文中知识点和代码示例学习自慕课网，python进阶部分（<a href="http://www.imooc.com/learn/317）.学习笔记" target="_blank" rel="external">http://www.imooc.com/learn/317）.学习笔记</a></p>
</blockquote>
<p>装饰器的理解：</p>
<p>装饰器本质上是一个高阶函数，接受一个函数，进行处理，然后返回一个新的函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 有一个简单的函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x * <span class="number">2</span></div><div class="line"><span class="keyword">print</span> f1(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">#输出：10</span></div><div class="line"></div><div class="line"><span class="comment"># 实现运行该函数时，输出该函数的名称的日志功能</span></div><div class="line"><span class="comment"># 法一：直接在函数中写出，好理解，但是如果函数很多，那每个函数都要加一遍</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"call "</span> + f1.__name__ + <span class="string">"().."</span></div><div class="line">    <span class="keyword">return</span> x*<span class="number">2</span></div><div class="line"><span class="keyword">print</span> f1(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">#输出：</span></div><div class="line"><span class="comment">#call f1()..</span></div><div class="line"><span class="comment">#10</span></div><div class="line"></div><div class="line"><span class="comment"># 法二：使用装饰器，创建装饰器函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flog</span><span class="params">(f)</span>:</span>		<span class="comment">#定义装饰器函数，接受参数是 f 函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x)</span>:</span>		<span class="comment">#定义新的函数，来处理 f 函数，添加我们需要的日志信息，并返回 f 函数，参数 x 是 f1 的参数，如果 f1 函数有多个，这边也要写多个，要让 @log 自适应任何参数定义的函数，可以利用Python的 *args 和 **kw，保证任意个数的参数总是能正常调用</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"call "</span> + f.__name__ + <span class="string">"().."</span> </div><div class="line">        <span class="keyword">return</span> f(x)	<span class="comment">#执行原 f 函数</span></div><div class="line">    <span class="keyword">return</span> fn 		<span class="comment">#返回新的函数</span></div><div class="line"></div><div class="line"><span class="comment"># 调用装饰器，效果和 g1 = flog(f1);print g1(5) 一致。</span></div><div class="line"><span class="meta">@flog				</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x * <span class="number">2</span></div><div class="line"><span class="keyword">print</span> f1(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">#输出：</span></div><div class="line"><span class="comment">#call f1()..</span></div><div class="line"><span class="comment">#10</span></div></pre></td></tr></table></figure>
<p><strong>注：</strong> 上边<code>f1(x)</code>只接受一个函数，如果接受两个函数就会报错，要让 <code>@flog</code> 自适应任何参数定义的函数，可以利用Python的 <code>*args</code> 和 <code>**kw</code>，保证任意个数的参数总是能正常调用</p>
<p>例：计算函数调用的时间可以记录调用前后的当前时间戳，然后计算两个时间戳的差。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="comment"># 定义装饰器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">performance</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args, **kw)</span>:</span>	<span class="comment">#可以接受任意参数</span></div><div class="line">        t1 = time.time()	<span class="comment">#记录执行前的时间</span></div><div class="line">        r = f(*args, **kw)	<span class="comment">#执行原函数，并保存执行结果到变量 r 中</span></div><div class="line">        t2 = time.time()	<span class="comment">#记录执行结束后的时间</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call %s() in %fs'</span> % (f.__name__, (t2 - t1))	<span class="comment">#添加自定义输出内容</span></div><div class="line">        <span class="keyword">return</span> r			<span class="comment">#返回原函数的执行结果</span></div><div class="line">    <span class="keyword">return</span> fn				<span class="comment">#返回新函数</span></div><div class="line"></div><div class="line"><span class="comment">#调用装饰器</span></div><div class="line"><span class="meta">@performance</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</div><div class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><p>上边的实现的装饰器函数，只能输出固定的内容，除了<code>f.__name__</code>所定义的函数名称。如果想要根据函数的不同来给输出的日志划分等级的，如 a 函数日志等级为<code>info</code>，b 函数日志等级为<code>debug</code>，这里需要用到带参数的装饰器。如:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@log(<span class="string">'DEBUG'</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">()</span></span>:</div><div class="line">    pass</div></pre></td></tr></table></figure>
<p><code>@log(&#39;DEBUG&#39;)</code>等于之前无参数的装饰器的<code>@log</code>，即<code>@log(&#39;DEBUG&#39;)</code>这个返回的函数相当于之前无参数装饰器的<code>@log</code>。所以要在无参数的装饰器上层再加一个函数的嵌套。</p>
<p>例：输出日志等级</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">    带参数的装饰器,写三层嵌套的函数</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flog</span><span class="params">(devel)</span>:</span>    <span class="comment"># 定义带参数的装饰器.</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log_decorator</span><span class="params">(f)</span>:</span>   <span class="comment">#和无参数的装饰器相同</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">add_self</span><span class="params">(*args,**kwargs)</span>:</span>	<span class="comment">#添加输出的日志，执行f函数</span></div><div class="line">            <span class="keyword">print</span> <span class="string">"[%s],call %s().."</span> % (devel,f.__name__)</div><div class="line">            <span class="keyword">return</span>  f(*args,**kwargs)</div><div class="line">        <span class="keyword">return</span> add_self		</div><div class="line">    <span class="keyword">return</span> log_decorator	<span class="comment">#返回给flog("INFO")</span></div><div class="line"></div><div class="line"><span class="meta">@flog("INFO")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</div><div class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">输出</div><div class="line">[INFO],call factorial()..</div><div class="line">3628800</div><div class="line">"""</div></pre></td></tr></table></figure>
<p>例2：上一节的<code>@performance</code>只能打印秒，请给<code>@performace</code>增加一个参数，允许传入<code>&#39;s&#39;</code>或<code>&#39;ms&#39;</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">performance</span><span class="params">(unit)</span>:</span>s</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perf_decorator</span><span class="params">(f)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            t1 = time.time()</div><div class="line">            r = f(*args, **kw)</div><div class="line">            t2 = time.time()</div><div class="line">            t = (t2 - t1) * <span class="number">1000</span> <span class="keyword">if</span> unit==<span class="string">'ms'</span> <span class="keyword">else</span> (t2 - t1)</div><div class="line">            <span class="keyword">print</span> <span class="string">'call %s() in %f %s'</span> % (f.__name__, t, unit)</div><div class="line">            <span class="keyword">return</span> r</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> perf_decorator</div><div class="line"></div><div class="line"><span class="meta">@performance('ms')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</div><div class="line"><span class="keyword">print</span> factorial(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h3 id="完善装饰器"><a href="#完善装饰器" class="headerlink" title="完善装饰器"></a>完善装饰器</h3><p>经过<code>@decorator</code>“改造”后的函数，和原函数相比会有不同的地方，如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在没有decorator的情况下，打印函数名：</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">print</span> f1.__name__</div><div class="line"></div><div class="line"><span class="comment">#输出：f1</span></div><div class="line"></div><div class="line"><span class="comment"># 有decorator的情况下，再打印函数名：</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></div><div class="line">        <span class="keyword">return</span> f(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"><span class="meta">@log</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">print</span> f2.__name__</div><div class="line"></div><div class="line"><span class="comment">#输出：wrapper</span></div></pre></td></tr></table></figure>
<p>可见，由于<code>decorator</code>返回的新函数函数名已经不是<code>&#39;f2&#39;</code>，而是<code>@log</code>内部定义的<code>&#39;wrapper&#39;</code>。这对于那些依赖函数名的代码就会失效。<code>decorator</code>还改变了函数的<code>__doc__</code>等其它属性。如果要让调用者看不出一个函数经过了<code>@decorator</code>的“改造”，就需要把原函数的一些属性复制到新函数中。</p>
<p>Python内置的<code>functools</code>可以用来自动化完成这个“复制”的任务：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(f)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(f)		#增加该行</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call...'</span></div><div class="line">        <span class="keyword">return</span> f(*args, **kw)</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure>
<p>最后需要指出，由于我们把原函数签名改成了<code>(*args, **kw)</code>，因此，无法获得原函数的原始参数信息。即便我们采用固定参数来装饰只有一个参数的函数</p>
<p>例：该方法使用到上节的例子中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time, functools</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">performance</span><span class="params">(unit)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perf_decorator</span><span class="params">(f)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(f)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></div><div class="line">            t1 = time.time()</div><div class="line">            r = f(*args, **kw)</div><div class="line">            t2 = time.time()</div><div class="line">            t = (t2 - t1) * <span class="number">1000</span> <span class="keyword">if</span> unit==<span class="string">'ms'</span> <span class="keyword">else</span> (t2 - t1)</div><div class="line">            <span class="keyword">print</span> <span class="string">'call %s() in %f %s'</span> % (f.__name__, t, unit)</div><div class="line">            <span class="keyword">return</span> r</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> perf_decorator</div><div class="line"></div><div class="line"><span class="meta">@performance('ms')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</div><div class="line"><span class="keyword">print</span> factorial.__name__</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python正则2]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E6%AD%A3%E5%88%992/</url>
      <content type="html"><![CDATA[<blockquote>
<p>python自带<code>re</code>模块提供了对正则表达式的支持</p>
</blockquote>
<p><code>re</code>模块主要用到的方法列举如下：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>re.compile(pattern[, flags]</code></td>
<td>根据包含正则表达式的字符串创建模式对象</td>
</tr>
<tr>
<td><code>re.search(pattern, string[, flags])</code></td>
<td>在字符串中寻找模式</td>
</tr>
<tr>
<td><code>re.match(pattern, string[, flags])</code></td>
<td>在字符串的开始处中寻找匹配模式</td>
</tr>
<tr>
<td><code>re.split(pattern, string[, maxsplit=0])</code></td>
<td>根据模式的匹配项来分割字符串</td>
</tr>
<tr>
<td><code>re.findall(pattern, string)</code></td>
<td>列出字符串中模式的所有匹配项</td>
</tr>
<tr>
<td><code>re.finditer(pattern, string[, flags])</code></td>
<td>返回一个顺序访问每一个匹配结果（Match对象）的迭代器</td>
</tr>
<tr>
<td><code>re.sub(pat, repl, string[, count=0])</code></td>
<td>将字符串中所有的 pat 的匹配项用 repl 替换</td>
</tr>
<tr>
<td><code>re.subn(pattern, repl, string[, count])</code></td>
<td>返回 (sub(repl, string[, count]) 替换次数)。</td>
</tr>
<tr>
<td><code>re.escape(string)</code></td>
<td>将字符串中所有特殊正则表达式字符转义</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python正则1]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E6%AD%A3%E5%88%991/</url>
      <content type="html"><![CDATA[<p><code>re</code>模块包含对正则表达式的支持</p>
<p>先讲一些正则中的匹配规则</p>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符 ."></a>通配符 <code>.</code></h3><p><code>.</code>可以匹配任何字符（除了换行符<code>\n</code>，在 DOTALL 模式中也能匹配换行符）。只能匹配一个字符</p>
<hr>
<h3 id="对特殊字符进行转义"><a href="#对特殊字符进行转义" class="headerlink" title="对特殊字符进行转义 \"></a>对特殊字符进行转义 <code>\</code></h3><p>如果想要匹配 <code>&#39;python.org&#39;</code> 可以使用 <code>&#39;python\\.org&#39;</code></p>
<p>这边使用两个反斜线，一是通过解释器转义，二是通过<code>re</code>模块转义，建议使用原始字符串，如<code>r&#39;python\.org&#39;</code></p>
<hr>
<h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集 []"></a>字符集 <code>[]</code></h3><p>字符集可以匹配它所包含的任意字符</p>
<p>例：<code>[pj]ython</code> 匹配 <code>python</code> 和 <code>jython</code></p>
<p>例：<code>[a-z]</code> 匹配 a 到 z 所有字母（字符集只能匹配一个这样的字符）</p>
<p>例：<code>[a-zA-Z0-9]</code> 匹配任意大小写字母和数字（字符集只能匹配一个这样的字符）</p>
<hr>
<h3 id="反转字符集"><a href="#反转字符集" class="headerlink" title="反转字符集 [^]"></a>反转字符集 <code>[^]</code></h3><p>例： <code>[^abc]</code> 匹配任何除了 a,b,c 之外的字符</p>
<hr>
<h3 id="选择符合和子模式"><a href="#选择符合和子模式" class="headerlink" title="选择符合和子模式 |"></a>选择符合和子模式 <code>|</code></h3><p><strong>选择符：</strong></p>
<p>例： <code>&#39;python|perl&#39;</code> 匹配 <code>python</code> 或者 <code>perl</code></p>
<p><strong>子模式：</strong> 用圆括号括起来需要的部分称为子模式</p>
<p>例： <code>&#39;p(yhon|erl)&#39;</code> 匹配 <code>python</code> 或者 <code>perl</code></p>
<hr>
<h3 id="可选项和重复子模式"><a href="#可选项和重复子模式" class="headerlink" title="可选项和重复子模式 ?"></a>可选项和重复子模式 <code>?</code></h3><p><strong>可选项：</strong>在子模式的后边加上问好就变成了可选项。它可以出现在匹配字符串中，但并非是必须的。</p>
<p>例：<code>r&#39;(http://)?(www\.)?python\.org&#39;</code></p>
<p>可以匹配到的下列字符串</p>
<p><code>&#39;http://www.python.org&#39;</code></p>
<p><code>&#39;http://python.org&#39;</code></p>
<p><code>&#39;www.python.org&#39;</code></p>
<p><code>&#39;python.org&#39;</code></p>
<p><strong>重复子模式：</strong>允许子模式重复多次的运算符</p>
<ul>
<li><code>(pattern)*</code> 允许模式重复0次或多次</li>
<li><code>(pattern)+</code> 允许模式重复1次或多次</li>
<li><code>(pattern){m,n}</code> 允许模式重复 m ~ n 次</li>
</ul>
<p>例： <code>r&#39;w*\.python\.org&#39;</code> 可以匹配<code>.python.org</code>、<code>w.python.org</code>、<code>wwwww.python.org</code>等等等等。</p>
<hr>
<h3 id="字符串的开始和结尾"><a href="#字符串的开始和结尾" class="headerlink" title="字符串的开始和结尾 ^``$"></a>字符串的开始和结尾 <code>^``$</code></h3><p><strong>只匹配开始：</strong></p>
<p>例： 只想在字符串的开头而不是其他位置匹配<code>&#39;ht+p&#39;</code>,可以使用<code>&#39;^ht+p&#39;</code>匹配，可以匹配到<code>&#39;http://python,org&#39;</code>等等，而不会匹配<code>&#39;www.http.com&#39;</code>.</p>
<p><strong>只匹配结尾：</strong></p>
<p>如果只想匹配字符串结尾，可以使用<code>$</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python文件和目录的操作]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>操作文件和目录的函数一部分放在<code>os</code>模块中，一部分放在<code>os.path</code>模块中，这一点要注意一下。查看、创建和删除目录可以这么调用：</p>
<h3 id="创建和删除目录"><a href="#创建和删除目录" class="headerlink" title="创建和删除目录"></a>创建和删除目录</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看当前目录的绝对路径:</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; os.path.abspath(<span class="string">'.'</span>)</div><div class="line"><span class="string">'/Users/michael'</span></div><div class="line"></div><div class="line"><span class="comment"># 创建一个目录:</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; os.mkdir(<span class="string">'/Users/michael/testdir'</span>)</div><div class="line"><span class="comment"># 删掉一个目录:</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; os.rmdir(<span class="string">'/Users/michael/testdir'</span>)</div></pre></td></tr></table></figure>
<h3 id="列出某目录下的目录"><a href="#列出某目录下的目录" class="headerlink" title="列出某目录下的目录"></a>列出某目录下的目录</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; os.listdir(<span class="string">"/root"</span>)</div><div class="line">[<span class="string">'.ansible-console_history'</span>, <span class="string">'.ipython'</span>, <span class="string">'.ssh'</span>, <span class="string">'virenv'</span>, <span class="string">'.lesshst'</span>, <span class="string">'socket_server.py'</span>, <span class="string">'.java'</span>, <span class="string">'.rnd'</span>, <span class="string">'.python_history'</span>, <span class="string">'.bashrc'</span>, <span class="string">'.bash_history'</span>, <span class="string">'.vim'</span>, <span class="string">'.ansible_async'</span>, <span class="string">'.pip'</span>, <span class="string">'.profile'</span>, <span class="string">'.ansible'</span>, <span class="string">'.mysql_history'</span>, <span class="string">'sina.html'</span>, <span class="string">'.viminfo'</span>, <span class="string">'.jenkins'</span>, <span class="string">'.gitconfig'</span>, <span class="string">'.rediscli_history'</span>, <span class="string">'.vimrc'</span>, <span class="string">'.cache'</span>]</div></pre></td></tr></table></figure>
<h3 id="路径的合并和拆分"><a href="#路径的合并和拆分" class="headerlink" title="路径的合并和拆分"></a>路径的合并和拆分</h3><p><strong>这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。</strong></p>
<p>把两个路径合成一个时，不要直接拼字符串，而要通过<code>os.path.join()</code>函数，这样可以正确处理不同操作系统的路径分隔符。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; os<span class="selector-class">.path</span><span class="selector-class">.join</span>(<span class="string">'/Users/michael'</span>, <span class="string">'testdir'</span>)</div><div class="line"><span class="string">'/Users/michael/testdir'</span></div></pre></td></tr></table></figure>
<p>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过<code>os.path.split()</code>函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; os<span class="selector-class">.path</span><span class="selector-class">.split</span>(<span class="string">'/Users/michael/testdir/file.txt'</span>)</div><div class="line">(<span class="string">'/Users/michael/testdir'</span>, <span class="string">'file.txt'</span>)</div></pre></td></tr></table></figure>
<h3 id="获取文件扩展名"><a href="#获取文件扩展名" class="headerlink" title="获取文件扩展名"></a>获取文件扩展名</h3><p><code>os.path.splitext()</code>可以直接让你得到文件扩展名，很多时候非常方便：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; os<span class="selector-class">.path</span><span class="selector-class">.splitext</span>(<span class="string">'/path/to/file.txt'</span>)</div><div class="line">(<span class="string">'/path/to/file'</span>, <span class="string">'.txt'</span>)</div></pre></td></tr></table></figure>
<h3 id="文件的重命名和删除"><a href="#文件的重命名和删除" class="headerlink" title="文件的重命名和删除"></a>文件的重命名和删除</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 对文件重命名:</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; os.rename(<span class="string">'test.txt'</span>, <span class="string">'test.py'</span>)</div><div class="line"><span class="comment"># 删掉文件:</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; os.remove(<span class="string">'test.py'</span>)</div></pre></td></tr></table></figure>
<p>如何利用Python的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> os<span class="selector-class">.path</span><span class="selector-class">.isdir</span>(x)]</div><div class="line">[<span class="string">'.lein'</span>, <span class="string">'.local'</span>, <span class="string">'.m2'</span>, <span class="string">'.npm'</span>, <span class="string">'.ssh'</span>, <span class="string">'.Trash'</span>, <span class="string">'.vim'</span>, <span class="string">'Adlm'</span>, <span class="string">'Applications'</span>, <span class="string">'Desktop'</span>, ...]</div></pre></td></tr></table></figure>
<p>要列出所有的.py文件，也只需一行代码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>) <span class="keyword">if</span> os<span class="selector-class">.path</span><span class="selector-class">.isfile</span>(x) and os<span class="selector-class">.path</span><span class="selector-class">.splitext</span>(x)[<span class="number">1</span>]==<span class="string">'.py'</span>]</div><div class="line">[<span class="string">'apis.py'</span>, <span class="string">'config.py'</span>, <span class="string">'models.py'</span>, <span class="string">'pymonitor.py'</span>, <span class="string">'test_db.py'</span>, <span class="string">'urls.py'</span>, <span class="string">'wsgiapp.py'</span>]</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python同步_异步_阻塞_非阻塞]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%90%8C%E6%AD%A5-%E5%BC%82%E6%AD%A5-%E9%98%BB%E5%A1%9E-%E9%9D%9E%E9%98%BB%E5%A1%9E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>抄自原文 ：<a href="http://www.jianshu.com/p/aed6067eeac9" target="_blank" rel="external">http://www.jianshu.com/p/aed6067eeac9</a></p>
</blockquote>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 同步、异步</span></div><div class="line">同步：就是一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能算完成，这是一种可靠的任务序列</div><div class="line"></div><div class="line">异步：是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行，只要自己完成了整个任务就算完成了。</div><div class="line"></div><div class="line"><span class="comment"># 阻塞、非阻塞</span></div><div class="line">阻塞与非阻塞主要是程序（线程）等待消息通知时的状态角度来说的</div><div class="line"></div><div class="line">阻塞调用：是指调用结果返回之前，当前线程会被挂起，一直处于等待消息通知，不能够执行其他业务</div><div class="line"></div><div class="line">阻塞调用 和 同步调用 是不同的。</div><div class="line"></div><div class="line">对于同步调用来说，很多时候当前线程可能还是激活的，只是从逻辑上当前函数没有返回而已，此时，这个线程可能也会处理其他的消息</div><div class="line"></div><div class="line"><span class="comment"># 同步阻塞、同步非阻塞</span></div><div class="line">同步非阻塞：如果这个线程在等待当前函数返回时，仍在执行其他消息处理</div><div class="line">同步阻塞：如果这个线程在等待当前函数返回时，没有执行其他消息处理，而是处于挂起等待状态</div><div class="line"></div><div class="line"><span class="comment"># 异步阻塞、异步非阻塞， 同理</span></div><div class="line"></div><div class="line"></div><div class="line">如果在这个等待的过程中，等待者除了等待消息通知之外不能做其它的事情，那么该机制就是阻塞的</div><div class="line"></div><div class="line">同步非阻塞形式实际上是效率低下的，异步非阻塞形式却没有这样的问题，因为打电话是你(等待者)的事情，</div><div class="line">而通知你则是柜台(消息触发机制)的事情，程序没有在两种不同的操作中来回切换。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="number">1</span>、同步阻塞形式</div><div class="line"></div><div class="line">效率是最低的，</div><div class="line"></div><div class="line">拿上面的例子来说，就是你专心排队，什么别的事都不做。</div><div class="line"></div><div class="line">实际程序中：就是未对fd 设置O_NONBLOCK标志位的<span class="keyword">read</span>/<span class="keyword">write</span> 操作；</div><div class="line"></div><div class="line"><span class="number">2</span>、异步阻塞形式</div><div class="line"></div><div class="line">如果在银行等待办理业务的人采用的是异步的方式去等待消息被触发（通知），也就是领了一张小纸条，假如在这段时间里他不能离开银行做其它的事情，那么很显然，这个人被阻塞在了这个等待的操作上面；</div><div class="line"></div><div class="line">异步操作是可以被阻塞住的，只不过它不是在处理消息时阻塞，而是在等待消息通知时被阻塞。</div><div class="line"></div><div class="line">比如<span class="keyword">select</span> 函数，假如传入的最后一个timeout参数为NULL，那么如果所关注的事件没有一个被触发，程序就会一直阻塞在这个<span class="keyword">select</span> 调用处。</div><div class="line"></div><div class="line"><span class="number">3</span>、同步非阻塞形式</div><div class="line"></div><div class="line">实际上是效率低下的，</div><div class="line"></div><div class="line">想象一下你一边打着电话一边还需要抬头看到底队伍排到你了没有，如果把打电话和观察排队的位置看成是程序的两个操作的话，这个程序需要在这两种不同的行为之间来回的切换，效率可想而知是低下的。</div><div class="line"></div><div class="line">很多人会写阻塞的<span class="keyword">read</span>/<span class="keyword">write</span> 操作，但是别忘了可以对fd设置O_NONBLOCK 标志位，这样就可以将同步操作变成非阻塞的了。</div><div class="line"></div><div class="line"><span class="number">4</span>、异步非阻塞形式</div><div class="line"></div><div class="line">效率更高，</div><div class="line"></div><div class="line">因为打电话是你(等待者)的事情，而通知你则是柜台(消息触发机制)的事情，程序没有在两种不同的操作中来回切换。</div><div class="line"></div><div class="line">比如说，这个人突然发觉自己烟瘾犯了，需要出去抽根烟，于是他告诉大堂经理说，排到我这个号码的时候麻烦到外面通知我一下(注册一个回调函数)，那么他就没有被阻塞在这个等待的操作上面，自然这个就是异步+非阻塞的方式了。</div><div class="line"></div><div class="line">如果使用异步非阻塞的情况，比如aio<span class="number">_</span>*组的操作，当发起一个aio_read操作时，函数会马上返回不会被阻塞，当所关注的事件被触发时会调用之前注册的回调函数进行处理。</div></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">#### 小明的故事</div><div class="line">对上面所讲的概念再次进行一个场景梳理，上面已经明确说明，同步/异步关注的是消息通知的机制，而阻塞/非阻塞关注的是程序（线程）等待消息通知时的状态。以小明下载文件打个比方，从这两个关注点来再次说明这两组概念，希望能够更好的促进大家的理解。</div><div class="line"></div><div class="line"><span class="number">1</span>、同步阻塞：小明一直盯着下载进度条，到 <span class="number">100</span>% 的时候就完成。</div><div class="line"></div><div class="line">同步体现在：等待下载完成通知；</div><div class="line"></div><div class="line">阻塞体现在：等待下载完成通知过程中，不能做其他任务处理；</div><div class="line"></div><div class="line"><span class="number">2</span>、同步非阻塞：小明提交下载任务后就去干别的，每过一段时间就去瞄一眼进度条，看到 <span class="number">100</span>% 就完成。</div><div class="line"></div><div class="line">同步体现在：等待下载完成通知；</div><div class="line"></div><div class="line">非阻塞体现在：等待下载完成通知过程中，去干别的任务了，只是时不时会瞄一眼进度条；【小明必须要在两个任务间切换，关注下载进度】</div><div class="line"></div><div class="line"><span class="number">3</span>、异步阻塞：小明换了个有下载完成通知功能的软件，下载完成就“叮”一声。不过小明仍然一直等待“叮”的声音（看起来很傻，不是吗）。</div><div class="line"></div><div class="line">异步体现在：下载完成“叮”一声通知；</div><div class="line"></div><div class="line">阻塞体现在：等待下载完成“叮”一声通知过程中，不能做其他任务处理；</div><div class="line"></div><div class="line"><span class="number">4</span>、异步非阻塞：仍然是那个会“叮”一声的下载软件，小明提交下载任务后就去干别的，听到“叮”的一声就知道完成了。</div><div class="line"></div><div class="line">异步体现在：下载完成“叮”一声通知；</div><div class="line"></div><div class="line">非阻塞体现在：等待下载完成“叮”一声通知过程中，去干别的任务了，只需要接收“叮”声通知即可；【软件处理下载任务，小明处理其他任务，不需关注进度，只需接收软件“叮”声通知，即可】</div><div class="line">也就是说，同步/异步是“下载完成消息”通知的方式（机制），而阻塞/非阻塞则是在等待“下载完成消息”通知过程中的状态（能不能干其他任务），在不同的场景下，同步/异步、阻塞/非阻塞的四种组合都有应用。</div><div class="line"></div><div class="line">所以，综上所述，同步和异步仅仅是关注的消息如何通知的机制，而阻塞与非阻塞关注的是等待消息通知时的状态。也就是说，同步的情况下，是由处理消息者自己去等待消息是否被触发，而异步的情况下是由触发机制来通知处理消息者，所以在异步机制中，处理消息者和触发机制之间就需要一个连接的桥梁：</div><div class="line"></div><div class="line">在银行的例子中，这个桥梁就是小纸条上面的号码。</div><div class="line"></div><div class="line">在小明的例子中，这个桥梁就是软件“叮”的声音。</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python私有字段]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E7%A7%81%E6%9C%89%E5%AD%97%E6%AE%B5/</url>
      <content type="html"><![CDATA[<p><code>@property</code> 在类中一般和私有字段一起使用。</p>
<p>类中如果有私有字段在外部是无法直接访问的，通过<code>@property</code>使其可读或可写。</p>
<h3 id="经典类"><a href="#经典类" class="headerlink" title="经典类"></a>经典类</h3><p>经典类中的私有字段是可读可写的。（没有只读功能）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.__name = <span class="string">'sate'</span></div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__name</div><div class="line"></div><div class="line">p1 = Person()</div><div class="line"><span class="keyword">print</span> p1.Name			<span class="comment">#通过@property 可读。</span></div><div class="line">p1.Name = <span class="string">'zheng'</span>		<span class="comment">#可写</span></div><div class="line"><span class="keyword">print</span> p1.Name</div></pre></td></tr></table></figure>
<h3 id="新式类"><a href="#新式类" class="headerlink" title="新式类"></a>新式类</h3><p>新式类中的私有字段是只读，不可写，如果要可写，需要再创建一个被<code>@xxx.setter</code>修饰的特性。</p>
<p>如果想设置为外部只读或者外部可写特性，可使用如下方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class_1</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        <span class="comment"># 定义一个私有字段age,外部无法直接访问</span></div><div class="line">        self.__age = age</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'my name is %s '</span> % self.name</div><div class="line"></div><div class="line"><span class="comment"># 外部无法访问,但是可以通过内部访问到。</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_age</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'my age is %s'</span> % self.__age</div><div class="line"></div><div class="line"><span class="comment"># 使用属性方法将age()方法变为一个类的静态属性。使之变为可读属性。</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__age</div><div class="line"></div><div class="line"><span class="comment"># 使__age私有字段变成可写,只需调用age属性并直接赋值即可(装饰器格式为‘@函数名.setter’)</span></div><div class="line"><span class="comment"># 如果私有变量要设置为只读不可写，则直接去除本段即可。</span></div><div class="line"><span class="meta">    @age.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.__age = value</div><div class="line"></div><div class="line">cla = Class_1(<span class="string">'sate'</span>, <span class="number">12</span>)</div><div class="line"></div><div class="line"><span class="comment"># 读取正常字段</span></div><div class="line">cla.read_name()</div><div class="line"></div><div class="line"><span class="comment"># 调用方法读取__age私有字段</span></div><div class="line">cla.read_age()</div><div class="line"></div><div class="line"><span class="comment"># 使用属性方法读取__age私有字段</span></div><div class="line"><span class="keyword">print</span> cla.age</div><div class="line"></div><div class="line"><span class="comment"># 更改类中的__私有字段</span></div><div class="line">cla.age = <span class="number">18</span></div><div class="line"><span class="keyword">print</span> cla.age</div><div class="line"></div><div class="line"><span class="comment"># 结果==&gt;</span></div><div class="line">my name <span class="keyword">is</span> sate </div><div class="line">my age <span class="keyword">is</span> <span class="number">12</span></div><div class="line"><span class="number">12</span></div><div class="line"><span class="number">18</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python生成器]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E7%94%9F%E6%88%90%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>
<p>在<code>Python</code>中，这种一边循环一边计算的机制，称为生成器（<code>Generator</code>）</p>
<h3 id="创建生成器"><a href="#创建生成器" class="headerlink" title="创建生成器"></a>创建生成器</h3><p>1、将列表生成器的<code>[]</code>改为<code>()</code>就会创建一个<code>generator</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列表生成器，一次性全部生成</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> L</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</div><div class="line"></div><div class="line"><span class="comment"># 创建生成器</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = (i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> g</div><div class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x7fbbdbd68b90</span>&gt;</div><div class="line"></div><div class="line"><span class="comment"># 使用next()方法一个个打印出来。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g.next()</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g.next()</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g.next()</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g.next()</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g.next()</div><div class="line"><span class="number">16</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g.next()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">StopIteration</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p><strong>注：</strong><code>generator</code>保存的是算法，每次调用<code>next()</code>，就计算出下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出<code>StopIteration</code>的错误。<br>这种情况下，使用<code>for</code>循环会更好，因为是可迭代的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = (i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> g:</div><div class="line"><span class="meta">... </span>  <span class="keyword">print</span> i</div><div class="line">...</div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">9</span></div><div class="line"><span class="number">16</span></div></pre></td></tr></table></figure>
<p>例：斐波那契数列，用函数实现，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 普通函数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line"><span class="meta">... </span>  n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></div><div class="line"><span class="meta">... </span>  <span class="keyword">while</span> n &lt; max:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> b</div><div class="line"><span class="meta">... </span>    a,b = b,a+b</div><div class="line"><span class="meta">... </span>    n += <span class="number">1</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">6</span>)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">8</span></div><div class="line"></div><div class="line"><span class="comment"># 使用生成器</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(max)</span>:</span></div><div class="line"><span class="meta">... </span>  n,a,b = <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></div><div class="line"><span class="meta">... </span>  <span class="keyword">while</span> n &lt; max:</div><div class="line"><span class="meta">... </span>    <span class="keyword">yield</span> b</div><div class="line"><span class="meta">... </span>    a,b = b,a+b</div><div class="line"><span class="meta">... </span>    n += <span class="number">1</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> fib(<span class="number">6</span>):</div><div class="line"><span class="meta">... </span>  <span class="keyword">print</span> i</div><div class="line">...</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure>
<p>2、使用<code>yield</code>关键字，该函数就变为一个生成器。</p>
<p><code>generator</code>和函数的执行流程不一样。函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。而变成<code>generator</code>的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>  <span class="keyword">print</span> <span class="string">"step 1"</span></div><div class="line"><span class="meta">... </span>  <span class="keyword">yield</span> <span class="number">1</span></div><div class="line"><span class="meta">... </span>  <span class="keyword">print</span> <span class="string">"step 2"</span></div><div class="line"><span class="meta">... </span>  <span class="keyword">yield</span> <span class="number">3</span></div><div class="line"><span class="meta">... </span>  <span class="keyword">print</span> <span class="string">"step 3"</span></div><div class="line"><span class="meta">... </span>  <span class="keyword">yield</span> <span class="number">5</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o = odd()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</div><div class="line">step <span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</div><div class="line">step <span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</div><div class="line">step <span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>o.next()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">StopIteration</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python排序]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h3 id="内置函数sorted-list-sort-的使用"><a href="#内置函数sorted-list-sort-的使用" class="headerlink" title="内置函数sorted() / list.sort()的使用"></a>内置函数<code>sorted()</code> / <code>list.sort()</code>的使用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># sorted()不会改变原有列表，并且可以在所有可迭代类型上使用</div><div class="line">&gt;&gt;&gt; help(sorted)</div><div class="line">Help on built-in function sorted in module __builtin__:</div><div class="line"></div><div class="line">sorted(...)</div><div class="line">    sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list</div><div class="line"></div><div class="line"># list.sort()改变原有列表，只能应用在 list中</div><div class="line">&gt;&gt;&gt; help(list.sort)</div><div class="line">Help on method_descriptor:</div><div class="line"></div><div class="line">sort(...)</div><div class="line">    L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;</div><div class="line">    cmp(x, y) -&gt; -1, 0, 1</div></pre></td></tr></table></figure>
<p><code>iterable</code>：是可迭代类型;</p>
<p><code>cmp</code>：用于比较的函数，比较什么由<code>key</code>决定,有默认值，迭代集合中的一项;</p>
<p><code>key</code>：用列表元素的某个属性和函数进行作为关键字，有默认值，迭代集合中的一项;</p>
<p><code>reverse</code>：排序规则(升序或者降序). <code>reverse = True (降序)</code> 或者 <code>reverse = False (降序，默认值)</code>。</p>
<p>返回值：是一个经过排序的可迭代类型，与iterable一样。</p>
<p>———<strong><code>cmp</code>和<code>key</code>可以使用<code>lambda</code>表达式。</strong></p>
<ul>
<li><strong>用<code>key</code>函数排序 (效率<code>key</code>&gt;<code>cmp</code>)</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lis = [(<span class="string">'Jim'</span>, <span class="string">'C'</span>, <span class="number">12</span>), (<span class="string">'Tom'</span>, <span class="string">'A'</span>, <span class="number">18</span>), (<span class="string">'Lili'</span>, <span class="string">'B'</span>, <span class="number">24</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> sorted(lis, key=<span class="keyword">lambda</span> x:x[<span class="number">2</span>])</div><div class="line">[(<span class="string">'Jim'</span>, <span class="string">'C'</span>, <span class="number">12</span>), (<span class="string">'Tom'</span>, <span class="string">'A'</span>, <span class="number">18</span>), (<span class="string">'Lili'</span>, <span class="string">'B'</span>, <span class="number">24</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> sorted(lis, key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</div><div class="line">[(<span class="string">'Tom'</span>, <span class="string">'A'</span>, <span class="number">18</span>), (<span class="string">'Lili'</span>, <span class="string">'B'</span>, <span class="number">24</span>), (<span class="string">'Jim'</span>, <span class="string">'C'</span>, <span class="number">12</span>)]</div></pre></td></tr></table></figure>
<ul>
<li><strong>用<code>cmp</code>函数排序</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> sorted(lis, cmp=<span class="keyword">lambda</span> x,y:cmp(x[<span class="number">2</span>],y[<span class="number">2</span>]))</div><div class="line">[(<span class="string">'Jim'</span>, <span class="string">'C'</span>, <span class="number">12</span>), (<span class="string">'Tom'</span>, <span class="string">'A'</span>, <span class="number">18</span>), (<span class="string">'Lili'</span>, <span class="string">'B'</span>, <span class="number">24</span>)]</div></pre></td></tr></table></figure>
<hr>
<h3 id="operator-itemgetter函数的使用"><a href="#operator-itemgetter函数的使用" class="headerlink" title="operator.itemgetter函数的使用"></a><code>operator.itemgetter</code>函数的使用</h3><p><code>operator</code>模块提供<code>itemgetter</code>函数用于获取对象的哪些维的数据或者哪些<code>key</code>对应的数据,参数就是索引号或<code>key</code>值.可以设置多个索引号或<code>key</code>值。</p>
<p><strong>对列表的操作：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> operator</div><div class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</div><div class="line">b = operator.itemgetter(<span class="number">1</span>)      <span class="comment"># 定义b函数，获取对象的1索引值</span></div><div class="line"><span class="keyword">print</span> b <span class="comment">#  &lt;operator.itemgetter at 0x10db69b50&gt;</span></div><div class="line"><span class="keyword">print</span> b(a) <span class="comment"># 'b'</span></div><div class="line"></div><div class="line">b = operator.itemgetter(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="keyword">print</span> b(a) <span class="comment"># ('b', 'c')</span></div></pre></td></tr></table></figure>
<p><strong>对字典的操作：</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">students = [&#123;<span class="string">'name'</span>:<span class="string">'fang'</span>, <span class="string">'age'</span>:<span class="number">24</span>&#125;, &#123;<span class="string">'name'</span>:<span class="string">'job'</span>, <span class="string">'age'</span>:<span class="number">20</span>&#125;, &#123;<span class="string">'name'</span>:<span class="string">'zen'</span>, <span class="string">'age'</span>:<span class="number">40</span>&#125;]</div><div class="line">b = operator.itemgetter(<span class="string">'name'</span>, <span class="string">'age'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> students:</div><div class="line">    <span class="keyword">print</span> b(i)</div><div class="line">    ....:     </div><div class="line"></div><div class="line">(<span class="string">'fang'</span>, <span class="number">24</span>)</div><div class="line">(<span class="string">'job'</span>, <span class="number">20</span>)</div><div class="line">(<span class="string">'zen'</span>, <span class="number">40</span>)</div></pre></td></tr></table></figure>
<p><strong>注：<code>operator.itemgetter</code>函数获取的不是值，而是定义了一个函数，通过该函数作用到对象上才能获取值。其多与<code>sorted</code>函数一块使用,如下方法实现和上边一样的效果</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>lis = [(<span class="string">'Jim'</span>, <span class="string">'C'</span>, <span class="number">12</span>), (<span class="string">'Tom'</span>, <span class="string">'A'</span>, <span class="number">18</span>), (<span class="string">'Lili'</span>, <span class="string">'B'</span>, <span class="number">24</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="comment"># 通过student的第三个域排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(lis, key=itemgetter(<span class="number">2</span>))</div><div class="line">[(<span class="string">'Jim'</span>, <span class="string">'C'</span>, <span class="number">12</span>), (<span class="string">'Tom'</span>, <span class="string">'A'</span>, <span class="number">18</span>), (<span class="string">'Lili'</span>, <span class="string">'B'</span>, <span class="number">24</span>)]</div><div class="line"><span class="comment"># 根据第二个域和第三个域进行排序</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(lis, key=itemgetter(<span class="number">1</span>,<span class="number">2</span>))</div><div class="line">[(<span class="string">'Tom'</span>, <span class="string">'A'</span>, <span class="number">18</span>), (<span class="string">'Lili'</span>, <span class="string">'B'</span>, <span class="number">24</span>), (<span class="string">'Jim'</span>, <span class="string">'C'</span>, <span class="number">12</span>)]</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python局部变量和全局变量]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p><strong>在函数定义中声明的变量，他们与在函数外使用的其它同名变量没有任何关系，即变量名称对函数来说是局部的。</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">50</span>		<span class="comment">#全局变量</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></div><div class="line">	x = <span class="number">20</span> 		<span class="comment">#局部变量，虽然和函数外边的 x 变量同名，但互不影响</span></div><div class="line">	<span class="keyword">print</span> <span class="string">'局部变量x: '</span>, x</div><div class="line"></div><div class="line">func1()</div><div class="line"><span class="keyword">print</span> <span class="string">'全局变量x: '</span>, x</div><div class="line"></div><div class="line"><span class="comment"># 结果如下， 函数内的赋值并没有影响到函数外 x 的值</span></div><div class="line">局部变量x:  <span class="number">20</span></div><div class="line">全局变量x:  <span class="number">50</span></div></pre></td></tr></table></figure>
<h3 id="全局声明"><a href="#全局声明" class="headerlink" title="全局声明"></a>全局声明</h3><p>如果想在函数内改变某一个全局变量，那必须使用<code>global</code>语句。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">50</span>  <span class="comment"># 全局变量</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> x		<span class="comment">#定义全局变量</span></div><div class="line">    x = <span class="number">20</span>  <span class="comment">#定义后的 x 变量可以在全局范围内更改</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'函数内变量x: '</span>, x</div><div class="line"></div><div class="line">func1()</div><div class="line"><span class="keyword">print</span> <span class="string">'全局变量x: '</span>, x</div><div class="line"><span class="comment"># 结果，函数内的赋值更改了函数外 x 的值</span></div><div class="line">局部变量x:  <span class="number">20</span></div><div class="line">全局变量x:  <span class="number">20</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python高阶函数]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>文中知识点和代码示例学习自慕课网，python进阶部分（<a href="http://www.imooc.com/learn/317）.学习笔记" target="_blank" rel="external">http://www.imooc.com/learn/317）.学习笔记</a></p>
</blockquote>
<h3 id="把函数作为参数"><a href="#把函数作为参数" class="headerlink" title="把函数作为参数"></a>把函数作为参数</h3><p>例1：求两个数字绝对值的和(<code>abs(x)+abs(y)</code>)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y,f)</span>:</span></div><div class="line">    <span class="keyword">return</span> f(x) + f(y)</div><div class="line"></div><div class="line"><span class="comment"># add 函数的x,y,f 参数可以是任何值，如果 f 是个函数，则 x，y 两个参数分别带入到 f 函数中求值后，再做为 add 函数的参数传入。</span></div><div class="line"><span class="keyword">print</span> add(<span class="number">-5</span>,<span class="number">9</span>,abs)</div></pre></td></tr></table></figure>
<p>例2：求√x + √y的值</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line">def <span class="built_in">add</span>(x, y, f):</div><div class="line">    <span class="keyword">return</span> f(x) + f(y)</div><div class="line"></div><div class="line"><span class="built_in">print</span> <span class="built_in">add</span>(<span class="number">25</span>, <span class="number">9</span>, math.<span class="built_in">sqrt</span>)</div></pre></td></tr></table></figure>
<h3 id="map-函数"><a href="#map-函数" class="headerlink" title="map() 函数"></a>map() 函数</h3><p>它接收一个函数<code>f</code>和一个<code>list</code>，并通过把函数<code>f</code>依次作用在<code>list</code>的每个元素上，得到一个新的<code>list</code> 并返回。</p>
<p>例1：把列表总每个元素都取二次方</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x * x</div><div class="line"><span class="keyword">print</span> map(f,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</div><div class="line"></div><div class="line"><span class="comment">#[1, 4, 9, 16, 25, 36, 49, 64, 81]</span></div></pre></td></tr></table></figure>
<p>例2：将列表中的字符串都变为首字母大写</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_name</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> s.title()</div><div class="line"><span class="keyword">print</span> map(format_name, [<span class="string">'adam'</span>, <span class="string">'LISA'</span>, <span class="string">'barT'</span>])</div><div class="line"></div><div class="line"><span class="comment">#['Adam', 'Lisa', 'Bart']</span></div></pre></td></tr></table></figure>
<h3 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce() 函数"></a>reduce() 函数</h3><p><code>reduce()</code>函数接收的参数和<code>map()</code>类似，一个函数<code>f</code>，一个<code>list</code>，但行为和<code>map()</code>不同，<code>reduce()</code>传入的函数<code>f</code>必须接收<strong>两个参数</strong>,<code>reduce()</code>对<code>list</code>的每个元素反复调用函数<code>f</code>，并返回最终结果值。</p>
<p>例1：求一个列表中所有元素的和</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"><span class="keyword">print</span> reduce(f,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</div><div class="line"></div><div class="line">先计算头两个元素：f(<span class="number">1</span>, <span class="number">2</span>)，结果为<span class="number">3</span>；</div><div class="line">再把结果和第<span class="number">3</span>个元素计算：f(<span class="number">3</span>, <span class="number">3</span>)，结果为<span class="number">6</span>；</div><div class="line">再把结果和第<span class="number">4</span>个元素计算：f(<span class="number">6</span>, <span class="number">4</span>)，结果为<span class="number">10</span>；</div><div class="line">再把结果和第<span class="number">5</span>个元素计算：f(<span class="number">10</span>, <span class="number">5</span>)，结果为<span class="number">15</span>；</div><div class="line">由于没有更多的元素了，计算结束，返回结果<span class="number">15.</span></div><div class="line"></div><div class="line"><span class="comment">#15</span></div></pre></td></tr></table></figure>
<h3 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter() 函数"></a>filter() 函数</h3><p><code>filter()</code>函数接收一个函数<code>f</code>和一个<code>list</code>，这个函数<code>f</code>的作用是对每个元素进行判断，返回<code>True</code>或<code>False</code>,<code>filter()</code>根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新<code>list</code>。</p>
<p>例：删除一个list中的偶数，保留奇数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span></div><div class="line"><span class="keyword">print</span> filter(is_odd(),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</div><div class="line"></div><div class="line"><span class="comment">#[1, 3, 5, 7, 9]</span></div></pre></td></tr></table></figure>
<p>可以用来删除一个列表中我们不需要的元素。也可以使用如下方法来完成：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>] <span class="keyword">if</span> i % <span class="number">2</span> ==<span class="number">1</span> ]</div><div class="line"></div><div class="line"><span class="comment">#[1, 3, 5, 7, 9]</span></div></pre></td></tr></table></figure>
<h3 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted() 函数"></a>sorted() 函数</h3><p>Python内置的 sorted()函数可对list进行排序：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>])</div><div class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">21</span>, <span class="number">36</span>]</div></pre></td></tr></table></figure>
<p>但 sorted()也是一个高阶函数，它可以接收一个比较函数来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。</p>
<p>例：实现倒序排列</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reversed_cmp</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt; y:</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    <span class="keyword">if</span> x &lt; y:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>], reversed_cmp)</div><div class="line"></div><div class="line"><span class="comment">#[36, 21, 12, 9, 5]</span></div></pre></td></tr></table></figure>
<p>其他方法：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先排序，后反转</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; sorted([<span class="number">36</span>, <span class="number">21</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>])[<span class="symbol">:</span><span class="symbol">:-</span><span class="number">1</span>]</div><div class="line">[<span class="number">36</span>, <span class="number">21</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>]</div><div class="line"><span class="comment"># 使用reversed()方法，返回一个迭代器。 如果使用reverse(),是直接修改原列表，不会返回新的列表</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; list(reversed(sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">21</span>])))</div><div class="line">[<span class="number">36</span>, <span class="number">21</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<h3 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h3><p>Python的函数不但可以返回<code>int</code>、<code>str</code>、<code>list</code>、<code>dict</code>等数据类型，还可以返回函数！</p>
<p>例1：定义一个函数 f()，我们让它返回一个函数 g</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'call f()...'</span></div><div class="line">    <span class="comment"># 定义函数g:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'call g()...'</span></div><div class="line">    <span class="comment"># 返回函数g:</span></div><div class="line">    <span class="keyword">return</span> g</div><div class="line">    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = f()   <span class="comment"># 调用f()</span></div><div class="line">call f()...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x   <span class="comment"># 变量x是f()返回的函数g：</span></div><div class="line">&lt;function g at <span class="number">0x1037bf320</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x()   <span class="comment"># x指向函数g，因此可以调用</span></div><div class="line">call g()...   <span class="comment"># 调用x()就是执行g()函数定义的代码</span></div></pre></td></tr></table></figure>
<p>例2：写一个函数<code>calc_prod(lst)</code>，它接收一个<code>list</code>，返回一个函数，返回函数可以计算参数的乘积。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_prod</span><span class="params">(lst)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></div><div class="line">        <span class="keyword">return</span> x * y</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chengji</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> reduce(f,lst)</div><div class="line">    <span class="keyword">return</span> chengji</div><div class="line"></div><div class="line">f = calc_prod([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line"><span class="keyword">print</span> f()</div></pre></td></tr></table></figure>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>例如上一小节<strong>返回函数中的例2</strong>，<code>chengji</code>内层函数引用了外层函数<code>calc_prod</code>的<code>lst</code>变量。像这种内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包（Closure）。</p>
<p><strong>闭包的特点：</strong>返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要确保引用的局部变量在函数返回后不能变。举例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 希望一次返回3个函数，分别计算1x1,2x2,3x3:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></div><div class="line">             <span class="keyword">return</span> i*i</div><div class="line">        fs.append(f)</div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div><div class="line"></div><div class="line"><span class="comment">#9 9 9</span></div></pre></td></tr></table></figure>
<p>原因就是当<code>count()</code>函数返回了3个函数时，这3个函数所引用的变量<code>i</code>的值已经变成了3。由于f1、f2、f3并没有被调用，所以，此时他们并未计算<code>i*i</code>，当 f1 被调用时：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; f1()</div><div class="line"><span class="number">9</span>     <span class="comment"># 因为f1现在才计算i*i，但现在i的值已经变为3</span></div></pre></td></tr></table></figure>
<p>因此，返回函数不要引用任何循环变量，或者后续会发生变化的变量。因此改成如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 法一</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    fs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line">        <span class="comment"># 借助函数f来避免引用循环变量i</span></div><div class="line">            <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">                <span class="keyword">return</span> j*j</div><div class="line">            <span class="keyword">return</span> g</div><div class="line">        r = f(i)</div><div class="line">        fs.append(r)</div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div><div class="line"><span class="keyword">print</span> f1(), f2(), f3()</div><div class="line"></div><div class="line"><span class="comment">#1 4 9</span></div><div class="line"></div><div class="line"><span class="comment"># 法二</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></div><div class="line">    fs = []</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(j)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">            <span class="keyword">return</span> j*j</div><div class="line">        <span class="keyword">return</span> g</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</div><div class="line">        r = f(i)</div><div class="line">        fs.append(r)</div><div class="line">    <span class="keyword">return</span> fs</div><div class="line"></div><div class="line">f1, f2, f3 = count()</div><div class="line"><span class="keyword">print</span> f1(), f2(), f3()</div><div class="line"></div><div class="line"><span class="comment">#1 4 9</span></div></pre></td></tr></table></figure>
<h3 id="匿名函数-lambda"><a href="#匿名函数-lambda" class="headerlink" title="匿名函数 lambda"></a>匿名函数 lambda</h3><p>高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便。</p>
<p>在<code>Python</code>中，对匿名函数提供了有限支持。还是以<code>map()</code>函数为例，计算<code>f(x)=x*x</code>时，除了定义一个<code>f(x)</code>的函数外，还可以直接传入匿名函数</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = lambda <span class="symbol">x:</span>x*x</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a(<span class="number">5</span>)</div><div class="line"><span class="number">25</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; map(lambda <span class="symbol">x:</span> x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div></pre></td></tr></table></figure>
<p>匿名函数有个限制，就是只能有一个表达式，不写<code>return</code>，返回值就是该表达式的结果。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_not_empty</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> len(s.strip()) &gt; <span class="number">0</span></div><div class="line">filter(is_not_empty, [<span class="string">'test'</span>, <span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">'  '</span>, <span class="string">'END'</span>])</div></pre></td></tr></table></figure>
<p>返回函数的时候，也可以返回匿名函数：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用 if..else 来实现abs函数的功能</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; myabs = lambda <span class="symbol">x:</span> -x if x &lt; <span class="number">0</span> else x </div><div class="line"><span class="meta">&gt;&gt;</span>&gt; myabs(-<span class="number">1</span>)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; myabs(<span class="number">1</span>)</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<p>例：使用匿名函数简化代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 源代码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_not_empty</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> len(s.strip()) &gt; <span class="number">0</span></div><div class="line">filter(is_not_empty, [<span class="string">'test'</span>, <span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">'  '</span>, <span class="string">'END'</span>])</div><div class="line"></div><div class="line"><span class="comment"># 使用匿名函数</span></div><div class="line"><span class="keyword">print</span> filter(<span class="keyword">lambda</span> x:x <span class="keyword">and</span> len(x.strip()) &gt; <span class="number">0</span>,[<span class="string">'test'</span>, <span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">'  '</span>, <span class="string">'END'</span>])</div><div class="line"></div><div class="line"><span class="comment"># 使用 for..in..if 语句</span></div><div class="line"><span class="keyword">print</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'test'</span>, <span class="keyword">None</span>, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">'  '</span>, <span class="string">'END'</span>] <span class="keyword">if</span> i <span class="keyword">and</span> len(i.strip())&gt;<span class="number">0</span>]</div></pre></td></tr></table></figure>
<h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><p>当一个函数有很多参数时，调用者就需要提供多个参数。如果减少参数个数，就可以简化调用者的负担。</p>
<p>比如，<code>int()</code>函数可以把字符串转换为整数，当仅传入字符串时，<code>int()</code>函数默认按十进制转换：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; int(<span class="string">'12345'</span>)</div><div class="line"><span class="number">12345</span></div></pre></td></tr></table></figure>
<p>但<code>int()</code>函数还提供额外的<code>base</code>参数，默认值为10。如果传入<code>base</code>参数，就可以做 N 进制的转换：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; int(<span class="string">'12345'</span>, base=<span class="number">8</span>)</div><div class="line"><span class="number">5349</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; int(<span class="string">'12345'</span>, <span class="number">16</span>)</div><div class="line"><span class="number">74565</span></div></pre></td></tr></table></figure>
<p>假设要转换大量的二进制字符串，每次都传入<code>int(x, base=2)</code>非常麻烦，于是，我们想到，可以定义一个<code>int2()</code>的函数，默认把<code>base=2</code>传进去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> int(x, base)</div><div class="line">    </div><div class="line"><span class="comment"># 这样，我们转换二进制就非常方便了：</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</div><div class="line"><span class="number">64</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</div><div class="line"><span class="number">85</span></div></pre></td></tr></table></figure>
<p><code>functools.partial</code>就是帮助我们创建一个偏函数的，不需要我们自己定义<code>int2()</code>，可以直接使用下面的代码创建一个新的函数<code>int2</code>：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import functools</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; int2 = functools.partial(int, base=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; int2(<span class="string">'1000000'</span>)</div><div class="line"><span class="number">64</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; int2(<span class="string">'1010101'</span>)</div><div class="line"><span class="number">85</span></div></pre></td></tr></table></figure>
<p>所以，<code>functools.partial</code>可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值，这样，新函数调用的难度就降低了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python构造和析构函数]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>构造函数：<code>__init__(self)</code></p>
<p>构析函数：<code>__del__(self)</code>,一般情况下不会使用，会在最后执行。</p>
<p><code>__call__</code>方法：<code>__call__</code></p>
<p>使用方式如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="comment"># 构造函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">        </div><div class="line">	<span class="comment"># __call__ 方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'调用__call__方法'</span>, args, kwargs</div><div class="line">      </div><div class="line">	<span class="comment"># 析构函数，当检测到没有对象使用时，会自动关闭</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'解释器马上要销毁自己了'</span></div><div class="line">        </div><div class="line">foo = Foo()</div><div class="line">foo(<span class="number">123</span>,name = <span class="string">'sate'</span>)	<span class="comment">## 执行类的__call__方法, 可带入参数</span></div><div class="line"></div><div class="line"><span class="comment"># 结果==&gt;</span></div><div class="line">调用__call__方法 (<span class="number">123</span>,) &#123;<span class="string">'name'</span>: <span class="string">'sate'</span>&#125;</div><div class="line">解释器马上要销毁自己了		<span class="comment">#在最后执行</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python反射]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<p><strong>反射：</strong> 通过字符串的形式来导入模块，并以字符串的形式执行函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#例： 根据变量temp， 来导入模块 sys。这样实现了通过字符串的形式来导入模块</span></div><div class="line"><span class="comment"># 通过 __import__ 函数来获取字符串中定义的模块</span></div><div class="line"></div><div class="line">temp = <span class="string">'sys'</span></div><div class="line">model1 = __import__(temp)</div><div class="line"></div><div class="line"><span class="keyword">print</span> model1.path</div><div class="line"></div><div class="line"><span class="comment"># 例：以字符串的形式执行函数,</span></div><div class="line"><span class="comment"># 通过 getattr 函数来获取字符串定义的模块中的方法。</span></div><div class="line">func = <span class="string">'path'</span></div><div class="line">Func = getattr(model1, func)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Func:</div><div class="line">    <span class="keyword">print</span> i</div></pre></td></tr></table></figure>
<h3 id="应用，大部分应用在web框架中。"><a href="#应用，大部分应用在web框架中。" class="headerlink" title="应用，大部分应用在web框架中。"></a>应用，大部分应用在web框架中。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 目录结构： 当前目录下有backend项目包</span></div><div class="line"><span class="comment">#- backend</span></div><div class="line"><span class="comment">#	- __init__.py</span></div><div class="line"><span class="comment">#	- account.py 		# 里边有 def login(): 函数</span></div><div class="line"><span class="comment">#- __init__.py</span></div><div class="line"><span class="comment">#- index.py	#当前文件</span></div><div class="line"></div><div class="line"><span class="comment"># 输入 account/login</span></div><div class="line">date = raw_input(<span class="string">'输入地址: '</span>)</div><div class="line"></div><div class="line">lis = date.split(<span class="string">'/'</span>)</div><div class="line"></div><div class="line">userspance = __import__(<span class="string">'backend.'</span> + lis[<span class="number">0</span>])</div><div class="line"></div><div class="line">model = getattr(userspance, lis[<span class="number">0</span>])</div><div class="line"></div><div class="line">func = getattr(model, lis[<span class="number">1</span>])</div><div class="line"></div><div class="line">func()</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python多重继承顺序]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文借鉴自 <a href="http://www.cnblogs.com/panyinghua/p/3283726.html" target="_blank" rel="external">http://www.cnblogs.com/panyinghua/p/3283726.html</a></p>
</blockquote>
<p>当类有多个超类，而且超类中有相同的方法时，继承顺序就很重要，如下：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">		<span class="class"><span class="keyword">class</span> <span class="title">A</span></span></div><div class="line">		(<span class="function"><span class="keyword">def</span> <span class="title">save</span></span>(<span class="keyword">self</span>):...)	<span class="comment"># A 中有self方法</span></div><div class="line">		/		\</div><div class="line">	  /			 \</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>			<span class="title">class</span> <span class="title">C</span></span></div><div class="line">				(<span class="function"><span class="keyword">def</span> <span class="title">save</span></span>(<span class="keyword">self</span>):...)	<span class="comment"># B 和 C 中都继承 A，只有C中重写save方法</span></div><div class="line">	  \				/</div><div class="line">	   \		  /</div><div class="line">	    \	    /</div><div class="line">	  <span class="class"><span class="keyword">class</span> <span class="title">D</span>		<span class="comment"># 继承 B 和 C</span></span></div></pre></td></tr></table></figure>
<h3 id="旧式类"><a href="#旧式类" class="headerlink" title="旧式类"></a>旧式类</h3><p>在旧式类中，会根据深度优先(<code>depth-first</code>)的顺序来继承，由左至右依次查找<code>save()</code>方法，D -&gt; B -&gt; A -&gt;C,当查到方法时，立刻放回，不在继续查找。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 例：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'it is A'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'save method from A'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'it is B'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'it is C'</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'save method from C'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'it is D'</span></div><div class="line"></div><div class="line">d = D()</div><div class="line">d.save()</div><div class="line"><span class="comment"># 结果 ==》</span></div><div class="line">it <span class="keyword">is</span> D</div><div class="line">save method <span class="keyword">from</span> A	<span class="comment"># 根据上边的顺序，查到A中的save方法，即返回。</span></div></pre></td></tr></table></figure>
<h3 id="新式类"><a href="#新式类" class="headerlink" title="新式类"></a>新式类</h3><p>新式类中会根据方法解析顺序（MRO）来进行搜索，广度优先，当查到对应方法属性时，立即返回，不再继续查找。</p>
<p><code>__mro__</code>属性，标记了python继承层次中父类的查找顺序，Python的多重继承机制就是按照<code>__mro__</code>的顺序进行查找，一旦找到对应属性，则查找马上返回。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># 例 1</div><div class="line">class A(object):</div><div class="line">    def __init__(self):</div><div class="line">        print 'it is A'</div><div class="line">    def save(self):</div><div class="line">        print 'save method from A'</div><div class="line"></div><div class="line">class B(A):</div><div class="line">    def __init__(self):</div><div class="line">        print 'it is B'</div><div class="line"></div><div class="line">class C(A):</div><div class="line">    def __init__(self):</div><div class="line">        print 'it is C'</div><div class="line">    def save(self):</div><div class="line">        print 'save method from C'</div><div class="line"></div><div class="line">class D(B, C):</div><div class="line">    def __init__(self):</div><div class="line">        print 'it is D'</div><div class="line"></div><div class="line">print D.__mro__</div><div class="line">d = D()</div><div class="line">d.save()</div><div class="line"># 结果==》</div><div class="line">(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)</div><div class="line">it is D</div><div class="line">save method from C</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># 例 2</div><div class="line">class A(object):</div><div class="line">    def save(self):</div><div class="line">        print ('save A')</div><div class="line"></div><div class="line">class B(object):</div><div class="line">    def save(self):</div><div class="line">        print ('save B')</div><div class="line"></div><div class="line">class C(object):</div><div class="line">    def save(self):</div><div class="line">        print ('save C')</div><div class="line"></div><div class="line">class D(B,C,A):</div><div class="line">    pass</div><div class="line"></div><div class="line">print D.__mro__</div><div class="line">cla = D()</div><div class="line">cla.save()</div><div class="line"># 结果</div><div class="line">(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)</div><div class="line">save B</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"># 例 2</div><div class="line">class B(object):</div><div class="line">    def foo(self):</div><div class="line">        print ('foo B')</div><div class="line"></div><div class="line">    def bar(self):</div><div class="line">        print 'bar B'</div><div class="line"></div><div class="line">class A(object):</div><div class="line">    def foo(self):</div><div class="line">        print ('foo A')</div><div class="line"></div><div class="line">class C1(A, B):</div><div class="line">    pass</div><div class="line"></div><div class="line">class C2(A, B):</div><div class="line">    def bar(self):</div><div class="line">        print 'bar C2'</div><div class="line"></div><div class="line">class D(C1, C2):</div><div class="line">    pass</div><div class="line"></div><div class="line">print D.__mro__</div><div class="line">d = D()</div><div class="line">d.foo()</div><div class="line">d.bar()</div><div class="line"></div><div class="line"># 结果</div><div class="line">(&lt;class '__main__.D'&gt;, &lt;class '__main__.C1'&gt;, &lt;class '__main__.C2'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;type 'object'&gt;)</div><div class="line">foo A</div><div class="line">bar C2</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python调试]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>官方文档：<a href="https://docs.python.org/2/library/pdb.html" target="_blank" rel="external">https://docs.python.org/2/library/pdb.html</a></p>
</blockquote>
<h3 id="从命令行运行"><a href="#从命令行运行" class="headerlink" title="从命令行运行"></a>从命令行运行</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">python</span> -<span class="keyword">m</span> pdb my_script.<span class="keyword">py</span></div></pre></td></tr></table></figure>
<h3 id="从脚本内部运行"><a href="#从脚本内部运行" class="headerlink" title="从脚本内部运行"></a>从脚本内部运行</h3><p>也可以在脚本内部设置断点，这样就可以在某些特定点查看变量信息和各种执行时信息了。这里将使用<code>pdb.set_trace()</code>方法来实现。举个例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pdb</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_bread</span><span class="params">()</span>:</span></div><div class="line">    pdb.set_trace()</div><div class="line">    <span class="keyword">return</span> <span class="string">"I don't have time"</span></div><div class="line"></div><div class="line">print(make_bread())</div></pre></td></tr></table></figure>
<p>试下保存上面的脚本后运行之。你会在运行时马上进入<code>debugger</code>模式。</p>
<h3 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h3><ul>
<li><code>c</code>: 继续执行</li>
<li><code>w</code>: 显示当前正在执行的代码行的上下文信息</li>
<li><code>a</code>: 打印当前函数的参数列表</li>
<li><code>s</code>: 执行当前代码行，并停在第一个能停的地方（相当于单步进入）</li>
<li><code>n</code>: 继续执行到当前函数的下一行，或者当前行直接返回（单步跳过）</li>
</ul>
<p>单步跳过<code>n(next)</code>和单步进入<code>s(step)</code>的区别在于， 单步进入会进入当前行调用的函数内部并停在里面， 而单步跳过会（几乎）全速执行完当前行调用的函数，并停在当前函数的下一行。</p>
<p><strong>更多的命令在官方文档</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python类]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>###新式类和旧式类</p>
<p>在python2.x的版本中，有“新式类”和“旧式类（也叫做经典类）”之分。新式类是python2.2引进的，在此后的版本中，我们一般用的都是新式类。</p>
<p>定义旧式类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">AA</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">pass</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>定义新式类的方法:</p>
<p>第一种：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">BB</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">pass</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>跟旧式类的区别就在于类的名字后面跟上(object)，这其实是一种名为“继承”的类的操作，当前的类BB是以类object为上级的（object被称为父类），即BB是继承自类object的新类。在python3中，所有的类自然地都是类object的子类，就不用彰显出继承关系了。</p>
<p>第二种：</p>
<p>在类的前面写上这么一句：__metaclass__ == type，然后定义类的时候，就不需要在名字后面写(object)了。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; __metaclass_<span class="number">_</span> = type</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="class"><span class="keyword">class</span> <span class="title">CC</span>:</span></div><div class="line">...     pass</div><div class="line">... </div><div class="line"><span class="meta">&gt;&gt;</span>&gt; cc = CC()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; cc.__class_<span class="number">_</span></div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">CC</span>'&gt;</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; type(cc)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">CC</span>'&gt;</span></div></pre></td></tr></table></figure>
<p>###创建类</p>
<p>例：定义一个比较常见的类，一般情况下，都是这样子的。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line">__metaclass_<span class="number">_</span> = type</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span>:</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">color</span><span class="params">(<span class="keyword">self</span>, color)</span></span>:</div><div class="line">        print <span class="string">"%s is %s"</span> % (<span class="keyword">self</span>.name, color)</div></pre></td></tr></table></figure>
<p><strong>新式类</strong></p>
<p>__metaclass__ = type，意味着下面的类是新式类。</p>
<p><strong>定义类</strong></p>
<p>class Person，这是在声明创建一个名为”Person”的类。类的名称一般用大写字母开头，这是惯例。如果名称是两个单词，那么两个单词的首字母都要大写，例如class HotPerson，这种命名方法有一个形象的名字，叫做“驼峰式命名”。当然，如果故意不遵循此惯例，也未尝不可，但是，会给别人阅读乃至于自己以后阅读带来麻烦，不要忘记“代码通常是给人看的，只是偶尔让机器执行”。</p>
<p>接下来，分别以缩进表示的，就是这个类的内容了。其实那些东西看起来并不陌生，你一眼就认出它们了——就是已经学习过的函数。没错，它们就是函数。不过，很多程序员喜欢把类里面的函数叫做“方法”。是的，就是上节中说到的对象的“方法”。我也看到有人撰文专门分析了“方法”和“函数”的区别。但是，我倒是认为这不重要，重要的是类的中所谓“方法”和前面的函数，在数学角度看，丝毫没有区别。所以，你尽可以称之为函数。当然，听到有人说方法，也不要诧异和糊涂。它们本质是一样的。</p>
<p>需要再次提醒，函数的命名方法是以def发起，并且函数名称首字母不要用大写，可以使用aa_bb的样式，也可以使用aaBb的样式，一切看你的习惯了。</p>
<p>不过，要注意的是，类中的函数（方法）的参数跟以往的参数样式有区别，那就是每个函数必须包括self参数，并且作为默认的第一个参数。这是需要注意的地方。</p>
<p><strong>初始化</strong></p>
<p>def __init__，这个函数是一个比较特殊的，并且有一个名字，叫做初始化函数（注意，很多教材和资料中，把它叫做构造函数，这种说法貌似没有错误，但是一来从字面意义上看，它对应的含义是初始化，二来在python中它的作用和其它语言比如java中的构造函数还不完全一样，因为还有一个__new__的函数，是真正地构造。所以，在本教程中，我称之为初始化函数）。它是以两个下划线开始，然后是init，最后以两个下划线结束。</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">所谓初始化，就是让类有一个基本的面貌，而不是空空如也。做很多事情，都要初始化，让事情有一个具体的起</div><div class="line">点状态。比如你要喝水，必须先初始化杯子里面有水。在<span class="keyword">python</span>的类中，初始化就担负着类似的工作。这个工</div><div class="line">作是在类被实例化的时候就执行这个函数，从而将初始化的一些属性可以放到这个函数里面。</div></pre></td></tr></table></figure>
<p>此例子中的初始化函数，就意味着实例化的时候，要给参数name提供一个值，作为类初始化的内容。通俗点啰嗦点说，就是在这个类被实例化的同时，要通过name参数传一个值，这个值被一开始就写入了类和实例中，成为了类和实例的一个属性。比如：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">girl</span> = Person(<span class="string">'sate'</span>)</div></pre></td></tr></table></figure>
<p>girl是一个实例对象，就如同前面所说的一样，它有属性和方法。这里仅说属性吧。当通过上面的方式实例化后，就自动执行了初始化函数，让实例girl就具有了name属性。</p>
<p>很多时候，并不是每次都要从外面传入数据，有时候会把初始化函数的某些参数设置默认值，如果没有新的数据传入，就应用这些默认值。比如：</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    def __init__(<span class="built_in">self</span>, name, lang=<span class="string">"golang"</span>, website=<span class="string">"www.google.com"</span>):</div><div class="line">        <span class="built_in">self</span>.name = name</div><div class="line">        <span class="built_in">self</span>.lang = lang</div><div class="line">        <span class="built_in">self</span>.website = website</div><div class="line">        <span class="built_in">self</span>.email = <span class="string">"qiwsir@gmail.com"</span></div><div class="line"></div><div class="line">laoqi = Person(<span class="string">"LaoQi"</span>)     </div><div class="line">info = Person(<span class="string">"qiwsir"</span>,lang=<span class="string">"python"</span>,website=<span class="string">"qiwsir.github.io"</span>)</div><div class="line"></div><div class="line"><span class="built_in">print</span> <span class="string">"laoqi.name="</span>,laoqi.name</div><div class="line"><span class="built_in">print</span> <span class="string">"info.name="</span>,info.name</div><div class="line"><span class="built_in">print</span> <span class="string">"-------"</span></div><div class="line"><span class="built_in">print</span> <span class="string">"laoqi.lang="</span>,laoqi.lang</div><div class="line"><span class="built_in">print</span> <span class="string">"info.lang="</span>,info.lang</div><div class="line"><span class="built_in">print</span> <span class="string">"-------"</span></div><div class="line"><span class="built_in">print</span> <span class="string">"laoqi.website="</span>,laoqi.website</div><div class="line"><span class="built_in">print</span> <span class="string">"info.website="</span>,info.website<span class="meta"></span></div><div class="line"></div><div class="line">#运行结果</div><div class="line"></div><div class="line">laoqi.name= LaoQi</div><div class="line">info.name= qiwsir</div><div class="line">-------</div><div class="line">laoqi.lang= golang</div><div class="line">info.lang= python</div><div class="line">-------</div><div class="line">laoqi.website= www.google.com</div><div class="line">info.website= qiwsir.github.io</div></pre></td></tr></table></figure>
<p>###函数（方法）</p>
<p>还是回到本节开头的那个类。构造函数下面的两个函数：def getName(self),def color(self, color)，这两个函数和前面的初始化函数有共同的地方，即都是以self作为第一个参数。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.name</div></pre></td></tr></table></figure>
<p>这个函数中的作用就是返回在初始化时得到的值。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">girl</span> = Person(<span class="string">'canglaoshi'</span>)</div><div class="line"><span class="attr">name</span> = girl.getName()</div></pre></td></tr></table></figure>
<p>girl.getName()就是调用实例girl的方法。调用该方法的时候特别注意，方法名后面的括号不可少，并且括号中不要写参数，在类中的getName(self)函数第一个参数self是默认的，当类实例化之后，调用此函数的时候，第一个参数不需要赋值。那么，变量name的最终结果就是name = “canglaoshi”。</p>
<p>###类和实例</p>
<p>有必要总结一下类和实例的关系：</p>
<ul>
<li>“类提供默认行为，是实例的工厂”（源自Learning Python），这句话非常经典，一下道破了类和实例的关系。所谓工厂，就是可以用同一个模子做出很多具体的产品。类就是那个模子，实例就是具体的产品。所以，实例是程序处理的实际对象。</li>
<li>类是由一些语句组成，但是实例，是通过调用类生成，每次调用一个类，就得到这个类的新的实例。</li>
<li>对于类的：class Person，class是一个可执行的语句。如果执行，就得到了一个类对象，并且将这个类对象赋值给对象名（比如Person）。</li>
</ul>
<p>###self的作用</p>
<p>在Person实例化的过程中girl = Person(“canglaoshi”)，字符串”canglaoshi”通过初始化函数（__init__()）的参数已经存入到内存中，并且以Person类型的面貌存在，组成了一个对象，这个对象和变量girl建立引用关系。这个过程也可说成这些数据附加到一个实例上。这样就能够以:object.attribute的形式，在程序中任何地方调用某个数据，例如上面的程序中以girl.name的方式得到”canglaoshi”。这种调用方式，在类和实例中经常使用，点号“.”后面的称之为类或者实例的属性。</p>
<p>这是在程序中，并且是在类的外面。如果在类的里面，想在某个地方使用实例化所传入的数据（”canglaoshi”），怎么办？</p>
<p>在类内部，就是将所有传入的数据都赋给一个变量，通常这个变量的名字是self。注意，这是习惯，而且是共识，所以，看官不要另外取别的名字了。</p>
<p>在初始化函数中的第一个参数self，就是起到了这个作用——接收实例化过程中传入的所有数据，这些数据是初始化函数后面的参数导入的。显然，self应该就是一个实例（准确说法是应用实例），因为它所对应的就是具体数据。</p>
<p>如果将上面的类稍加修改，看看效果：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line">__metaclass__ = <span class="keyword">type</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span></span>(<span class="keyword">self</span>, name):</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        print <span class="keyword">self</span>           <span class="comment">#新增</span></div><div class="line">        print <span class="keyword">type</span>(<span class="keyword">self</span>)     <span class="comment">#新增</span></div></pre></td></tr></table></figure>
<p>其它部分省略。当初始化的时候，就首先要运行构造函数，同时就打印新增的两条。结果是</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;__main__<span class="selector-class">.Person</span> <span class="selector-tag">object</span> at <span class="number">0</span>xb7282cec&gt;</div><div class="line">&lt;class <span class="string">'__main__.Person'</span>&gt;</div></pre></td></tr></table></figure>
<p>证实了推理。self就是一个实例（准确说是实例的引用变量）。</p>
<p>self这个实例跟前面说的那个girl所引用的实例对象一样，也有属性。那么，接下来就规定其属性和属性对应的数据。上面代码中：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.<span class="built_in">name</span> = <span class="built_in">name</span></div></pre></td></tr></table></figure>
<p>就是规定了self实例的一个属性，这个属性的名字也叫做name，这个属性的值等于初始化函数的参数name所导入的数据。注意，self.name中的name和初始化函数的参数name没有任何关系，它们两个一样，只不过是一种起巧合（经常巧合，其实是为了省事和以后识别方便，故意让它们巧合。），或者说是写代码的人懒惰，不想另外取名字而已，无他。当然，如果写成self.xxxooo = name，也是可以的。</p>
<p>其实，从效果的角度来理解，这么理解更简化：类的实例girl对应着self，girl通过self导入实例属性的所有数据。</p>
<p>当然，self的属性数据，也不一定非得是由参数传入的，也可以在构造函数中自己设定。比如：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line">__metaclass_<span class="number">_</span> = type</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>, name)</span></span>:</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.email = <span class="string">"qiwsir@gmail.com"</span>     <span class="comment">#这个属性不是通过参数传入的</span></div><div class="line"></div><div class="line">info = Person(<span class="string">"qiwsir"</span>)              <span class="comment">#换个字符串和实例化变量</span></div><div class="line">print <span class="string">"info.name="</span>,info.name</div><div class="line">print <span class="string">"info.email="</span>,info.email      <span class="comment">#info通过self建立实例，并导入实例属性数据</span></div></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">info.<span class="attr">name=</span> qiwsir</div><div class="line">info.<span class="attr">email=</span> qiwsir@gmail.com    <span class="comment">#打印结果</span></div></pre></td></tr></table></figure>
<p>通过这个例子，其实让我们拓展了对self的认识，也就是它不仅仅是为了在类内部传递参数导入的数据，还能在初始化函数中，通过self.attribute的方式，规定self实例对象的属性，这个属性也是类实例化对象的属性，即做为类通过初始化函数初始化后所具有的属性。所以在实例info中，通过info.email同样能够得到该属性的数据。在这里，就可以把self形象地理解为“内外兼修”了。或者按照前面所提到的，将info和self对应起来，self主内，info主外。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python函数4]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%87%BD%E6%95%B04/</url>
      <content type="html"><![CDATA[<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>如果用上面的做递归的定义，总感觉有点调侃，来个严肃的(选自维基百科)：</p>
<blockquote>
<p>递归（英语：Recursion），又译为递回，在数学与计算机科学中，是指在函数的定义中使用函数自身的方法。</p>
</blockquote>
<p>根据斐波那契数列的定义，可以直接写成这样的斐波那契数列递归函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    This is Fibonacci by Recursion.</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">elif</span> n==<span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    f = fib(<span class="number">10</span>)</div><div class="line">    <span class="keyword">print</span> f</div></pre></td></tr></table></figure>
<p><code>fib(n-1) + fib(n-2)</code>就是又调用了这个函数自己，实现递归。为了明确递归的过程，下面走一个计算过程（考虑到次数不能太多，就让n=3）</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> n=<span class="number">3</span>,fib(<span class="number">3</span>)，自然要走return fib(<span class="number">3</span><span class="number">-1</span>) + fib(<span class="number">3</span><span class="number">-2</span>)分支</div><div class="line"><span class="number">2.</span> 先看fib(<span class="number">3</span><span class="number">-1</span>),即fib(<span class="number">2</span>)，也要走else分支，于是计算fib(<span class="number">2</span><span class="number">-1</span>) + fib(<span class="number">2</span><span class="number">-2</span>)</div><div class="line"><span class="number">3.</span> fib(<span class="number">2</span><span class="number">-1</span>)即fib(<span class="number">1</span>)，在函数中就要走elif分支，返回<span class="number">1</span>，即fib(<span class="number">2</span><span class="number">-1</span>)=<span class="number">1</span>。同理，容易得到fib(<span class="number">2</span><span class="number">-2</span>)=<span class="number">0</span>。将这两个值返回到上面一步。得到fib(<span class="number">3</span><span class="number">-1</span>)=<span class="number">1</span>+<span class="number">0</span>=<span class="number">1</span></div><div class="line"><span class="number">4.</span> 再计算fib(<span class="number">3</span><span class="number">-2</span>),就简单了一些，返回的值是<span class="number">1</span>，即fib(<span class="number">3</span><span class="number">-2</span>)=<span class="number">1</span></div><div class="line"><span class="number">5.</span> 最后计算第一步中的结果：fib(<span class="number">3</span><span class="number">-1</span>) + fib(<span class="number">3</span><span class="number">-2</span>) = <span class="number">1</span> + <span class="number">1</span> = <span class="number">2</span>，将计算结果<span class="number">2</span>作为返回值</div><div class="line"></div><div class="line">从而得到fib(<span class="number">3</span>)的结果是<span class="number">2</span>。</div></pre></td></tr></table></figure>
<p>从上面的过程中可以看出，每个递归的过程，都是向着最初的已知条件a0=0,a1=1方向挺近一步，直到通过这个最底层的条件得到结果，然后再一层一层向上回馈计算机结果。</p>
<p>其实，上面的代码有一个问题。因为a0=0,a1=1是已知的了，不需要每次都判断一边。所以，还可以优化一下。优化的基本方案就是初始化最初的两个值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line">the better Fibonacci</div><div class="line">"""</div><div class="line">meno = &#123;<span class="number">0</span>:<span class="number">0</span>, <span class="number">1</span>:<span class="number">1</span>&#125;    <span class="comment">#初始化</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> n <span class="keyword">in</span> meno:    <span class="comment">#如果不在初始化范围内</span></div><div class="line">        meno[n] = fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</div><div class="line">    <span class="keyword">return</span> meno[n]</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    f = fib(<span class="number">10</span>)</div><div class="line">    <span class="keyword">print</span> f</div><div class="line"></div><div class="line"><span class="comment">#运行结果</span></div><div class="line">$ python <span class="number">20402.</span>py </div><div class="line"><span class="number">55</span></div></pre></td></tr></table></figure>
<h3 id="几个特殊的函数"><a href="#几个特殊的函数" class="headerlink" title="几个特殊的函数"></a>几个特殊的函数</h3><p><code>filter</code>、<code>map</code>、<code>reduce</code>、<code>lambda</code>、<code>yield</code></p>
<h4 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h4><p>例子：讲<code>list</code>中每个数字增加3，并输出到新的<code>list</code>中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x)</span>:</span>     <span class="comment">#定义一个函数，将输入的变量增加3,然后返回增加之后的值</span></div><div class="line"><span class="meta">... </span>    x += <span class="number">3</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = range(<span class="number">10</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>numbers</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]  <span class="comment">#有这样一个list，想让每个数字增加3,然后输出到一个新的list中</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>new_numbers = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> numbers:</div><div class="line"><span class="meta">... </span>    new_numbers.append(add(i))  <span class="comment">#调用add()函数，并append到list中</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>new_numbers</div><div class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</div></pre></td></tr></table></figure>
<p>在这个例子中，add()只是一个中间操作。当然，上面的例子完全可以用别的方式实现。比如：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; numbers = range(<span class="number">10</span>)</div><div class="line">&gt;&gt;&gt; new_numbers = [ i+<span class="number">3</span> for i in numbers ]</div><div class="line">&gt;&gt;&gt; new_numbers</div><div class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</div></pre></td></tr></table></figure>
<p>使用lambda实现，如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 简单的例子</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lam = lambda <span class="symbol">x:</span>x+<span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lam(<span class="number">1</span>)</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lam(<span class="number">2</span>)</div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lam = lambda <span class="symbol">x:</span>x*<span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lam(<span class="number">2</span>)</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lam = lambda x,<span class="symbol">y:</span>x*y</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lam(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="number">6</span></div><div class="line"></div><div class="line"><span class="comment"># 实现上述方法：</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; numbers = range(<span class="number">10</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lam = lambda <span class="symbol">x:</span>x+<span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; n2 = []</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; for i in <span class="symbol">numbers:</span></div><div class="line">...     n2.append(lam(i))</div><div class="line">... </div><div class="line"><span class="meta">&gt;&gt;</span>&gt; n2</div><div class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</div></pre></td></tr></table></figure>
<p>通过上面例子，总结一下lambda函数的使用方法：</p>
<ul>
<li>在lambda后面直接跟变量</li>
<li>变量后面是冒号</li>
<li>冒号后面是表达式，表达式计算结果就是本函数的返回值</li>
</ul>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">lambda</span></span> arg1, arg2, ...argN : expression <span class="keyword">using</span> arguments</div></pre></td></tr></table></figure>
<p>要特别提醒看官：虽然lambda 函数可以接收任意多个参数 (包括可选参数) 并且返回单个表达式的值，但是lambda 函数不能包含命令，包含的表达式不能超过一个。不要试图向 lambda 函数中塞入太多的东西；如果你需要更复杂的东西，应该定义一个普通函数，然后想让它多长就多长。</p>
<p>就lambda而言，它并没有给程序带来性能上的提升，它带来的是代码的简洁。比如，要打印一个list，里面依次是某个数字的1次方，二次方，三次方，四次方。用lambda可以这样做：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lamb = [ <span class="keyword">lambda</span> x:x,<span class="keyword">lambda</span> x:x**<span class="number">2</span>,<span class="keyword">lambda</span> x:x**<span class="number">3</span>,<span class="keyword">lambda</span> x:x**<span class="number">4</span> ]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> lamb:</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> i(<span class="number">3</span>),</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="number">3</span> <span class="number">9</span> <span class="number">27</span> <span class="number">81</span></div></pre></td></tr></table></figure>
<p>###map<br>map()是python的一个内置函数，它的基本样式是：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">map</span><span class="params">(func,seq)</span></span></div></pre></td></tr></table></figure>
<p>func是一个函数，seq是一个序列对象。在执行的时候，序列对象中的每个元素，按照从左到右的顺序，依次被取出来，并塞入到func那个函数里面，并将func的返回值依次存到一个list中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>items = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>squared = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> items:</div><div class="line"><span class="meta">... </span>    squared.append(i**<span class="number">2</span>)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>squared</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sqr</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x**<span class="number">2</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(sqr,items)</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, items)</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[ x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> items ]     <span class="comment">#这个我最喜欢了，一般情况下速度足够快，而且可读性强</span></div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</div></pre></td></tr></table></figure>
<p>理解要点：</p>
<ul>
<li>对iterable中的每个元素，依次应用function的方法（函数）（这本质上就是一个for循环）。</li>
<li>将所有结果返回一个list。</li>
<li>如果参数很多，则对那些参数并行执行function。</li>
</ul>
<p>例如:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst2 = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; map(lambda x,<span class="symbol">y:</span> x+y, lst1,lst2)     <span class="comment">#将两个列表中的对应项加起来，并返回一个结果列表</span></div><div class="line">[<span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
<p>请看官注意了，上面这个例子如果用for循环来写，还不是很难，如果扩展一下，下面的例子用for来改写，就要小心了：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst2 = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst3 = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; map(lambda x,y,<span class="symbol">z:</span> x+y+z, lst1,lst2,lst3)</div><div class="line">[<span class="number">14</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">6</span>]</div></pre></td></tr></table></figure>
<p>###reduce</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; reduce(lambda x,<span class="symbol">y:</span> x+y,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="number">15</span></div></pre></td></tr></table></figure>
<p>原来map是上下运算，reduce是横着逐个元素进行运算。</p>
<p>为了锻炼思维，看这么一个问题，有两个list，a = [3,9,8,5,2],b=[1,4,9,2,6],计算：a[0]b[0]+a[1]b[1]+…的结果。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a</div><div class="line">[<span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; b</div><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; zip(a,b)        <span class="comment">#复习一下zip，下面的方法中要用到</span></div><div class="line">[(<span class="number">3</span>, <span class="number">1</span>), (<span class="number">9</span>, <span class="number">4</span>), (<span class="number">8</span>, <span class="number">9</span>), (<span class="number">5</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">6</span>)]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; sum(x*y for x,y in zip(a,b))    <span class="comment">#解析后直接求和</span></div><div class="line"><span class="number">133</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; new_list = [x*y for x,y in zip(a,b)]    <span class="comment">#可以看做是上面方法的分布实施</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="comment">#这样解析也可以：new_tuple = (x*y for x,y in zip(a,b))</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; new_list</div><div class="line">[<span class="number">3</span>, <span class="number">36</span>, <span class="number">72</span>, <span class="number">10</span>, <span class="number">12</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; sum(new_list)     <span class="comment">#或者:sum(new_tuple)</span></div><div class="line"><span class="number">133</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; reduce(lambda sum,(x,y): sum+x*y,zip(a,b),<span class="number">0</span>)    <span class="comment">#这个方法是在耍酷呢吗？</span></div><div class="line"><span class="number">133</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; from operator import add,mul            <span class="comment">#耍酷的方法也不止一个</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; reduce(add,map(mul,a,b))</div><div class="line"><span class="number">133</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; reduce(lambda x,<span class="symbol">y:</span> x+y, map(lambda x,<span class="symbol">y:</span> x*y, a,b))  <span class="comment">#map,reduce,lambda都齐全了，更酷吗？</span></div><div class="line"><span class="number">133</span></div></pre></td></tr></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>通过下面代码体会：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; numbers = range(-<span class="number">5</span>,<span class="number">5</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; numbers</div><div class="line">[-<span class="number">5</span>, -<span class="number">4</span>, -<span class="number">3</span>, -<span class="number">2</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; filter(lambda <span class="symbol">x:</span> x&gt;<span class="number">0</span>, numbers) </div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; [x for x in numbers if x&gt;<span class="number">0</span>]     <span class="comment">#与上面那句等效</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; filter(lambda <span class="symbol">c:</span> c!=<span class="string">'i'</span>, <span class="string">'qiwsir'</span>)  <span class="comment">#能不能对应上面文档说明那句话呢？</span></div><div class="line"><span class="string">'qwsr'</span>                                  <span class="comment">#“If iterable is a string or a tuple, the result also has that type;”</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python函数3]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%87%BD%E6%95%B03/</url>
      <content type="html"><![CDATA[<h3 id="多个参数的函数"><a href="#多个参数的函数" class="headerlink" title="多个参数的函数"></a>多个参数的函数</h3><p>既然有很多不确定性，那么函数的参数的个数，也当然有不确定性，函数怎么解决这个问题呢？python用这样的方式解决参数个数的不确定性：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x,*arg)</span>:</span></div><div class="line">    <span class="keyword">print</span> x         <span class="comment">#输出参数x的值</span></div><div class="line">    result = x</div><div class="line">    <span class="keyword">print</span> arg       <span class="comment">#输出通过*arg方式得到的值</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</div><div class="line">        result +=i</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="keyword">print</span> func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)    <span class="comment">#赋给函数的参数个数不仅仅是2个</span></div></pre></td></tr></table></figure>
<p>运行此代码后，得到如下结果：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>                       #这是函数体内的第一个print，参数x得到的值是<span class="number">1</span></div><div class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>) #这是函数内的第二个print，参数arg得到的是一个元组</div><div class="line"><span class="number">45</span>                      #最后的计算结果</div></pre></td></tr></table></figure>
<p>从上面例子可以看出，如果输入的参数个数不确定，其它参数全部通过*arg，以元组的形式由arg收集起来。对照上面的例子不难发现：</p>
<ul>
<li>值1传给了参数x</li>
<li>值2,3,4,5,6.7.8.9被塞入一个tuple里面，传给了arg</li>
</ul>
<p>为了能够更明显地看出args（名称可以不一样，但是符号必须要有），可以用下面的一个简单函数来演示：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> args      <span class="comment">#打印通过这个参数得到的对象</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>下面演示分别传入不同的值，通过参数*args得到的结果：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; foo(<span class="string">"qiwsir"</span>,<span class="string">"qiwsir.github.io"</span>,<span class="string">"python"</span>)</div><div class="line">(<span class="string">'qiwsir'</span>, <span class="string">'qiwsir.github.io'</span>, <span class="string">'python'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; foo(<span class="string">"qiwsir"</span>,<span class="number">307</span>,[<span class="string">"qiwsir"</span>,<span class="number">2</span>],&#123;<span class="string">"name"</span><span class="symbol">:<span class="string">"qiwsir"</span></span>,<span class="string">"lang"</span><span class="symbol">:<span class="string">"python"</span></span>&#125;)</div><div class="line">(<span class="string">'qiwsir'</span>, <span class="number">307</span>, [<span class="string">'qiwsir'</span>, <span class="number">2</span>], &#123;<span class="string">'lang'</span>: <span class="string">'python'</span>, <span class="string">'name'</span>: <span class="string">'qiwsir'</span>&#125;)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; foo(<span class="string">"python"</span>)</div><div class="line">(<span class="string">'python'</span>,)</div></pre></td></tr></table></figure>
<p>即使只有一个值，也是用tuple收集它。特别注意，在tuple中，如果只有一个元素，后面要有一个逗号。</p>
<p>还有一种可能，就是不给那个*args传值，也是许可的。例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, *args)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"x:"</span>,x</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"tuple:"</span>,args</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>foo(<span class="number">7</span>)</div><div class="line">x: <span class="number">7</span></div><div class="line">tuple: ()</div></pre></td></tr></table></figure>
<p>除了用args这种形式的参数接收多个值之外，还可以用*kargs的形式接收数值，不过这次有点不一样：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(**kargs)</span></span>:</div><div class="line">...     print kargs</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; foo(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)    <span class="comment">#注意观察这次赋值的方式和打印的结果</span></div><div class="line">&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<p>如果这次还用foo(1,2,3)的方式，会有什么结果呢？</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">TypeError:</span> foo() takes exactly <span class="number">0</span> arguments (<span class="number">3</span> given)</div></pre></td></tr></table></figure>
<p>如果用**kargs的形式收集值，会得到dict类型的数据，但是，需要在传值的时候说明“键”和“值”，因为在字典中是以键值对形式出现的。</p>
<h3 id="另一种传值方式"><a href="#另一种传值方式" class="headerlink" title="另一种传值方式"></a>另一种传值方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x + y</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>
<p>这是通常的函数调用方法，在前面已经屡次用到。这种方法简单明快，很容易理解。但是，世界总是多样性的，有时候你秀出下面的方式，甚至在某种情况用下面的方法可能更优雅。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; bars = (<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; add(*bars)</div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>
<p>先把要传的值放到元组中，赋值给一个变量bars，然后用add(*bars)的方式，把值传到函数内。这有点像前面收集参数的逆过程。注意的是，元组中元素的个数，要跟函数所要求的变量个数一致。如果这样就报错了：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; bars = (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; add(*bars)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">TypeError:</span> add() takes exactly <span class="number">2</span> arguments (<span class="number">3</span> given)</div></pre></td></tr></table></figure>
<p>这是使用一个星号*，是以元组形式传值，如果用**的方式，是不是应该以字典的形式呢？理当如此。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">book</span><span class="params">(author,name)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"%s is writing %s"</span> % (author,name)</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bars = &#123;<span class="string">"name"</span>:<span class="string">"Starter learning Python"</span>,<span class="string">"author"</span>:<span class="string">"Kivi"</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>book(**bars)</div><div class="line">Kivi <span class="keyword">is</span> writing Starter learning Python</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python函数2]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%87%BD%E6%95%B02/</url>
      <content type="html"><![CDATA[<p>###返回值</p>
<p>通过例子函数来说明，如下（输出斐波那契数列）：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"></div><div class="line">def fibs(n):</div><div class="line">    <span class="literal">result</span> = [<span class="number">0</span>,<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>):</div><div class="line">        <span class="literal">result</span>.append(<span class="literal">result</span>[-<span class="number">2</span>] + <span class="literal">result</span>[-<span class="number">1</span>])</div><div class="line">    <span class="keyword">return</span> <span class="literal">result</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    lst = fibs(<span class="number">10</span>)</div><div class="line">    print lst</div></pre></td></tr></table></figure>
<p>观察fibs函数，最后有一个语句return result，意思是将变量result的值返回。返回给谁呢？这要看我们当前在什么位置调用该函数了。在上面的程序中，以lst = fibs(10)语句的方式，调用了函数，那么函数就将值返回到当前状态，并记录在内存中，然后把它赋值给变量lst。如果没有这个赋值语句，函数照样返回值，但是它飘忽在内存中，我们无法得到，并且最终还被当做垃圾被python回收了。</p>
<p>注意：上面的函数只返回了一个返回值（是一个列表），有时候需要返回多个，是以元组形式返回。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="function"><span class="keyword">def</span> <span class="title">my_fun</span><span class="params">()</span></span>:</div><div class="line">...     return <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></div><div class="line">... </div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = my_fun()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>如果没有使用return。事实上返回的是一个None，这种模样的函数，通常采用下面的方式，因为他们返回的是None，似乎这个返回值利用价值不高，于是就不用找一个变量来接受返回值了。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="function"><span class="keyword">def</span> <span class="title">my_fun</span><span class="params">()</span></span>:</div><div class="line">...     print <span class="string">"I am doing somthin."</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; my_fun()</div><div class="line">I am doing somthin.</div></pre></td></tr></table></figure>
<p>return还有一个作用，结束正在执行的函数，有点类似循环中的break的作用。如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_fun</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"I am coding."</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"I finished."</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_fun()</div><div class="line">I am coding.</div></pre></td></tr></table></figure>
<h3 id="函数中的文档"><a href="#函数中的文档" class="headerlink" title="函数中的文档"></a>函数中的文档</h3><p>一般在每个函数名字的下面，还要比较多的说明，这个被称为“文档”，在文档中主要是说明这个函数的用途。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_fun</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="string">"""</span></div><div class="line"><span class="meta">... </span>    This is my function.</div><div class="line"><span class="meta">... </span>    """</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"I am a craft."</span></div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_fun.__doc__</div><div class="line"><span class="string">'\n    This is my function.\n    '</span></div></pre></td></tr></table></figure>
<p>在这个函数的名称下面，用三个引号的方式，包裹着对这个函数的说明，那个就是函数文档,<strong>doc</strong>它的内容就来自这里。</p>
<h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcx</span><span class="params">()</span>:</span></div><div class="line">    x = <span class="number">9</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"this x is in the funcx:--&gt;"</span>,x</div><div class="line"></div><div class="line">funcx()</div><div class="line"><span class="keyword">print</span> <span class="string">"--------------------------"</span></div><div class="line"><span class="keyword">print</span> <span class="string">"this x is out of funcx:--&gt;"</span>,x</div></pre></td></tr></table></figure>
<p>那么，这段代码输出的结果是什么呢？看：</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">this x is in the funcx:--&gt; 9</span></div><div class="line">--------------------------</div><div class="line">this x is out of funcx:--&gt; 2</div></pre></td></tr></table></figure>
<p>从输出看出，运行funcx()，输出了funcx()里面的变量x=9；然后执行代码中的最后一行，print “this x is out of funcx:–&gt;”,x</p>
<p>特别要关注的是，前一个x输出的是函数内部的变量x;后一个x输出的是函数外面的变量x。两个变量彼此没有互相影响，虽然都是x。从这里看出，两个x各自在各自的领域内起到作用。</p>
<p>把那个只在函数体内（某个范围内）起作用的变量称之<strong>局部变量</strong>。</p>
<p>全局变量的例子如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">x = <span class="number">2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcx</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> x    <span class="comment">#跟上面函数的不同之处</span></div><div class="line">    x = <span class="number">9</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"this x is in the funcx:--&gt;"</span>,x</div><div class="line"></div><div class="line">funcx()</div><div class="line"><span class="keyword">print</span> <span class="string">"--------------------------"</span></div><div class="line"><span class="keyword">print</span> <span class="string">"this x is out of funcx:--&gt;"</span>,x</div></pre></td></tr></table></figure>
<p>以上两段代码的不同之处在于，后者在函数内多了一个global x，这句话的意思是在声明x是全局变量，也就是说这个x跟函数外面的那个x同一个，接下来通过x=9将x的引用对象变成了9。所以，就出现了下面的结果。</p>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">this x is in the funcx:--&gt; 9</span></div><div class="line">--------------------------</div><div class="line">this x is out of funcx:--&gt; 9</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python函数1]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%87%BD%E6%95%B01/</url>
      <content type="html"><![CDATA[<p><strong>变量本质上是一个占位符</strong> 就是先把那个位置用变量占上，表示这里有一个东西，至于这个位置放什么东西，以后再说，反正先用一个符号占着这个位置（占位符）。</p>
<p>上一个简单的例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_function</span><span class="params">(a, b)</span>:</span>			<span class="comment">#在声明要建立一个函数的时候，一定要使用def(define),（a,b)这个括号里面的是这个函数的参数，也就是函数变量。</span></div><div class="line">    c = a + b</div><div class="line">    <span class="keyword">print</span> c</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    add_function(<span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<p><strong>当以交互的方式运行 Python 时，局部 __name__ 变量被赋予值 ‘__main__‘ 。同样地，当从命令行执行 Python 模块，而不是将其导入另一个模块时，其 __name__ 属性被赋予值 ‘__main<em>\</em>‘ ，而不是该模块的实际名称。这样，模块可以查看其自身的 __name__ 值来自行确定它们自己正被如何使用，是作为另一个程序的支持，还是作为从命令行执行的主应用程序。</strong></p>
<p>###函数的赋值</p>
<p>1、按照参数次序赋值，根据参数的位置，值与之对应。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span>       <span class="comment">#为了能够更明了显示参数赋值特点，重写此函数</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"x="</span>,x    <span class="comment">#分别打印参数赋值结果</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"y="</span>,y</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x+y</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">10</span>,<span class="number">3</span>)           <span class="comment">#x=10,y=3</span></div><div class="line">x= <span class="number">10</span></div><div class="line">y= <span class="number">3</span></div><div class="line"><span class="number">13</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">3</span>,<span class="number">10</span>)           <span class="comment">#x=3,y=10</span></div><div class="line">x= <span class="number">3</span></div><div class="line">y= <span class="number">10</span></div><div class="line"><span class="number">13</span></div></pre></td></tr></table></figure>
<p>2、还可以直接把赋值语句写到里面，就明确了参数和对象的关系。当然，这时候顺序就不重要了，也可以这样</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; add(y=<span class="number">10</span>,x=<span class="number">3</span>)       #x=<span class="number">3</span>,y=<span class="number">10</span></div><div class="line">x= <span class="number">3</span></div><div class="line">y= <span class="number">10</span></div><div class="line"><span class="number">13</span></div></pre></td></tr></table></figure>
<p>3、在定义函数的时候，参数可以像前面那样，等待被赋值，也可以定义的时候就赋给一个默认值。例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">times</span><span class="params">(x,y=<span class="number">2</span>)</span>:</span>       <span class="comment">#y的默认值为2</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"x="</span>,x</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">"y="</span>,y</div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x*y</div><div class="line"><span class="meta">... </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>times(<span class="number">3</span>)                <span class="comment">#x=3,y=2</span></div><div class="line">x= <span class="number">3</span></div><div class="line">y= <span class="number">2</span></div><div class="line"><span class="number">6</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>times(x=<span class="number">3</span>)              <span class="comment">#同上</span></div><div class="line">x= <span class="number">3</span></div><div class="line">y= <span class="number">2</span></div><div class="line"><span class="number">6</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>times(<span class="number">3</span>,<span class="number">4</span>)              <span class="comment">#x=3,y=4,y的值不再是2</span></div><div class="line">x= <span class="number">3</span></div><div class="line">y= <span class="number">4</span></div><div class="line"><span class="number">12</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>times(<span class="string">"qiwsir"</span>)         <span class="comment">#再次体现了多态特点</span></div><div class="line">x= qiwsir</div><div class="line">y= <span class="number">2</span></div><div class="line"><span class="string">'qiwsirqiwsir'</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python字符串3]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%AD%97%E7%AC%A6%E4%B8%B23/</url>
      <content type="html"><![CDATA[<h3 id="字符串格式化输出"><a href="#字符串格式化输出" class="headerlink" title="字符串格式化输出"></a>字符串格式化输出</h3><p>占位符</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">"I like %s"</span> % <span class="string">"python"</span></div><div class="line"><span class="string">'I like python'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">"I like %s"</span> % <span class="string">"Pascal"</span></div><div class="line"><span class="string">'I like Pascal'</span></div></pre></td></tr></table></figure>
<p>常用的有<code>%s</code>和<code>%d</code>，或者再加上<code>%f</code></p>
<hr>
<p>新的格式化方法(<code>string.format()</code>)</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; s1 = <span class="string">"I like &#123;0&#125; &#123;1&#125;"</span>.format(<span class="string">"python"</span>,<span class="number">2016</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print s1</div><div class="line">I like python <span class="number">2016</span></div></pre></td></tr></table></figure>
<p>这是 python 非常提倡的<code>string.format()</code>的格式化方法，其中<code>{索引值}</code>为占位符</p>
<p>也可以直接指定，如：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; s1 = <span class="string">"I like &#123;name&#125; &#123;num&#125;,&#123;num&#125;"</span>.format(name=<span class="string">"python"</span>,num=<span class="number">2016</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print s1</div><div class="line">I like python <span class="number">2016</span>,<span class="number">2016</span></div></pre></td></tr></table></figure>
<hr>
<p>字典格式化，如：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lang = <span class="string">"python"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print <span class="string">"I love %(program)s"</span><span class="string">%&#123;"program":lang&#125;</span></div><div class="line">I love python</div></pre></td></tr></table></figure>
<h3 id="常用的字符串方法"><a href="#常用的字符串方法" class="headerlink" title="常用的字符串方法"></a>常用的字符串方法</h3><p><strong>分割字符串 split</strong></p>
<p>将字符串根据某个分隔符分割，获得一个列表</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; str = <span class="string">"I love python"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.split(<span class="string">" "</span>)</div><div class="line">[<span class="string">'I'</span>, <span class="string">'love'</span>, <span class="string">'python'</span>]</div></pre></td></tr></table></figure>
<p><strong>拼接字符串 join</strong></p>
<p>可以将列表中的字符串拼接成一个</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; list</div><div class="line">[<span class="string">'I'</span>, <span class="string">'love'</span>, <span class="string">'python'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">" "</span>.join(list)</div><div class="line"><span class="string">'I love python'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">","</span>.join(list)</div><div class="line"><span class="string">'I,love,python'</span></div></pre></td></tr></table></figure>
<p><strong>去掉字符串两头的空格 strip()</strong></p>
<p>经常用在用户登录或者输入一些信息时，去除输入内容左右两边的空格</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; str = <span class="string">" hello "</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.strip()</div><div class="line"><span class="string">'hello'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str</div><div class="line"><span class="string">' hello '</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.lstrip()	<span class="comment"># 去除左边的空格</span></div><div class="line"><span class="string">'hello '</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str.rstrip()	<span class="comment"># 去除右边的空格</span></div><div class="line"><span class="string">' hello'</span></div></pre></td></tr></table></figure>
<p><strong>字符大小写的转换</strong></p>
<p>在python中有下面一堆内建函数，用来实现各种类型的大小写转化</p>
<ul>
<li>S.upper() # S中的字母大写</li>
<li>S.lower() # S中的字母小写</li>
<li>S.capitalize() # 首字母大写</li>
<li>S.title() # 将字符换首字母都变为大写</li>
<li>S.isupper() # S中的字母是否全是大写</li>
<li>S.islower() # S中的字母是否全是小写</li>
<li>S.istitle() # S中字符串中所有的单词拼写首字母是否为大写，且其他字母为小写</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python字符串2]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%AD%97%E7%AC%A6%E4%B8%B22/</url>
      <content type="html"><![CDATA[<p>在python中，把字符串这样的对象类型统称为 <strong>序列</strong>。</p>
<h3 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h3><p>几个例子：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 从左到右，从0开始，从右到左，从-1开始</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num = <span class="string">"0123456789"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="number">0</span>]</div><div class="line"><span class="string">'0'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="number">0</span><span class="symbol">:</span><span class="number">8</span>]</div><div class="line"><span class="string">'01234567'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="symbol">:</span><span class="number">8</span>]</div><div class="line"><span class="string">'01234567'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="number">1</span><span class="symbol">:</span>]</div><div class="line"><span class="string">'123456789'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="symbol">:</span>]</div><div class="line"><span class="string">'0123456789'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[-<span class="number">1</span>]</div><div class="line"><span class="string">'9'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[-<span class="number">2</span>]</div><div class="line"><span class="string">'8'</span></div></pre></td></tr></table></figure>
<h3 id="字符串的基本操作"><a href="#字符串的基本操作" class="headerlink" title="字符串的基本操作"></a>字符串的基本操作</h3><p><strong>+ 连接字符串</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; str1 = <span class="string">"hello"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str2 = <span class="string">"sate"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str1 + str2</div><div class="line"><span class="string">'hellosate'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; str1 + <span class="string">" "</span> + str2</div><div class="line"><span class="string">'hello sate'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt;</div></pre></td></tr></table></figure>
<p><strong>in</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">"hello"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hel"</span> <span class="keyword">in</span> str1</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"helo"</span> <span class="keyword">in</span> str1</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>最值</strong></p>
<p>是根据字符在计算机中编码来计算的</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; str1 = <span class="string">"hello"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; max(str1)</div><div class="line"><span class="string">'o'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; min(str1)</div><div class="line"><span class="string">'e'</span></div></pre></td></tr></table></figure>
<p><strong>比较</strong></p>
<p>两个字符串的比较是先将字符串中的符号转化为对应编码的数字，然后比较。<br>如果返回负数，则第一个小于第二个<br>如果返回整数，则第一个大于第二个<br>如果返回零，则两个相等。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; hehe = <span class="string">"hehe"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; haha = <span class="string">"haha"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; cmp(hehe,haha)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; cmp(haha,hehe)</div><div class="line">-<span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt;</div></pre></td></tr></table></figure>
<p><code>ord()</code>是一个内建函数，可以返回某个字符的 ASCII 值，根据该值来比较。<code>chr()</code>正好反过来，根据整数值得到相应的字符。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; ord(<span class="string">"a"</span>)</div><div class="line"><span class="number">97</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; chr(<span class="number">97</span>)</div><div class="line"><span class="string">'a'</span></div></pre></td></tr></table></figure>
<p><strong>*</strong></p>
<p>字符串中的“乘法”</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = <span class="string">"hahe"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a*<span class="number">3</span></div><div class="line"><span class="string">'hahehahehahe'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">"-"</span>*<span class="number">20</span></div><div class="line"><span class="string">'--------------------'</span></div></pre></td></tr></table></figure>
<p><strong>len()</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = <span class="string">"hello"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(a)</div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python字符串1]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%AD%97%E7%AC%A6%E4%B8%B21/</url>
      <content type="html"><![CDATA[<p><strong>拼接字符串：</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = <span class="string">"hello"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; b = <span class="number">2016</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print a + str(b)	<span class="comment"># str转换为字符串格式</span></div><div class="line">hello2016</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print a + repr(b)	<span class="comment"># 创建一个字符串，以合法的python表达式的形式来表示值</span></div><div class="line">hello2016</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print a + <span class="string">`b`</span>		<span class="comment"># 作用和repr()一样，不太使用，python3.0不再使用</span></div><div class="line">hello2016</div></pre></td></tr></table></figure>
<hr>
<p><strong>raw_input和input</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; name = raw_input(<span class="string">"input your name : "</span>)</div><div class="line">input your name : sate</div><div class="line"><span class="string">'sate'</span></div><div class="line"><span class="comment"># raw_input会将所有输入当作原始数据，然后放入字符串中，不管输入的是什么，name变量赋值的都是字</span></div><div class="line">符串</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; name = input(<span class="string">"input your name : "</span>)</div><div class="line">input your name : <span class="string">"sate"</span></div><div class="line"><span class="string">'sate'</span></div><div class="line"><span class="comment"># input 会假设用户输入的是合法的Python表达式，输入字符串时要加双引号，输入整数时不需要，name</span></div><div class="line">变量是个整形(int)</div><div class="line"><span class="comment"># 大部分情况下会使用raw_input</span></div></pre></td></tr></table></figure>
<hr>
<p><strong>长字符串、原始字符串、Unicode</strong></p>
<p>如果需要写一个非常长的多行字符串，可以使用三个引号，可以在字符串中使用单引号和双引号而不用转义。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"""</span></div><div class="line"><span class="meta">... </span>hi,all:</div><div class="line"><span class="meta">... </span>    my name is "sate"</div><div class="line"><span class="meta">... </span>    nice to meet \nyou!</div><div class="line"><span class="meta">... </span>"""</div><div class="line"></div><div class="line">hi,all:</div><div class="line">	my name <span class="keyword">is</span> <span class="string">"sate"</span></div><div class="line">	nice to meet</div><div class="line">you!</div><div class="line"><span class="comment"># 注： python的转义字符依然有效</span></div></pre></td></tr></table></figure>
<p><strong>原始字符串</strong>：就是指字符串里面的每个字符都是原始含义，比如反斜杠，不会被看做转义符。</p>
<p>原始字符串应用场景：有时我们需要输出目录。例如 <code>C:\new\team</code></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; print <span class="string">"C:\new\team"</span></div><div class="line"><span class="symbol">C:</span></div><div class="line">ew	eam</div></pre></td></tr></table></figure>
<p>我们可以使用<code>\</code>来进行转义，但对于长路径可能需要很多反斜线，麻烦，我们可以使用原始字符串来解决</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">r"C:\new\team"</span></div><div class="line">C:\new\team</div></pre></td></tr></table></figure>
<p>这种方法在做网站设置网站目录结构的时候非常有用。</p>
<p><strong>注：原始字符串最后一个字符不能是反斜线，如果是Python就不能清楚是否应该结束字符串</strong></p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print <span class="string">r"C:\new\team\"</span></div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></div><div class="line">    print <span class="string">r"C:\new\team\"</span></div><div class="line">                        ^</div><div class="line">SyntaxError: EOL <span class="keyword">while</span> scanning <span class="built_in">string</span> literal</div><div class="line"></div><div class="line">&gt;&gt;&gt; print <span class="string">r"C:\new\team\\"</span> # 如果使用反斜线进行转义，用于转义的反斜线也会被输出</div><div class="line">C:\<span class="keyword">new</span>\team\\</div><div class="line"></div><div class="line">&gt;&gt;&gt; print <span class="string">r"C:\new\team"</span> <span class="string">"\\"</span>	# 可以使用该方法进行输出</div><div class="line">C:\<span class="keyword">new</span>\team\</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python四则运算]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<p><strong>加、减、乘、除</strong></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="number">1</span>+<span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line">&gt;&gt;&gt; <span class="number">2</span><span class="number">-1</span></div><div class="line"><span class="number">1</span></div><div class="line">&gt;&gt;&gt; <span class="number">1</span>*<span class="number">2</span></div><div class="line"><span class="number">2</span></div><div class="line">&gt;&gt;&gt; <span class="number">1</span>/<span class="number">2</span></div><div class="line"><span class="number">0</span></div><div class="line">&gt;&gt;&gt; <span class="number">1</span>/<span class="number">2.0</span></div><div class="line"><span class="number">0.5</span></div></pre></td></tr></table></figure>
<p><strong>有问题的地方：</strong></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="number">10.0</span>/<span class="number">3</span></div><div class="line"><span class="number">3.3333333333333335</span></div><div class="line">&gt;&gt;&gt; <span class="number">0.1</span> + <span class="number">0.2</span></div><div class="line"><span class="number">0.30000000000000004</span></div><div class="line">&gt;&gt;&gt; <span class="number">0.1</span> + <span class="number">0.2</span> - <span class="number">0.2</span></div><div class="line"><span class="number">0.10000000000000003</span></div><div class="line">&gt;&gt;&gt; <span class="number">0.1</span> + <span class="number">0.2</span> - <span class="number">0.3</span></div><div class="line"><span class="number">5.551115123125783e-17</span></div></pre></td></tr></table></figure>
<p>我们输入的是十进制，计算机要把十进制的数转化为二进制，然后再计算。但是,在转化中，浮点数转化为二进制，转化为二进制后，不会精确等于十进制的0.1。同时，计算机存储的位数是有限制的，所以，就出现上述现象了。对于需要非常精确的情况，可以使用 <code>decimal</code> 模块，它实现的十进制运算适合会计方面的应用和高精度要求的应用。</p>
<p><strong>余数</strong></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="number">5</span>%<span class="number">2</span></div><div class="line"><span class="number">1</span></div><div class="line">&gt;&gt;&gt; <span class="number">5</span>%<span class="number">2.0</span></div><div class="line"><span class="number">1.0</span></div></pre></td></tr></table></figure>
<p>可以使用内建函数<code>divmod()</code>来返回商和余数</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; divmod(<span class="number">5</span>,<span class="number">2</span>)  #表示<span class="number">5</span>除以<span class="number">2</span>，返回商和余数</div><div class="line">(<span class="number">2</span>, <span class="number">1</span>)</div><div class="line">&gt;&gt;&gt; divmod(<span class="number">5</span>,<span class="number">3</span>)</div><div class="line">(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">&gt;&gt;&gt; divmod(<span class="number">5</span>,<span class="number">2.0</span>)</div><div class="line">(<span class="number">2.0</span>, <span class="number">1.0</span>)</div></pre></td></tr></table></figure>
<p><strong>四舍五入</strong><br>使用内建函数<code>round()</code>来实现</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; round(<span class="number">1.2345</span>,<span class="number">2</span>)</div><div class="line"><span class="number">1.23</span></div><div class="line">&gt;&gt;&gt; round(<span class="number">1.2345</span>,<span class="number">3</span>)	#有问题，应该是<span class="number">1.235</span>，归根到底还是浮点数中的十进制转化为二进制惹的祸。</div><div class="line"><span class="number">1.234</span></div></pre></td></tr></table></figure>
<p><strong>math模块</strong></p>
<p>导入模块</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import math</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; math.pi</div><div class="line"><span class="number">3.141592653589793</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; dir(math)		<span class="comment"># 查看模块中包含的工具</span></div><div class="line">[<span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'acos'</span>, <span class="string">'acosh'</span>, <span class="string">'asin'</span>, <span class="string">'asinh'</span>, <span class="string">'atan'</span>, <span class="string">'atan2'</span>, <span class="string">'atanh'</span>, <span class="string">'ceil'</span>, <span class="string">'copysign'</span>, <span class="string">'cos'</span>, <span class="string">'cosh'</span>, <span class="string">'degrees'</span>, <span class="string">'e'</span>, <span class="string">'erf'</span>, <span class="string">'erfc'</span>, <span class="string">'exp'</span>, <span class="string">'expm1'</span>, <span class="string">'fabs'</span>, <span class="string">'factorial'</span>, <span class="string">'floor'</span>, <span class="string">'fmod'</span>, <span class="string">'frexp'</span>, <span class="string">'fsum'</span>, <span class="string">'gamma'</span>, <span class="string">'hypot'</span>, <span class="string">'isinf'</span>, <span class="string">'isnan'</span>, <span class="string">'ldexp'</span>, <span class="string">'lgamma'</span>, <span class="string">'log'</span>, <span class="string">'log10'</span>, <span class="string">'log1p'</span>, <span class="string">'modf'</span>, <span class="string">'pi'</span>, <span class="string">'pow'</span>, <span class="string">'radians'</span>, <span class="string">'sin'</span>, <span class="string">'sinh'</span>, <span class="string">'sqrt'</span>, <span class="string">'tan'</span>, <span class="string">'tanh'</span>, <span class="string">'trunc'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; help(math.pow) <span class="comment">#查看每个函数的使用说明</span></div></pre></td></tr></table></figure>
<p>常用的几个math函数：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; math.sqrt(<span class="number">9</span>)</div><div class="line"><span class="number">3.0</span></div><div class="line">&gt;&gt;&gt; math.floor(<span class="number">3.14</span>)</div><div class="line"><span class="number">3.0</span></div><div class="line">&gt;&gt;&gt; math.floor(<span class="number">3.92</span>)</div><div class="line"><span class="number">3.0</span></div><div class="line">&gt;&gt;&gt; math.fabs(<span class="number">-2</span>)    #等价于abs(<span class="number">-2</span>)</div><div class="line"><span class="number">2.0</span></div><div class="line">&gt;&gt;&gt; abs(<span class="number">-2</span>)</div><div class="line"><span class="number">2</span></div><div class="line">&gt;&gt;&gt; math.fmod(<span class="number">5</span>,<span class="number">3</span>)    #等价于<span class="number">5</span>%<span class="number">3</span></div><div class="line"><span class="number">2.0</span></div><div class="line">&gt;&gt;&gt; <span class="number">5</span>%<span class="number">3</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python列表2]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%88%97%E8%A1%A82/</url>
      <content type="html"><![CDATA[<p>###列表的方法</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; dir(list)</div><div class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__delitem__'</span>, <span class="string">'__delslice__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getslice__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__iadd__'</span>, <span class="string">'__imul__'</span>, <span class="string">'__init__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__reversed__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__setitem__'</span>, <span class="string">'__setslice__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'append'</span>, <span class="string">'count'</span>, <span class="string">'extend'</span>, <span class="string">'index'</span>, <span class="string">'insert'</span>, <span class="string">'pop'</span>, <span class="string">'remove'</span>, <span class="string">'reverse'</span>, <span class="string">'sort'</span>]</div></pre></td></tr></table></figure>
<p>除去带有双下划线的，主要有以下几个方法：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'append'</span>, <span class="string">'count'</span>, <span class="string">'extend'</span>, <span class="string">'index'</span>, <span class="string">'insert'</span>, <span class="string">'pop'</span>, <span class="string">'remove'</span>, <span class="string">'reverse'</span>, <span class="string">'sort'</span></div></pre></td></tr></table></figure>
<p>可以通过 help 来查看各个方法的使用方法。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="keyword">help</span>(<span class="keyword">list</span>.<span class="keyword">append</span>)</div><div class="line"><span class="keyword">Help</span> <span class="keyword">on</span> method_descriptor:</div><div class="line"></div><div class="line"><span class="keyword">append</span>(...)</div><div class="line">    <span class="keyword">L</span>.<span class="keyword">append</span>(object) -- <span class="keyword">append</span> object to end</div></pre></td></tr></table></figure>
<p>下边对各个方法进行举例说明:</p>
<h4 id="append"><a href="#append" class="headerlink" title="append"></a><strong>append</strong></h4><p>在队列末尾追加新的对象：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">&gt;&gt;&gt; lst.append(<span class="number">4</span>)</div><div class="line">&gt;&gt;&gt; lst</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<h4 id="count"><a href="#count" class="headerlink" title="count"></a><strong>count</strong></h4><p>统计某个元素在列表中出现的次数</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line">&gt;&gt;&gt; lst.count(<span class="number">4</span>)</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h4 id="extend"><a href="#extend" class="headerlink" title="extend"></a><strong>extend</strong></h4><p>在列表的末尾一次性追加另一个序列。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">&gt;&gt;&gt; b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line">&gt;&gt;&gt; a.extend(b)</div><div class="line">&gt;&gt;&gt; a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div></pre></td></tr></table></figure>
<p>和连接操作<code>+</code>不同的是，<code>extend</code>会直接在原队列上修改，<code>+</code>连接操作会生成新的列表</p>
<h4 id="index"><a href="#index" class="headerlink" title="index"></a><strong>index</strong></h4><p>从列表中找出某个值第一个匹配项的索引位置</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; lst = [<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]</div><div class="line">&gt;&gt;&gt; lst.index(<span class="number">4</span>)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a><strong>insert</strong></h4><p>将对象插入到列表中</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; lst = [<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]</div><div class="line">&gt;&gt;&gt; lst.insert(<span class="number">3</span>,<span class="string">"hi"</span>)</div><div class="line">&gt;&gt;&gt; lst</div><div class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, 'hi', <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a><strong>pop</strong></h4><p>移除列表中的一个元素（默认是最后一个），并返回该元素的值</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; lst</div><div class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>]</div><div class="line">&gt;&gt;&gt; lst.pop()</div><div class="line"><span class="number">4</span></div><div class="line">&gt;&gt;&gt; lst</div><div class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">&gt;&gt;&gt; lst.pop(<span class="number">4</span>)</div><div class="line"><span class="number">5</span></div><div class="line">&gt;&gt;&gt; lst</div><div class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]</div></pre></td></tr></table></figure>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a><strong>remove</strong></h4><p>移除列表中某个值得第一个匹配项</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst = [<span class="string">"a"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"b"</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst.remove(<span class="string">"a"</span>)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>]</div></pre></td></tr></table></figure>
<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a><strong>reverse</strong></h4><p>将列表中的元素反向存放</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst.reverse()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst</div><div class="line">[<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</div></pre></td></tr></table></figure>
<p>可以使用<code>lst[::-1]</code>来实现反转</p>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a><strong>sort</strong></h4><p>在原位置对列表进行排序，意味着直接改变原来的列表。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst</div><div class="line">[<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst.sort()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>]</div></pre></td></tr></table></figure>
<p>如果我们需要一个排序一个列表，但是保留原有列表时，就要注意了，下边这种方式是有问题的</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; y = x.sort()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; print y</div><div class="line">None</div></pre></td></tr></table></figure>
<p>正确的方法是：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; x = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; y = x[<span class="symbol">:</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; y.sort()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; x</div><div class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; y</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<p>还可以使用<code>sorted()</code>来实现,不会改变原有列表</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</div><div class="line">&gt;&gt;&gt; y = sorted(x)</div><div class="line">&gt;&gt;&gt; x</div><div class="line">[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</div><div class="line">&gt;&gt;&gt; y</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python列表1]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%88%97%E8%A1%A81/</url>
      <content type="html"><![CDATA[<p>用<code>[]</code>来表示一个列表，列表中的元素可以是任意类型，如 <code>int</code>,<code>str</code>, 可以是另一个 <code>list</code>，也可以是一个字典。所以说 <code>list</code> 是 <code>python</code> 的苦力，什么活都可干。 </p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; list = [<span class="string">"string"</span>,<span class="number">86</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],&#123;<span class="string">"a"</span>:<span class="number">3</span>,<span class="string">"b"</span>:<span class="number">4</span>,<span class="string">"c"</span>:<span class="string">"hi"</span>&#125;]</div><div class="line">&gt;&gt;&gt; <span class="keyword">type</span>(list)</div><div class="line">&lt;<span class="keyword">type</span> 'list'&gt;</div></pre></td></tr></table></figure>
<h3 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h3><p>和之前字符串使用的方法一致，不过因为列表中可能什么都有，所以可以对元素进行二次切片</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; list[0]			</div><div class="line">'string'</div><div class="line">&gt;&gt;&gt; list[<span class="string">0</span>][<span class="symbol">2:5</span>]		#对列表中第一个字符换进行了二次切分</div><div class="line">'rin'</div><div class="line">&gt;&gt;&gt; list[<span class="string">3</span>][<span class="symbol">"a"</span>]		#对列表中第4个字典换进行了二次切分</div><div class="line">3</div></pre></td></tr></table></figure>
<h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><p>这个功能会经常用到,字符串也可以使用，<strong>并不会更改原值，会创建新值，原变量不变</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列表的反转</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; list[<span class="symbol">:</span><span class="symbol">:-</span><span class="number">1</span>]</div><div class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># 字符串的反转</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = <span class="string">"hello"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a[<span class="symbol">:</span><span class="symbol">:-</span><span class="number">1</span>]</div><div class="line"><span class="string">'olleh'</span></div></pre></td></tr></table></figure>
<p>另一种方法,使用<code>reversed</code>函数</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; list(reversed(<span class="string">"abcd"</span>))</div><div class="line">[<span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; ha = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4.5</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; list(reversed(ha))</div><div class="line">[<span class="number">4.5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</div></pre></td></tr></table></figure>
<h3 id="list-的基本操作"><a href="#list-的基本操作" class="headerlink" title="list 的基本操作"></a>list 的基本操作</h3><p>和字符串的差不多</p>
<p><strong>len() 判断长度</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(lst)</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p><strong>+，连接两个序列</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; alst</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst + alst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div></pre></td></tr></table></figure>
<p><strong>*，重复元素</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst</div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lst * <span class="number">3</span></div><div class="line">[<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>, <span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>, <span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'c++'</span>]</div></pre></td></tr></table></figure>
<p><strong>in, 成员资格判断</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"python"</span> <span class="keyword">in</span> lst</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"c#"</span> <span class="keyword">in</span> lst</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><strong>max()和min()，取最大最小值</strong></p>
<p>以int类型元素为例。如果不是，都是按照字符在ascii编码中所对应的数字进行比较的。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; alst</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; max(alst)</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; min(alst)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; max(lst)</div><div class="line"><span class="string">'python'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; min(lst)</div><div class="line"><span class="string">'c++'</span></div></pre></td></tr></table></figure>
<p><strong>cmp()，比较</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; lsta = [<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lstb = [<span class="number">2</span>,<span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; cmp(lsta,lstb)</div><div class="line">-<span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lstc = [<span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; cmp(lsta,lstc)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; lstd = [<span class="string">'2'</span>,<span class="string">'3'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; cmp(lsta,lstd)</div><div class="line">-<span class="number">1</span></div></pre></td></tr></table></figure>
<p><strong>append(), 追加元素</strong></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a = [<span class="string">"good"</span>,<span class="string">"python"</span>,<span class="string">"I"</span>]      </div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a</div><div class="line">[<span class="string">'good'</span>, <span class="string">'python'</span>, <span class="string">'I'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a.append(<span class="string">"like"</span>)        <span class="comment">#向list中添加str类型"like"</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a</div><div class="line">[<span class="string">'good'</span>, <span class="string">'python'</span>, <span class="string">'I'</span>, <span class="string">'like'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a.append(<span class="number">100</span>)           <span class="comment">#向list中添加int类型100</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a</div><div class="line">[<span class="string">'good'</span>, <span class="string">'python'</span>, <span class="string">'I'</span>, <span class="string">'like'</span>, <span class="number">100</span>]</div></pre></td></tr></table></figure>
<p>另一种方法：</p>
<p><code>list.append(x)</code>等效于：<code>a[len(a):]=[x]</code></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; a</div><div class="line">[<span class="string">'good'</span>, <span class="string">'python'</span>, <span class="string">'I'</span>, <span class="string">'like'</span>, <span class="number">100</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a[len(a)<span class="symbol">:</span>]=[<span class="number">3</span>]      <span class="comment">#len(a),即得到list的长度，这个长度是指list中的元素个数。</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a</div><div class="line">[<span class="string">'good'</span>, <span class="string">'python'</span>, <span class="string">'I'</span>, <span class="string">'like'</span>, <span class="number">100</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(a)</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a[<span class="number">6</span><span class="symbol">:</span>]=[<span class="string">'xxoo'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; a</div><div class="line">[<span class="string">'good'</span>, <span class="string">'python'</span>, <span class="string">'I'</span>, <span class="string">'like'</span>, <span class="number">100</span>, <span class="number">3</span>, <span class="string">'xxoo'</span>]</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python序列]]></title>
      <url>http://yoursite.com/2016/12/15/Python%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>数据结构：通过某种方式组织在一起的数据元素的集合，这些数据元素可以是数字或者字符，甚至是其他的数据结构。<br>Python中最基本的数据结构是序列。</p>
<h2 id="序列概述"><a href="#序列概述" class="headerlink" title="序列概述"></a>序列概述</h2><p>Python包含六种内建序列：列表、元祖、字符串、Unicode字符串、buffer对象和xrange对象。<br>列表和元祖的主要区别是列表可以修改，而元祖不能。</p>
<h2 id="通用序列操作"><a href="#通用序列操作" class="headerlink" title="通用序列操作"></a>通用序列操作</h2><p>所有序列类型都可以进行某些特定的操作。如：索引，分片，加，乘，检查某个元素是否属于序列成员。python还有计算序列长度、找出最大元素和最小元素的内建函数。</p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a><strong>索引</strong></h3><p>序列中所有元素都是有编号的，从0开始递增，并可以通过编号访问。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">例</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; test=<span class="string">'hello'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; test[<span class="number">0</span>]</div><div class="line"><span class="string">'h'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; test[<span class="number">2</span>]</div><div class="line"><span class="string">'l'</span></div></pre></td></tr></table></figure>
<p>亦可以使用负编号，python从右边（最后一个元素）开始计数，从-1开始。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">例</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; test=<span class="string">'hello'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; test[-<span class="number">1</span>]</div><div class="line"><span class="string">'o'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; test[-<span class="number">2</span>]</div><div class="line"><span class="string">'l'</span></div></pre></td></tr></table></figure>
<p>字符串字面值能够直接使用索引，而不需要一个变量。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'hello'</span>[<span class="number">1</span>]</div><div class="line"><span class="string">'e'</span></div></pre></td></tr></table></figure>
<p>如果一个函数调用 返回一个序列，可以直接对返回结果进行索引操作。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">例：只对用户输入年份的第<span class="number">4</span>个数字感兴趣</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; want=raw_input(<span class="string">'Year: '</span>)[<span class="number">3</span>]</div><div class="line"><span class="symbol">Year:</span> <span class="number">2015</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; want</div><div class="line"><span class="string">'5'</span></div></pre></td></tr></table></figure>
<h3 id="分片"><a href="#分片" class="headerlink" title="分片"></a><strong>分片</strong></h3><p>分片操作可以访问一定范围内的元素。用过冒号分隔两个索引来实现。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; tag = <span class="string">'&lt;a href="http://www.python.org"&gt;Python web site&lt;/a&gt;'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; tag[<span class="number">9</span><span class="symbol">:</span><span class="number">30</span>]</div><div class="line"><span class="string">'http://www.python.org'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; tag[<span class="number">32</span><span class="symbol">:-</span><span class="number">4</span>]</div><div class="line"><span class="string">'Python web site'</span></div></pre></td></tr></table></figure>
<p>分片操作需要提供两个索引的边界，第一个索引的元素是包含在分片内的，而第二个是不在分片内的。如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; num=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="number">0</span><span class="symbol">:</span><span class="number">5</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure>
<p>捷径：如果分片部分包含序列结尾（或开始）的元素，只需置空最后（最前）一个索引即可。两个都置空则是整个序列。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; num = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="symbol">:</span><span class="number">3</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="number">3</span><span class="symbol">:</span>]</div><div class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[-<span class="number">3</span><span class="symbol">:</span>]</div><div class="line">[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="symbol">:</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div></pre></td></tr></table></figure>
<p>步长：默认步长为1。分片操作就是按照这个步长来遍历序列的元素。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; num = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</div><div class="line">默认步长为<span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="number">0</span><span class="symbol">:</span><span class="number">10</span><span class="symbol">:</span><span class="number">1</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="number">0</span><span class="symbol">:</span><span class="number">10</span><span class="symbol">:</span><span class="number">2</span>]</div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div><div class="line">步长也可以为负数，既从右往左取值。并且必须让开始点大于结束点。</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; num[<span class="symbol">:</span><span class="symbol">:-</span><span class="number">2</span>]</div><div class="line">[<span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>]</div></pre></td></tr></table></figure>
<h3 id="序列相加"><a href="#序列相加" class="headerlink" title="序列相加"></a><strong>序列相加</strong></h3><p>加运算符<code>+</code>可以连接序列。但两种相同类型的序列才能进行连接操作。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; num1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">&gt;&gt;&gt; num2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line">&gt;&gt;&gt; num1 + num2</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">&gt;&gt;&gt; num3 = ['a','b','c']</div><div class="line">&gt;&gt;&gt; num1 + num2 + num3</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, 'a', 'b', 'c']</div></pre></td></tr></table></figure>
<h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a><strong>乘法</strong></h3><p>数字N乘以一个序列会变成一个新的序列，将原序列重复N倍</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">&gt;&gt;&gt; num * <span class="number">3</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&gt;&gt;&gt; 'hello ' * <span class="number">5</span></div><div class="line">'hello hello hello hello hello '</div></pre></td></tr></table></figure>
<p>空列表：空列表可以使用[]来表示。<br>None：None是Python的一个内建值，代表空值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">例如：初始化一个长度为<span class="number">10</span>的列表。</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>nu = [<span class="keyword">None</span>] * <span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>nu</div><div class="line">[<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>]</div></pre></td></tr></table></figure>
<h3 id="成员资格-in"><a href="#成员资格-in" class="headerlink" title="成员资格 in"></a><strong>成员资格 in</strong></h3><p>in运算符：检测一个值是否在序列中。条件为真返回True，假则False。 是个布尔运算符。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">'tom'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'t'</span> <span class="keyword">in</span> name</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'n'</span> <span class="keyword">in</span> name</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>users = [<span class="string">'tom'</span>,<span class="string">'jin'</span>,<span class="string">'jon'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>raw_input(<span class="string">'Enter your name: '</span>) <span class="keyword">in</span> users;</div><div class="line">Enter your name: zwx</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>raw_input(<span class="string">'Enter your name: '</span>) <span class="keyword">in</span> users;</div><div class="line">Enter your name: tom</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<h3 id="最大值、最小值和长度"><a href="#最大值、最小值和长度" class="headerlink" title="最大值、最小值和长度"></a><strong>最大值、最小值和长度</strong></h3><p>对应内建函数max，min和len。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; num = [<span class="number">23</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">56</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; len(num)</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; max(num)</div><div class="line"><span class="number">56</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; min(num)</div><div class="line"><span class="number">12</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Zabbix监控Mysql]]></title>
      <url>http://yoursite.com/2016/12/15/Zabbix%E7%9B%91%E6%8E%A7Mysql/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在zabbix中有官方提供的关于mysql的监控模版，但是该模板需要在zabbix的客户端添加自定义的key来取值。  </p>
</blockquote>
<h3 id="1-check-mysql-sh"><a href="#1-check-mysql-sh" class="headerlink" title="1. check_mysql.sh"></a>1. check_mysql.sh</h3><p>编写脚本来获取mysql的各个状态值，放置在/alidata/zabbix-agentd/scripts/chk_mysql.sh。  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># -------------------------------------------------------------------------------</span></div><div class="line"><span class="comment"># FileName:    check_mysql.sh</span></div><div class="line"><span class="comment"># Revision:    1.0</span></div><div class="line"><span class="comment"># Date:        2015/06/09</span></div><div class="line"><span class="comment"># Author:      DengYun</span></div><div class="line"><span class="comment"># Email:       dengyun@ttlsa.com</span></div><div class="line"><span class="comment"># Website:     www.ttlsa.com</span></div><div class="line"><span class="comment"># Description: </span></div><div class="line"><span class="comment"># Notes:       ~</span></div><div class="line"><span class="comment"># -------------------------------------------------------------------------------</span></div><div class="line"><span class="comment"># Copyright:   2015 (c) DengYun</span></div><div class="line"><span class="comment"># License:     GPL</span></div><div class="line"> </div><div class="line"><span class="comment"># 用户名</span></div><div class="line">MYSQL_USER=<span class="string">'zabbix'</span></div><div class="line"> </div><div class="line"><span class="comment"># 密码</span></div><div class="line">MYSQL_PWD=<span class="string">'123123'</span></div><div class="line"> </div><div class="line"><span class="comment"># 主机地址/IP</span></div><div class="line">MYSQL_HOST=<span class="string">'127.0.0.1'</span></div><div class="line"> </div><div class="line"><span class="comment"># 端口</span></div><div class="line">MYSQL_PORT=<span class="string">'3306'</span></div><div class="line"> </div><div class="line"><span class="comment"># 数据连接</span></div><div class="line">MYSQL_CONN=<span class="string">"/alidata/server/mysql/bin/mysqladmin -u<span class="variable">$&#123;MYSQL_USER&#125;</span> -p<span class="variable">$&#123;MYSQL_PWD&#125;</span> -h<span class="variable">$&#123;MYSQL_HOST&#125;</span> -P<span class="variable">$&#123;MYSQL_PORT&#125;</span>"</span></div><div class="line"> </div><div class="line"><span class="comment"># 参数是否正确</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> <span class="_">-ne</span> <span class="string">"1"</span> ];<span class="keyword">then</span> </div><div class="line">    <span class="built_in">echo</span> <span class="string">"arg error!"</span> </div><div class="line"><span class="keyword">fi</span> </div><div class="line"> </div><div class="line"><span class="comment"># 获取数据</span></div><div class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span> </div><div class="line">    Uptime) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status|cut <span class="_">-f</span>2 <span class="_">-d</span><span class="string">":"</span>|cut <span class="_">-f</span>1 <span class="_">-d</span><span class="string">"T"</span>` </div><div class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">        ;; </div><div class="line">    Com_update) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_update"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">        ;; </div><div class="line">    Slow_queries) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status |cut <span class="_">-f</span>5 <span class="_">-d</span><span class="string">":"</span>|cut <span class="_">-f</span>1 <span class="_">-d</span><span class="string">"O"</span>` </div><div class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">        ;; </div><div class="line">    Com_select) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_select"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">        <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Com_rollback) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_rollback"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Questions) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> status|cut <span class="_">-f</span>4 <span class="_">-d</span><span class="string">":"</span>|cut <span class="_">-f</span>1 <span class="_">-d</span><span class="string">"S"</span>` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Com_insert) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_insert"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Com_delete) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_delete"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Com_commit) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_commit"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Bytes_sent) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Bytes_sent"</span> |cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Bytes_received) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Bytes_received"</span> |cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">    Com_begin) </div><div class="line">        result=`<span class="variable">$&#123;MYSQL_CONN&#125;</span> extended-status |grep -w <span class="string">"Com_begin"</span>|cut <span class="_">-d</span><span class="string">"|"</span> <span class="_">-f</span>3` </div><div class="line">                <span class="built_in">echo</span> <span class="variable">$result</span> </div><div class="line">                ;; </div><div class="line">                        </div><div class="line">        *) </div><div class="line">        <span class="built_in">echo</span> <span class="string">"Usage:<span class="variable">$0</span>(Uptime|Com_update|Slow_queries|Com_select|Com_rollback|Questions|Com_insert|Com_delete|Com_commit|Bytes_sent|Bytes_received|Com_begin)"</span> </div><div class="line">        ;; </div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>
<h3 id="2-修改配置文件zabbix-agentd-conf"><a href="#2-修改配置文件zabbix-agentd-conf" class="headerlink" title="2. 修改配置文件zabbix_agentd.conf"></a>2. 修改配置文件zabbix_agentd.conf</h3><p>增加自定义的key，在配置文件的最后一行写入,如下代码行并重启zabbix客户端。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取mysql版本</span></div><div class="line"><span class="attr">UserParameter</span>=mysql.version,mysql -V</div><div class="line"><span class="comment"># # 获取mysql性能指标,这个是上面定义好的脚本</span></div><div class="line"><span class="attr">UserParameter</span>=mysql.status[*],bash /alidata/zabbix-agentd/scripts/chk_mysql.sh <span class="variable">$1</span></div><div class="line"><span class="comment"># # 获取mysql运行状态</span></div><div class="line"><span class="attr">UserParameter</span>=mysql.ping,mysqladmin -uzabbix -p123123 -P3306 -h127.<span class="number">0.0</span>.<span class="number">1</span>  ping | grep -c alive</div></pre></td></tr></table></figure>
<p>###3. 在监控项目中加入Template App MySQL模版  ###<br>在项目中加入模版后，查看Monitoring-&gt;Graphs中是否有数据图形产生。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN的搭建和使用]]></title>
      <url>http://yoursite.com/2016/12/15/SVN%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<hr>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># yum install subversion</span></div></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>1. 新建目录，并做成资源仓库</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">mkdir</span> <span class="keyword">mkdir</span> /svn</div><div class="line">$ svnadmin create /svn/</div><div class="line">$ <span class="keyword">ls</span> /svn/</div><div class="line"><span class="keyword">conf</span>  <span class="keyword">db</span>  <span class="keyword">format</span>  hooks  locks  README.txt</div><div class="line"># 目录说明：</div><div class="line">hooks目录：放置hook脚本文件的目录</div><div class="line">locks目录：用来放置subversion的<span class="keyword">db</span>锁文件和db_logs锁文件的目录，用来追踪存取文件库的客户端</div><div class="line"><span class="keyword">format</span>文件：是一个文本文件，里面只放了一个整数，表示当前文件库配置的版本号</div><div class="line"><span class="keyword">conf</span>目录：是这个仓库的配置文件（仓库的用户访问账号、权限等）</div></pre></td></tr></table></figure>
<p><strong>2.  配置svn服务的配置文件svnserver.conf文件</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ vim /svn/<span class="keyword">conf</span>/svnserve.<span class="keyword">conf</span></div><div class="line">[general]</div><div class="line">anon-access = none</div><div class="line">auth-access = write</div><div class="line">password-<span class="keyword">db</span> = /svn/<span class="keyword">conf</span>/passwd</div><div class="line">authz-<span class="keyword">db</span> = /svn/<span class="keyword">conf</span>/authz</div><div class="line">realm = My <span class="keyword">Test</span> Repository</div></pre></td></tr></table></figure>
<p><strong>3. 添加两个访问用户及口令</strong></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /svn/conf/passwd</div><div class="line">[users]</div><div class="line">zwx = <span class="number">123123</span></div><div class="line">test1 = <span class="number">123123</span></div></pre></td></tr></table></figure>
<p><strong>注：</strong> 对用户配置文件的修改立即生效，不必重启svn服务。</p>
<p><strong>4. 配置新用户的授权文件</strong></p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ vim /svn/conf/authz</div><div class="line">[groups]</div><div class="line">admin = zwx</div><div class="line"><span class="keyword">user</span> <span class="title">= test1</span></div><div class="line">[/]</div><div class="line">@admin = rw</div><div class="line">@<span class="keyword">user</span> <span class="title">= r</span></div><div class="line">* =</div></pre></td></tr></table></figure>
<p><strong>格式说明 :</strong></p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[<span class="variable">&lt;版本库&gt;</span>:/项目/目录]</div><div class="line"></div><div class="line">@<span class="variable">&lt;用户组名&gt;</span> = <span class="variable">&lt;权限&gt;</span></div><div class="line"></div><div class="line"><span class="variable">&lt;用户名&gt;</span> = <span class="variable">&lt;权限&gt;</span></div><div class="line"></div><div class="line">/ 表示对根目录（即/svn目录）下的所有子目录范围设置权限；</div><div class="line"></div><div class="line">[/abc] 表示对资料库中abc项目设置权限；</div><div class="line"></div><div class="line">创建一个admin组，组成员包括zwx;</div><div class="line"></div><div class="line">创建一个<span class="keyword">user</span>组，成员只有test1;</div><div class="line"></div><div class="line">admin组对目录有读写权限；</div><div class="line"></div><div class="line">单个用户test1有读写权限；</div><div class="line">*=表示除了上面设置的权限用户组以外，其他所有用户都设置空权限，空权限表示禁止访问本目录，这很重要一定要加上。</div><div class="line"></div><div class="line">注意：对权限配置文件的修改立即生效，不必重启svn。</div></pre></td></tr></table></figure>
<p><strong>5. 启动SVN</strong></p>
<p>svn 启动可以使用两种方法：</p>
<p>一： 指定项目启动</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ svnserve -d -r /svn/</div><div class="line"><span class="meta"># 指定项目启动时，在客户端checkout的时候，使用命令如下：</span></div><div class="line">$ svn cheackout svn:<span class="comment">//192.168.174.128</span></div><div class="line"><span class="meta"># 会同步svn目录，并且命名为192.168.174.128</span></div></pre></td></tr></table></figure>
<p>二： /etc/init.d/svnserve 启动</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>/etc/init.d/svnserve start</div><div class="line"><span class="comment"># 使用启动命令启动</span></div><div class="line"><span class="variable">$ </span>svn cheackout <span class="symbol">svn:</span>/<span class="regexp">/192.168.174.128/svn</span></div><div class="line"><span class="comment"># 会同步svn目录，并且命名为svn</span></div></pre></td></tr></table></figure>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>1、将文件checkout到本地目录</p>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn checkout <span class="built_in">path</span>（<span class="built_in">path</span>是服务器上的目录）</div><div class="line">例如：svn checkout svn:<span class="comment">//192.168.1.1/pro/domain</span></div><div class="line">简写：svn co</div></pre></td></tr></table></figure>
<p>2、往版本库中添加新的文件</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">add</span><span class="bash"> file</span></div><div class="line">例如：svn <span class="keyword">add</span><span class="bash"> test.php(添加test.php)</span></div><div class="line">svn <span class="keyword">add</span><span class="bash"> *.php(添加当前目录下所有的php文件)</span></div></pre></td></tr></table></figure>
<p>3、将改动的文件提交到版本库</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn commit -<span class="keyword">m</span> <span class="string">"LogMessage"</span> [-<span class="keyword">N</span>] [--<span class="keyword">no</span>-unlock] PATH(如果选择了保持锁，就使用--<span class="keyword">no</span>-unlock开关)</div><div class="line">例如：svn commit -<span class="keyword">m</span> <span class="string">"add test file for my test"</span> <span class="keyword">test</span>.php</div><div class="line">简写：svn <span class="keyword">ci</span></div></pre></td></tr></table></figure>
<p>4、加锁/解锁</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">lock</span> -m <span class="string">"LockMessage"</span> [<span class="comment">--force] PATH</span></div><div class="line">例如：svn <span class="keyword">lock</span> -m <span class="string">"lock test file"</span> test.php</div><div class="line">svn <span class="keyword">unlock</span> <span class="keyword">PATH</span></div></pre></td></tr></table></figure>
<p>5、更新到某个版本</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">update</span> -r <span class="keyword">m</span> path</div><div class="line">例如：</div><div class="line">svn <span class="keyword">update</span>如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本。</div><div class="line">svn <span class="keyword">update</span> -r 200 <span class="keyword">test</span>.php(将版本库中的文件<span class="keyword">test</span>.php还原到版本200)</div><div class="line">svn <span class="keyword">update</span> <span class="keyword">test</span>.php(更新，于版本库同步。如果在提交的时候提示过期的话，是因为冲突，需要先<span class="keyword">update</span>，修改文件，然后清除svn resolved，最后再提交commit)</div><div class="line">简写：svn up</div></pre></td></tr></table></figure>
<p>6、查看文件或者目录状态</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>）svn <span class="built_in">status</span> path（目录下的文件和子目录的状态，正常状态不显示）</div><div class="line">【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】</div><div class="line"><span class="number">2</span>）svn <span class="built_in">status</span> -v path(显示文件和子目录状态)</div><div class="line">第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。</div><div class="line">注：svn <span class="built_in">status</span>、svn <span class="built_in">diff</span>和 svn <span class="built_in">revert</span>这三条命令在没有网络的情况下也可以执行的，原因是svn在本地的.svn中保留了本地版本的原始拷贝。</div><div class="line">简写：svn st</div></pre></td></tr></table></figure>
<p>7、删除文件</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">svn <span class="built_in">delete</span> path -m <span class="string">"delete test fle"</span></div><div class="line">例如：svn <span class="built_in">delete</span> svn://<span class="number">192.168</span>.1.1/pro/<span class="built_in">domain</span>/test.php -m <span class="string">"delete test file"</span></div><div class="line">或者直接svn <span class="built_in">delete</span> test.php 然后再svn ci -m '<span class="built_in">delete</span> test file‘，推荐使用这种</div><div class="line">简写：svn (<span class="built_in">del</span>, <span class="built_in">remove</span>, rm)</div></pre></td></tr></table></figure>
<p>8、查看日志</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">log</span> path</div><div class="line">例如：svn <span class="keyword">log</span> <span class="keyword">test</span>.php 显示这个文件的所有修改记录，及其版本号的变化</div></pre></td></tr></table></figure>
<p>9、查看文件详细信息</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">svn</span> <span class="literal">info</span> path</div><div class="line">例如：svn <span class="literal">info</span> test.php</div></pre></td></tr></table></figure>
<p>10、比较差异</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">svn</span> <span class="selector-tag">diff</span> <span class="selector-tag">path</span>(将修改的文件与基础版本比较)</div><div class="line">例如：<span class="selector-tag">svn</span> <span class="selector-tag">diff</span> <span class="selector-tag">test</span><span class="selector-class">.php</span></div><div class="line"><span class="selector-tag">svn</span> <span class="selector-tag">diff</span> <span class="selector-tag">-r</span> <span class="selector-tag">m</span><span class="selector-pseudo">:n</span> <span class="selector-tag">path</span>(对版本<span class="selector-tag">m</span>和版本<span class="selector-tag">n</span>比较差异)</div><div class="line">例如：<span class="selector-tag">svn</span> <span class="selector-tag">diff</span> <span class="selector-tag">-r</span> 200<span class="selector-pseudo">:201</span> <span class="selector-tag">test</span><span class="selector-class">.php</span></div><div class="line">简写：<span class="selector-tag">svn</span> <span class="selector-tag">di</span></div></pre></td></tr></table></figure>
<p>11、将两个版本之间的差异合并到当前文件</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">svn</span> <span class="selector-tag">merge</span> <span class="selector-tag">-r</span> <span class="selector-tag">m</span><span class="selector-pseudo">:n</span> <span class="selector-tag">path</span></div><div class="line">例如：<span class="selector-tag">svn</span> <span class="selector-tag">merge</span> <span class="selector-tag">-r</span> 200<span class="selector-pseudo">:205</span> <span class="selector-tag">test</span><span class="selector-class">.php</span>（将版本200与205之间的差异合并到当前文件，但是一般都会产生冲突，需要处理一下）</div></pre></td></tr></table></figure>
<p>12、SVN 帮助</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">help</span></div><div class="line">svn <span class="keyword">help</span> <span class="keyword">ci</span></div></pre></td></tr></table></figure>
<p>13、版本库下的文件和目录列表</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn list <span class="built_in">path</span></div><div class="line">显示<span class="built_in">path</span>目录下的所有属于版本库的文件和目录</div><div class="line">简写：svn ls</div></pre></td></tr></table></figure>
<p>14、创建纳入版本控制下的新目录</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">svn <span class="built_in">mkdir</span>: 创建纳入版本控制下的新目录。</div><div class="line">用法: <span class="number">1</span>、<span class="built_in">mkdir</span> <span class="built_in">PATH</span>...</div><div class="line"><span class="number">2</span>、<span class="built_in">mkdir</span> URL...</div><div class="line">创建版本控制的目录。</div><div class="line"><span class="number">1</span>、每一个以工作副本 <span class="built_in">PATH</span> 指定的目录，都会创建在本地端，并且加入新增</div><div class="line">调度，以待下一次的提交。</div><div class="line"><span class="number">2</span>、每个以URL指定的目录，都会透过立即提交于仓库中创建。</div><div class="line">在这两个情况下，所有的中间目录都必须事先存在。</div></pre></td></tr></table></figure>
<p>15、恢复本地修改</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">svn</span> <span class="keyword">revert: </span>恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。<span class="keyword">revert:</span></div><div class="line">用法: <span class="keyword">revert </span>PATH...</div><div class="line">注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复</div><div class="line">被删除的目录</div></pre></td></tr></table></figure>
<p>16、代码库URL变更</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">svn <span class="keyword">switch</span> (sw): 更新工作副本至不同的<span class="built_in">URL</span>。</div><div class="line">用法: <span class="number">1</span>、<span class="keyword">switch</span> <span class="built_in">URL</span> [PATH]</div><div class="line"><span class="number">2</span>、<span class="keyword">switch</span> <span class="comment">--relocate FROM TO [PATH...]</span></div><div class="line"><span class="number">1</span>、更新你的工作副本，映射到一个新的<span class="built_in">URL</span>，其行为跟“svn update”很像，也会将</div><div class="line">服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的</div><div class="line">方法。</div><div class="line"><span class="number">2</span>、改写工作副本的<span class="built_in">URL</span>元数据，以反映单纯的<span class="built_in">URL</span>上的改变。当仓库的根<span class="built_in">URL</span>变动 </div><div class="line">(比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用</div><div class="line">这个命令更新工作副本与仓库的对应关系。</div></pre></td></tr></table></figure>
<p>17、解决冲突</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">svn resolved: 移除工作副本的目录或文件的“冲突”状态。</div><div class="line">用法: resolved <span class="built_in">PATH</span>...</div><div class="line">注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的</div><div class="line">相关文件，然后让 <span class="built_in">PATH</span> 可以再次提交。</div></pre></td></tr></table></figure>
<p>18、输出指定文件或URL的内容。</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn <span class="built_in">cat</span> 目标[@版本]...如果指定了版本，将从指定的版本开始查找。</div><div class="line">svn <span class="built_in">cat</span> -r PREV filename &gt; filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的）</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx中root和alias的区别]]></title>
      <url>http://yoursite.com/2016/12/15/Nginx%E4%B8%ADroot%E5%92%8Calias%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p><code>nginx</code>指定文件路径有两种方式 <code>root</code> 和 <code>alias</code>。</p>
<p><code>root</code> 与 <code>alias</code> 主要区别在于 <code>nginx</code> 如何解释 <code>location</code> 后面的 <code>uri</code>，这会使两者分别以不同的方式将请求映射到<br>服务器文件上。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root]</div><div class="line">语法： root path</div><div class="line">默认值： root html</div><div class="line">配置段： http、 server、 location、 <span class="keyword">if</span></div><div class="line"></div><div class="line">[<span class="built_in">alias</span>]</div><div class="line">语法： <span class="built_in">alias</span> path</div><div class="line">配置段： location</div></pre></td></tr></table></figure>
<p><strong>示例：</strong><br>nginx的location配置如下：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location <span class="meta-keyword">/xing/</span> &#123;</div><div class="line">    root <span class="meta-keyword">/alidata/</span>www<span class="meta-keyword">/phpwind/</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#当访问http:<span class="comment">//192.168.3.14/xing/zheng/index.html时，</span></span></div><div class="line">调用的文件是<span class="meta-keyword">/alidata/</span>www<span class="meta-keyword">/phpwind/</span>xing<span class="meta-keyword">/zheng/</span>index.html。 </div><div class="line"><span class="meta">#既 root路径 + url请求地址。</span></div></pre></td></tr></table></figure>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">location  <span class="meta-keyword">/xing/</span> &#123;</div><div class="line">	alias <span class="meta-keyword">/alidata/</span>www<span class="meta-keyword">/phpwind/</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#当访问http:<span class="comment">//192.168.3.14/xing/zheng/index.html时，</span></span></div><div class="line">调用的文件是<span class="meta-keyword">/alidata/</span>www<span class="meta-keyword">/phpwind/</span>zheng/index.html。</div><div class="line"><span class="meta">#既 省略location后边匹配的路径。</span></div><div class="line">注：</div><div class="line"><span class="number">1.</span> 使用 alias 时，目录名后面一定要加” /”</div><div class="line"><span class="number">2.</span> alias 可以指定任何名称</div><div class="line"><span class="number">3.</span> alias 在使用正则匹配时，必须捕捉要匹配的内容并在指定的内容处使用。</div><div class="line"><span class="number">4.</span> alias 只能位于 location 块中。</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx隐藏版本号]]></title>
      <url>http://yoursite.com/2016/12/15/Nginx%E9%9A%90%E8%97%8F%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
      <content type="html"><![CDATA[<ul>
<li>修改nginx.conf文件</li>
</ul>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vim /../../nginx.conf	# 在http&#123;&#125;加入 server_tokens off;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">……省略</div><div class="line">keepalive_timeout <span class="number">60</span>;</div><div class="line">server_tokens off;</div><div class="line">…….省略</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改fastcgi.conf</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version<span class="comment">;</span></div><div class="line">改为：</div><div class="line">fastcgi_param  SERVER_SOFTWARE    nginx<span class="comment">;</span></div></pre></td></tr></table></figure>
<ul>
<li>重启nginx服务</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx的日志切割]]></title>
      <url>http://yoursite.com/2016/12/15/Nginx%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2/</url>
      <content type="html"><![CDATA[<p>nginx的切割日志的方法记录一下两种方式：logrotate和脚本。</p>
<h2 id="logrotate切割日志"><a href="#logrotate切割日志" class="headerlink" title="logrotate切割日志"></a>logrotate切割日志</h2><ul>
<li>安装logrotate</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y <span class="keyword">install</span> logrotate</div></pre></td></tr></table></figure>
<ul>
<li>配置文件</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">vim <span class="meta-keyword">/etc/</span>logrotate.d/nginx-log 写入：</div><div class="line"><span class="meta-keyword">/var/</span>log<span class="meta-keyword">/nginx/</span>*.<span class="class">log </span>&#123;			<span class="meta">#根据实际路径修改</span></div><div class="line">nocompress</div><div class="line">daily</div><div class="line">copytruncate</div><div class="line">create</div><div class="line">notifempty</div><div class="line">rotate <span class="number">7</span></div><div class="line">olddir <span class="meta-keyword">/data/</span>weblogs/old_log</div><div class="line">missingok</div><div class="line">dateext</div><div class="line">postrotate</div><div class="line"><span class="meta-keyword">/bin/</span>kill -HUP `cat <span class="meta-keyword">/var/</span>run/nginx.pid <span class="number">2</span>&gt; <span class="meta-keyword">/dev/</span>null` <span class="number">2</span>&gt; <span class="meta-keyword">/dev/</span>null || true</div><div class="line">endscript</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：/data/weblogs/*.log 使用通配符时， /data/weblogs/目录下的所有匹配到的日志文件都将切割。如果<br>要切割特定日志文件，就指定到该文件</p>
</blockquote>
<ul>
<li>设置计划任务</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim /etc/crontab</span></div><div class="line"><span class="number">59</span> <span class="number">23</span> * * * root ( <span class="regexp">/usr/</span>sbin<span class="regexp">/logrotate -f /</span>etc<span class="regexp">/logrotate.d/</span>nginx-log)</div></pre></td></tr></table></figure>
<h2 id="脚本切割"><a href="#脚本切割" class="headerlink" title="脚本切割"></a>脚本切割</h2><ul>
<li>使用shell脚本来分割访问日志和错误日志。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">vim /opt/logcut.sh 写入：</div><div class="line"></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">logs_path=<span class="string">"/var/log/nginx/"</span></div><div class="line">date=`date +%Y%m%d`</div><div class="line">log_name1=<span class="string">"access.log"</span>   </div><div class="line">log_name2=<span class="string">"error.log"</span></div><div class="line">pid_path=<span class="string">"/var/run/nginx.pid"</span></div><div class="line">mv <span class="variable">$&#123;logs_path&#125;</span><span class="variable">$&#123;log_name1&#125;</span> <span class="variable">$&#123;logs_path&#125;</span><span class="variable">$&#123;log_name1&#125;</span>_<span class="variable">$date</span>.log</div><div class="line">mv <span class="variable">$&#123;logs_path&#125;</span><span class="variable">$&#123;log_name2&#125;</span> <span class="variable">$&#123;logs_path&#125;</span><span class="variable">$&#123;log_name2&#125;</span>_<span class="variable">$date</span>.log</div><div class="line"><span class="built_in">kill</span> -USR1 `cat <span class="variable">$&#123;pid_path&#125;</span>`</div></pre></td></tr></table></figure>
<ul>
<li>设置计划任务</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vim /etc/crontab</span></div><div class="line"><span class="number">59</span> <span class="number">23</span> * * * root <span class="regexp">/bin/</span>bash <span class="regexp">/opt/</span>logcut.sh</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx的realip配置]]></title>
      <url>http://yoursite.com/2016/12/15/Nginx%E7%9A%84realip%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>当前端有nginx进行反向代理时，后端的机器获得的访问日志中记录的IP是前端nginx的，用一下方法来记录真实IP。</p>
<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">node1</span>：192<span class="selector-class">.168</span><span class="selector-class">.174</span><span class="selector-class">.129</span>	前端代理（<span class="selector-tag">nginx-proxy</span>）	<span class="selector-tag">centos</span> 6<span class="selector-class">.5</span></div><div class="line"><span class="selector-tag">node2</span>：192<span class="selector-class">.168</span><span class="selector-class">.174</span><span class="selector-class">.128</span>	后端服务（<span class="selector-tag">nginx</span>）			<span class="selector-tag">centos</span> 6<span class="selector-class">.5</span></div></pre></td></tr></table></figure>
<h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><ul>
<li><code>nginx</code>安装<code>realip_module</code>模块（两个<code>nginx</code>都要安装）</li>
</ul>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#检查nginx是否安装了realip_module</span></div><div class="line"><span class="comment">nginx</span> <span class="literal">-</span><span class="comment">V</span></div><div class="line"><span class="title">[</span><span class="comment">root@node1</span> <span class="comment">~</span><span class="title">]</span><span class="comment">#</span> <span class="comment">nginx</span> <span class="literal">-</span><span class="comment">V</span></div><div class="line"><span class="comment">nginx</span> <span class="comment">version:</span> <span class="comment">nginx/1</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">4</span></div><div class="line"><span class="comment">built</span> <span class="comment">by</span> <span class="comment">gcc</span> <span class="comment">4</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">7</span> <span class="comment">20120313</span> <span class="comment">(Red</span> <span class="comment">Hat</span> <span class="comment">4</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">7</span><span class="literal">-</span><span class="comment">11)</span> <span class="comment">(GCC)</span> </div><div class="line"><span class="comment">TLS</span> <span class="comment">SNI</span> <span class="comment">support</span> <span class="comment">enabled</span></div><div class="line"><span class="comment">configure</span> <span class="comment">arguments:</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">user=www</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">group=www</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=/alidata/server/nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_stub_status_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">without</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">cache</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_ssl_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_gzip_static_module</span> </div><div class="line"></div><div class="line"><span class="comment">#增加realip_module，找到nginx的源码，重新编译，在编译参数中加入</span><span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_realip_module</span></div><div class="line"><span class="title">[</span><span class="comment">root@node1</span> <span class="comment">nginx</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">4</span><span class="title">]</span><span class="comment">#</span>  <span class="string">.</span><span class="comment">/configure</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">user=www</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">group=www</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=/alidata/server/nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_stub_status_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">without</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">cache</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_ssl_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_gzip_static_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_realip_module</span></div><div class="line"></div><div class="line"><span class="comment">#之后，只需make即可，不要make</span> <span class="comment">install</span></div><div class="line"><span class="title">[</span><span class="comment">root@node1</span> <span class="comment">nginx</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">4</span><span class="title">]</span><span class="comment">#</span> <span class="comment">make</span></div><div class="line"></div><div class="line"><span class="comment">#将新的nginx替换老的nginx</span> <span class="comment">sbin文件（可能需要停止nginx服务）。重启nginx服务</span></div><div class="line"><span class="title">[</span><span class="comment">root@node1</span> <span class="comment">nginx</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">4</span><span class="title">]</span><span class="comment">#</span> <span class="comment">cp</span> <span class="comment">objs/nginx</span> <span class="comment">/alidata/server/nginx/sbin/</span></div></pre></td></tr></table></figure>
<ul>
<li>在<code>nginx</code>代理机器修改配置文件 （192.168.174.129）</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在server段的配置中：</span></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</div><div class="line">        <span class="attribute">server_name</span>  _;</div><div class="line"></div><div class="line">        <span class="attribute">location</span><span class="regexp"> ^~</span> /xing/ &#123;</div><div class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">            <span class="attribute">proxy_pass</span>  http://192.168.174.128/;</div><div class="line">        &#125;</div><div class="line">        <span class="attribute">access_log</span>  /alidata/log/nginx/access/test.log;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改后端<code>nginx</code>的日志格式。（192.168.174.128）</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在nginx.conf中：</span></div><div class="line"><span class="attribute">log_format</span> test <span class="string">'<span class="variable">$http_x_real_ip</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div><div class="line"></div><div class="line"><span class="comment">#在server段配置log</span></div><div class="line">	<span class="attribute">access_log</span>  /alidata/log/nginx/access/zabbix.log test;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问<a href="http://192.168.174.129/xing/" target="_blank" rel="external">http://192.168.174.129/xing/</a> ，观察node2机器的日志。</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">192.168.174.1</span> - - <span class="string">[24/Sep/2015:22:52:38 +0800]</span> <span class="string">"<span class="keyword">GET</span> /images/general/zabbix.ico HTTP/1.0"</span> <span class="number">200</span> <span class="number">1150</span> <span class="string">"http://192.168.174.129/xing/"</span> <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36"</span> <span class="string">"192.168.174.1"</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx的location配置]]></title>
      <url>http://yoursite.com/2016/12/15/Nginx%E7%9A%84location%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p><code>location [=|~|~*|^~] /uri/ { … }</code></p>
<ul>
<li><code>=</code> 严格匹配。如果这个查询匹配，那么将停止搜索并立即处理此请求。</li>
<li><code>~</code> 为区分大小写匹配(可用正则表达式)</li>
<li><code>~*</code> 为不区分大小写匹配(可用正则表达式)</li>
<li><code>!~</code>和<code>!~*</code>分别为区分大小写不匹配及不区分大小写不匹配</li>
<li><code>^~</code> 开头表示<code>uri</code>以某个常规字符串开头，理解为匹配 <code>url</code>路径即可。<code>nginx</code>不对<code>url</code>做编码，因此请求为<code>/static/20%/aa</code>，可以被规则<code>^~ /static/ /aa</code>匹配到（注意是空格）。</li>
</ul>
<p>首先匹配 <code>=</code>，其次匹配<code>^~</code>, 其次是按文件中顺序的正则匹配，最后是交给 <code>/</code> 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>匹配任何查询，因为所有请求都以 / 开头。但是正则表达式规则将被优先和查询匹配。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span> <span class="title">/ &#123;&#125;</span></div></pre></td></tr></table></figure>
<p>仅仅匹配 /，访问根目录</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span> <span class="title">=/ &#123;&#125;</span></div><div class="line">#访问http://localhost/</div></pre></td></tr></table></figure>
<p>不区分大小写匹配任何以gif，jpg，jpeg结尾的文件</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location ~* .(gif|<span class="type">jpg</span>|<span class="type">jpeg</span>)$ ｛</div><div class="line"><span class="built_in">rewrite</span> .(gif|<span class="type">jpg</span>)$ /logo.png;</div><div class="line">｝</div></pre></td></tr></table></figure>
<p>匹配任何已 /images/ 开头的任何查询并且停止搜索。任何正则表达式将不会被测试。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span> <span class="title">^~ /images</span>/ &#123;&#125;</div><div class="line"><span class="comment">#访问http://localhost/images/a.html</span></div></pre></td></tr></table></figure>
<p>不区分大小写匹配任何以 gif、jpg 或 jpeg 结尾的请求。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span> <span class="title">~* .(gif</span>|jpg|jpeg)$ &#123;&#125;</div></pre></td></tr></table></figure>
<p><strong>实际中，常用的三个匹配规则定义。</strong><br>直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。<br>这里是直接转发给后端应用服务器了，也可以是一个静态首页</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 第一个必选规则</span></div><div class="line"><span class="keyword">location</span> <span class="title">= / &#123;</span></div><div class="line">    proxy_pass http://tomcat:<span class="number">8080</span>/index</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span></div><div class="line"><span class="keyword">location</span> <span class="title">^~ /static</span>/ &#123;</div><div class="line">    root /webroot/static/;</div><div class="line">&#125;</div><div class="line"><span class="keyword">location</span> <span class="title">~* \.(gif</span>|jpg|jpeg|png|css|js|ico)$ &#123;</div><div class="line">    root /webroot/res/;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三个规则就是通用规则，用来转发动态请求到后端应用服务器，非静态文件请求就默认是动态请求，自己根据实际把握，毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">location</span> <span class="title">/ &#123;</span></div><div class="line">    proxy_pass http://tomcat:<span class="number">8080</span>/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>场景一： nginx对指定目录做代理</strong>（出自运维生存时间<a href="http://www.ttlsa.com/nginx/nginx-proxy-spec-dir/）" target="_blank" rel="external">http://www.ttlsa.com/nginx/nginx-proxy-spec-dir/）</a></p>
<p>web1，作为前端端服务器，访问地址是<a href="http://192.168.1.1" target="_blank" rel="external">http://192.168.1.1</a>,    要将<a href="http://192.168.1.1/bbs" target="_blank" rel="external">http://192.168.1.1/bbs</a>    的请求交给web2。在web1的网站根目录下并没有bbs目录.<br>web2，作为后端web服务器，访问地址是<a href="http://192.168.1.2" target="_blank" rel="external">http://192.168.1.2</a></p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#方式一</span></div><div class="line">location <span class="regexp">/bbs/</span> &#123;</div><div class="line">proxy_pass http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.2</span><span class="regexp">/;             #有“/</span>”</div><div class="line">&#125;</div><div class="line">效果：通过 http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.1</span><span class="regexp">/bbs  可以访问到web2网站根目录下的内容</span></div></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#方式二（未验证通过）</span></div><div class="line">location <span class="regexp">/bbs/</span> &#123;</div><div class="line">proxy_pass http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.2</span>;            <span class="comment">#无“/”</span></div><div class="line">&#125;</div><div class="line">效果：要通过web1反问web2网站根目录的内容则需要输入：http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.1</span><span class="regexp">/bbs/</span>bbs</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gitlab变更为https访问]]></title>
      <url>http://yoursite.com/2016/12/15/Gitlab%E5%8F%98%E6%9B%B4%E4%B8%BAhttps%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<p>（源码方式安装）</p>
<p>方法来自 gitlab 的 help 文档</p>
<p>1、<code>/home/git/gitlab/config/gitlab.yml</code> 文件</p>
<p>将<code>port</code>改为443，<code>https</code>改为<code>true</code></p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gitlab:</div><div class="line">  ## Web server settings (note: host <span class="keyword">is</span> the FQDN, <span class="keyword">do</span> <span class="keyword">not</span> include http:<span class="comment">//)</span></div><div class="line">  host: git.zhai.me</div><div class="line">  port: <span class="number">443</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="number">443</span> <span class="keyword">if</span> <span class="keyword">using</span> HTTPS, see installation.md#<span class="keyword">using</span>-https <span class="keyword">for</span> additional HTTPS configuration details</div><div class="line">  https: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">true</span> <span class="keyword">if</span> <span class="keyword">using</span> HTTPS, see installation.md#<span class="keyword">using</span>-https <span class="keyword">for</span> additional HTTPS configuration details</div></pre></td></tr></table></figure>
<p>2、<code>/home/git/gitlab-shell/config.yml</code> 文件</p>
<p>将 <code>gitlab_url</code> 改为<code>https</code>的链接,设置认证使用<code>ca_file</code>或<code>ca_path</code></p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">gitlab_url:</span> <span class="string">"https://git.zhai.me/"</span></div><div class="line"></div><div class="line"><span class="meta"># See installation.md#using-https for additional HTTPS configuration details.</span></div><div class="line"><span class="symbol">http_settings:</span></div><div class="line"><span class="meta">#  user: someone</span></div><div class="line"><span class="meta">#  password: somepass</span></div><div class="line"><span class="meta">#  ca_file: /etc/ssl/cert.pem</span></div><div class="line"><span class="symbol">  ca_path:</span> <span class="meta-keyword">/etc/</span>pki<span class="meta-keyword">/tls/</span>certs</div><div class="line"><span class="symbol">  self_signed_cert:</span> false</div></pre></td></tr></table></figure>
<p>3、替换<code>/home/git/gitlab/lib/support/nginx/gitlab-ssl</code>到<code>/etc/nginx/sites-enabled/gitlab</code></p>
<p>并修改其中的<code>YOUR_SERVER_FQDN</code>和<code>ssl_certificate</code>、<code>ssl_certificate_key</code>的位置</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[公司Gitlab升级记录]]></title>
      <url>http://yoursite.com/2016/12/15/%E5%85%AC%E5%8F%B8Gitlab%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>公司gitlab使用源码方式安装，版本为7.2，因为最近结合ldap来进行使用，但是ldap中的block_auto_created_users选项到7.10才支持。所以要升级。<br>参考官方帮助文档：<br><a href="http://doc.gitlab.com/ce/update/patch_versions.html" target="_blank" rel="external">http://doc.gitlab.com/ce/update/patch_versions.html</a><br><a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/update/7.9-to-7.10.md" target="_blank" rel="external">https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/update/7.9-to-7.10.md</a></p>
</blockquote>
<h3 id="从7-2升级到7-9版本"><a href="#从7-2升级到7-9版本" class="headerlink" title="从7.2升级到7.9版本"></a>从7.2升级到7.9版本</h3><h4 id="依赖包和软件升级"><a href="#依赖包和软件升级" class="headerlink" title="依赖包和软件升级"></a>依赖包和软件升级</h4><p>因为版本的升级跨度大，这版本直接肯定有很多新的功能需要扩展包进行支持，所以根据目前最新版(7.12)的源码安装教程重新安装依赖包，并且升级redis服务(测试时出现问题，所以提前升级)。<br>安装依赖包：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install -y build-essential zlib1g-<span class="built_in">dev</span> libyaml-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span> libgdbm-<span class="built_in">dev</span> libreadline-<span class="built_in">dev</span> libncurses5-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> curl openssh-server redis-server checkinstall libxml2-<span class="built_in">dev</span> libxslt-<span class="built_in">dev</span> libcurl4-openssl-<span class="built_in">dev</span> libicu-<span class="built_in">dev</span> logrotate python-docutils pkg-config cmake nodejs libkrb5-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<p>升级redis：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">wget <span class="symbol">http:</span>/<span class="regexp">/download.redis.io/releases</span><span class="regexp">/redis-3.0.3.tar.gz</span></div><div class="line">tar xvf redis-3.0.3.tar.gz</div><div class="line">cd redis-3.0.3/</div><div class="line">make </div><div class="line">make  install</div><div class="line"><span class="comment">#会在/usr/local/bin/下边生成相应的bin文件</span></div><div class="line">cp redis.conf /etc/redis/</div><div class="line"><span class="comment">#修改redis.conf文件，对应/etc/init.d/redis-server中进行修改</span></div><div class="line">daemonize yes  <span class="comment">#使redis可以后台运行</span></div><div class="line">pidfile /var/run/redis/redis-server.pid</div><div class="line">bind <span class="number">127.0</span>.<span class="number">0.1</span></div><div class="line">logfile /var/log/redis/redis-server.log</div><div class="line">dir /var/<span class="class"><span class="keyword">lib</span>/<span class="title">redis</span></span></div></pre></td></tr></table></figure>
<p><strong>注</strong>：升级后，因为redis的bin文件更换了地方，要修改/home/git/gitlab-shell/config.yml为：<code>bin: &quot;/usr/local/bin/redis-cli&quot;</code>。</p>
<h4 id="备份并停止服务"><a href="#备份并停止服务" class="headerlink" title="备份并停止服务"></a>备份并停止服务</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd <span class="regexp">/home/</span>git/gitlab</div><div class="line">sudo -u git -H bundle exec rake <span class="string">gitlab:</span><span class="string">backup:</span>create RAILS_ENV=production</div><div class="line"><span class="regexp">/etc/</span>init.d/gitlab stop</div></pre></td></tr></table></figure>
<h4 id="下载最新的稳定版的代码"><a href="#下载最新的稳定版的代码" class="headerlink" title="下载最新的稳定版的代码"></a>下载最新的稳定版的代码</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo -u git -H git fetch --all</div><div class="line">sudo -u git -H git checkout v7<span class="number">.9</span><span class="number">.3</span></div><div class="line">``` </div><div class="line"></div><div class="line">LATEST_TAG为想要升级到的版本号，国内的网络fetch的时候可能会有问题，需要连接vpn。</div><div class="line"></div><div class="line">#### 更新最新的gitlab-shell版本 ####</div></pre></td></tr></table></figure>
<p>cd /home/git/gitlab-shell<br>sudo -u git -H git fetch<br>sudo -u git -H git checkout v<code>cat /home/git/gitlab/GITLAB_SHELL_VERSION</code><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### Install libs, migrations, etc. ####</div><div class="line">断开VPN连接，并且**修改ruby源来提高速度和成功率**。</div><div class="line"></div><div class="line">&gt; 注意：下边的bundle install命令使用的默认源是`https:<span class="comment">//rubygems.org/`，国内很慢，可以更换成淘宝的源，更改方法为:</span></div><div class="line">vim /home/git/gitlab/Gemfile 修改 其中的`source <span class="string">"https://rubygems.org"</span>` 为`source <span class="string">"https://ruby.taobao.org"</span>`</div></pre></td></tr></table></figure></p>
<p>cd /home/git/gitlab</p>
<p>#PostgreSQL<br>sudo -u git -H bundle install –without development test mysql –deployment</p>
<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>sudo -u git -H bundle install –without development test postgres –deployment</p>
<p>sudo -u git -H bundle exec rake db:migrate RAILS_ENV=production<br>sudo -u git -H bundle exec rake assets:clean RAILS_ENV=production<br>sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production<br>sudo -u git -H bundle exec rake cache:clear RAILS_ENV=production<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#### 开启服务 ####</div></pre></td></tr></table></figure></p>
<p>sudo service gitlab start<br>sudo service nginx restart<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#### 检测升级是否成功 ####</div><div class="line"></div><div class="line">- 检测环境</div></pre></td></tr></table></figure></p>
<p>sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>检测项目</div></pre></td></tr></table></figure></p>
<p>sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 从<span class="number">7.9</span>升级到<span class="number">7.13</span>版本 ###  </div><div class="line">#### 备份 ####</div></pre></td></tr></table></figure></p>
<p>sudo service gitlab stop<br>cd /home/git/gitlab<br>sudo -u git -H bundle exec rake gitlab:backup:create RAILS_ENV=production<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 更新gitlab ####</div></pre></td></tr></table></figure></p>
<p>sudo -u git -H git fetch –all<br>sudo -u git -H git checkout – db/schema.rb # local changes will be restored automatically<br>sudo -u git -H git checkout 7-13-stable<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#### 更新gitlab-shell ####</div></pre></td></tr></table></figure></p>
<p>cd /home/git/gitlab-shell<br>sudo -u git -H git fetch<br>sudo -u git -H git checkout v2.6.3<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">### Install libs, migrations, etc ###</div><div class="line">注：更换/home/git/gitlab/Gemfile中的ruby源</div></pre></td></tr></table></figure></p>
<p>cd /home/git/gitlab</p>
<h1 id="MySQL-installations-note-the-line-below-states-‘–without-…-postgres’"><a href="#MySQL-installations-note-the-line-below-states-‘–without-…-postgres’" class="headerlink" title="MySQL installations (note: the line below states ‘–without … postgres’)"></a>MySQL installations (note: the line below states ‘–without … postgres’)</h1><p>sudo -u git -H bundle install –without development test postgres –deployment</p>
<h1 id="PostgreSQL-installations-note-the-line-below-states-‘–without-…-mysql’"><a href="#PostgreSQL-installations-note-the-line-below-states-‘–without-…-mysql’" class="headerlink" title="PostgreSQL installations (note: the line below states ‘–without … mysql’)"></a>PostgreSQL installations (note: the line below states ‘–without … mysql’)</h1><p>sudo -u git -H bundle install –without development test mysql –deployment</p>
<h1 id="Run-database-migrations"><a href="#Run-database-migrations" class="headerlink" title="Run database migrations"></a>Run database migrations</h1><p>sudo -u git -H bundle exec rake db:migrate RAILS_ENV=production</p>
<h1 id="Clean-up-assets-and-cache"><a href="#Clean-up-assets-and-cache" class="headerlink" title="Clean up assets and cache"></a>Clean up assets and cache</h1><p>sudo -u git -H bundle exec rake assets:clean assets:precompile cache:clear RAILS_ENV=production</p>
<h1 id="Update-init-d-script"><a href="#Update-init-d-script" class="headerlink" title="Update init.d script"></a>Update init.d script</h1><p>sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 更新配置文件 ####</div><div class="line">因为配置文件中ldap的语法是不同的，所以将老gitlab.yml备份，用gitlab.yml.example替换他，并更改其中必要的配置。 ldap部分的配置如下：</div></pre></td></tr></table></figure></p>
<p>ldap:<br>    enabled: true<br>    servers:</p>
<pre><code>##########################################################################
#
# Since GitLab 7.4, LDAP servers get ID&apos;s (below the ID is &apos;main&apos;). GitLab
# Enterprise Edition now supports connecting to multiple LDAP servers.
#
# If you are updating from the old (pre-7.4) syntax, you MUST give your
# old server the ID &apos;main&apos;.
#
##########################################################################
main: # &apos;main&apos; is the GitLab &apos;provider ID&apos; of this LDAP server
  label: &apos;LDAP&apos;
  host: &apos;ldap-url/IP&apos;
  port: 389
  uid: &apos;uid&apos;
  method: &apos;plain&apos; # &quot;tls&quot; or &quot;ssl&quot; or &quot;plain&quot;
  bind_dn: &apos;cn=admin,dc=****,dc=com&apos;
  password: &apos;admin-passwd&apos;
  active_directory: true
  block_auto_created_users: true
  base: &apos;dc=****,dc=com&apos;
  user_filter: &apos;&apos;
</code></pre><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 启动服务 ####</div></pre></td></tr></table></figure>
<p>sudo service gitlab start<br>sudo service nginx restart<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#### 检查状态 ####</div></pre></td></tr></table></figure></p>
<p>sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production<br>sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#### 修复 ####</div><div class="line">根据上边检查的结果进行修复</div></pre></td></tr></table></figure></p>
<p>sudo -u git -H bundle exec rake gitlab:satellites:create RAILS_ENV=production<br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gitlab、GitLab-CI Runner、karma安装记录]]></title>
      <url>http://yoursite.com/2016/12/15/Gitlab-GitLab-CI-Runner-karma%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>##Gitlab的安装</p>
<p>使用源码安装，安装方法参照官方文档：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span>docs.gitlab.com<span class="regexp">/ce/i</span>nstall<span class="regexp">/README.html</span></div></pre></td></tr></table></figure>
<p>##GitLab-CI Runner安装</p>
<p>Gitlab-CI Server在Gitlab 8版本以上就集成在gitlab中，不需要单独安装，Runner可以参照官方安装文档：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//gi</span>tlab.com<span class="regexp">/gitlab-org/gi</span>tlab-ci-multi-runner</div></pre></td></tr></table></figure>
<p>本次安装使用如下方法：</p>
<ul>
<li>安装依赖包</li>
</ul>
<figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">apt-<span class="built_in">get</span> install -y wget curl gcc libxml2-<span class="built_in">dev</span> libxslt-<span class="built_in">dev</span> \</div><div class="line">libcurl4-openssl-<span class="built_in">dev</span> libreadline6-<span class="built_in">dev</span> libc6-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span> make \</div><div class="line">build-essential zlib1g-<span class="built_in">dev</span> openssh-server git-core libyaml-<span class="built_in">dev</span> \</div><div class="line">libpq-<span class="built_in">dev</span> libicu-<span class="built_in">dev</span> sudo</div></pre></td></tr></table></figure>
<ul>
<li>安装ruby</li>
</ul>
<p>此次gitlab-ci runner和gitlab安装在同一台服务器，ruby已经安装，过程忽略。<br>安装好ruby可以将源改为国内的淘宝的镜像，如下：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gem <span class="keyword">source</span> -r http<span class="variable">s:</span>//rubygems.org/</div><div class="line">gem <span class="keyword">source</span> -<span class="keyword">a</span> http<span class="variable">s:</span>//<span class="keyword">ruby</span>.taobao.org/</div></pre></td></tr></table></figure>
<ul>
<li>安装Gitlab-CI Runner</li>
</ul>
<p>(1) 安装ruby bundler</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem <span class="keyword">install</span> bundler</div></pre></td></tr></table></figure>
<p>(2) 建立用于安装 GitLab-CI Runner 的系统用户：</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">sudo </span><span class="string">adduser </span><span class="built_in">--disabled-login</span> <span class="built_in">--gecos</span> <span class="string">'GitLab CI Runner'</span> <span class="string">gitlab_ci_runner</span></div></pre></td></tr></table></figure>
<p>(3) 获取GitLab-CI Runner 源代码：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">su</span> gitlab_ci_runner</div><div class="line"><span class="keyword">cd</span> ~/</div><div class="line">git clone https:<span class="comment">//gitlab.com/gitlab-org/gitlab-ci-runner.git</span></div><div class="line"><span class="keyword">cd</span> gitlab-<span class="keyword">ci</span>-runner</div></pre></td></tr></table></figure>
<p>(4) 修改Gem源的镜像改为淘宝镜像：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">vim</span> Gemfile</div><div class="line">改为：</div><div class="line"><span class="keyword">source</span> <span class="string">"https://ruby.taobao.org/"</span></div></pre></td></tr></table></figure>
<p>(5) 配置完成后安装 Gitlab-CI Runner 的 Gem 包，换回root用户</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /home/gitlab_ci_runner/gitlab-<span class="keyword">ci</span>-runner</div><div class="line">bundle install</div></pre></td></tr></table></figure>
<p>(6) 修改hosts文件，填入gitlab服务器和GitLab-CI 服务器域名对应的 IP</p>
<p>(7) 在gitlab服务器上找到ci的token和url</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">su</span> gitlab_ci_runner</div><div class="line"><span class="keyword">cd</span> ~/gitlab-<span class="keyword">ci</span>-runner</div><div class="line">CI_SERVER_URL=https:<span class="comment">//git.zhai.me/ci REGISTRATION_TOKEN=replaceme bundle exec ./bin/setup</span></div></pre></td></tr></table></figure>
<p>(8) 尝试用 SSH 方式访问 GitLab 服务器，并将服务器的 ssh key 添加到已知主机列表</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">git</span>@<span class="keyword">git</span>.<span class="keyword">zhai</span>.<span class="keyword">me</span></div></pre></td></tr></table></figure>
<p>(9) 复制 GitLab-CI Runner 的自动启动脚本到系统目录</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /home/gitlab_ci_runner/gitlab-ci-runner</div><div class="line">sudo cp ./<span class="class"><span class="keyword">lib</span>/<span class="title">support</span>/<span class="title">init</span>.<span class="title">d</span>/<span class="title">gitlab_ci_runner</span> /<span class="title">etc</span>/<span class="title">init</span>.<span class="title">d</span>/<span class="title">gitlab</span>-<span class="title">ci</span>-<span class="title">runner</span></span></div><div class="line">sudo chmod +x /etc/init.d/gitlab-ci-runner</div><div class="line">sudo update-rc.d gitlab-ci-runner defaults <span class="number">21</span></div></pre></td></tr></table></figure>
<p>(10) 启动GitLab-CI Runner</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service gitlab-ci-runner <span class="literal">start</span></div></pre></td></tr></table></figure>
<p>(11) 到gitlab中去验证。</p>
<h2 id="配合karma进行工程自动化测试"><a href="#配合karma进行工程自动化测试" class="headerlink" title="配合karma进行工程自动化测试"></a>配合karma进行工程自动化测试</h2><p>karma要配合浏览器使用，（chrome、chromium-browser或者firefox），这边使用firefox，因为chrome、chromium-browser没装成功。。</p>
<h3 id="安装vnc和图形化界面"><a href="#安装vnc和图形化界面" class="headerlink" title="安装vnc和图形化界面"></a>安装vnc和图形化界面</h3><p>安装桌面图形化的一些软件包</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="keyword">get</span> install x-<span class="built_in">window</span>-system-core gdm ubuntu-desktop gnome-core xfce4</div></pre></td></tr></table></figure>
<p>安装浏览器和vnc</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install vnc4server firefox</div></pre></td></tr></table></figure>
<p>因为gitlab使用git用户，所以切换到git用户并使用开启vnc</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">su</span> - git</div><div class="line">vncserver :<span class="number">1</span></div><div class="line"><span class="comment">#第一次使用可能要设置密码</span></div></pre></td></tr></table></figure>
<p>我们在客户端打开vnc viewer，连接该服务器。可能发现只有命令行，没有图形化界面，进行如下操作：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">vim /home/git/.vnc/xstartup</div><div class="line">改为：</div><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line"><span class="comment"># Uncomment the following two lines for normal desktop:</span></div><div class="line"><span class="comment"># unset SESSION_MANAGER</span></div><div class="line"><span class="comment"># exec /etc/X11/xinit/xinitrc</span></div><div class="line"></div><div class="line">[ -x /etc/vnc/xstartup ] &amp;&amp; <span class="built_in">exec</span> /etc/vnc/xstartup</div><div class="line">[ -r <span class="variable">$HOME</span>/.Xresources ] &amp;&amp; xrdb <span class="variable">$HOME</span>/.Xresources</div><div class="line">xsetroot -solid grey</div><div class="line">vncconfig -iconic &amp;</div><div class="line">x-terminal-emulator -geometry 80x24+10+10 -ls -title <span class="string">"<span class="variable">$VNCDESKTOP</span> Desktop"</span> &amp;</div><div class="line"><span class="comment">#x-window-manager &amp;</span></div><div class="line">gnome-session &amp;</div></pre></td></tr></table></figure>
<p>重启vncserve，并重新连接。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">su</span> <span class="selector-tag">-</span> <span class="selector-tag">git</span></div><div class="line"><span class="selector-tag">vncserver</span> <span class="selector-tag">-kill</span><span class="selector-pseudo">:1</span></div><div class="line"><span class="selector-tag">vncserver</span> <span class="selector-pseudo">:1</span></div></pre></td></tr></table></figure>
<p>在服务器上运行firfox，或者在vnc图形化界面中打开firefox，没有报错，则正常。但是我发现肯定会报错。。。报错信息如下：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@git:~# firefox</div><div class="line"><span class="keyword">Error: </span>cannot open display: :0</div></pre></td></tr></table></figure>
<p><strong>这个坑是因为一个叫DISPLAY的变量，坑了好久。。解决办法如下：</strong></p>
<p>如果我们在git用户上使用vncserver :1来开启vnc，则在git用户中要设置变量DISPLAY为:1，如果使用vncserver :2来开启vnc，则在git用户中要设置变量DISPLAY为:2，如下：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim /<span class="built_in">home</span>/git/.bashrc</div><div class="line">写入：</div><div class="line"><span class="keyword">export</span> DISPLAY=:<span class="number">1</span></div><div class="line"></div><div class="line">source /<span class="built_in">home</span>/git/.bashrc</div></pre></td></tr></table></figure>
<p>重启vncserver，然后进行测试，之后在gitlab中的runner中进行测试。</p>
<h2 id="问题小记"><a href="#问题小记" class="headerlink" title="问题小记"></a>问题小记</h2><p>1、公司项目编译的时候使用npm，建议改为cnpm或者更改为淘宝的源。</p>
<p>2、如下报错，因为node 4以上版本升级为v8引擎，编译时需要gcc4.8以上版本，而系统默认安装gcc4.6。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This <span class="keyword">version</span> of <span class="keyword">node</span><span class="title">/NAN</span>/v8 requires a C++<span class="number">11</span> compiler</div></pre></td></tr></table></figure>
<p>升级gcc和g++，方法：</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">首先添加ppa到库：</div><div class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:ubuntu-toolchain-r/test</div><div class="line">sudo apt-get update</div><div class="line">安装高版本gcc、g++</div><div class="line">sudo apt-get install gcc-5 g++-5</div><div class="line">验证(可能需要改一下软连接)</div><div class="line">gcc -v</div><div class="line">g++ -v</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gitlab迁移小记]]></title>
      <url>http://yoursite.com/2016/12/15/Gitlab%E8%BF%81%E7%A7%BB%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>情况一：A机器和B机器 使用Omnibus package（rpm）安装，且版本相同</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">备份：</div><div class="line">gitlab-rake gitlab:<span class="keyword">backup</span>:<span class="keyword">create</span></div><div class="line"></div><div class="line">恢复：</div><div class="line"># 停止相关数据连接服务</div><div class="line">gitlab-ctl <span class="keyword">stop</span> unicorn</div><div class="line">gitlab-ctl <span class="keyword">stop</span> sidekiq</div><div class="line"></div><div class="line"># 从<span class="keyword">Timestamp</span>编号备份中恢复</div><div class="line">gitlab-rake gitlab:<span class="keyword">backup</span>:<span class="keyword">restore</span> <span class="keyword">BACKUP</span>= <span class="keyword">Timestamp</span></div><div class="line"></div><div class="line"># 启动Gitlab</div><div class="line">sudo gitlab-ctl <span class="keyword">start</span></div></pre></td></tr></table></figure>
<p>情况二：使用源码安装，且版本相同</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">全量备份：</div><div class="line">sudo -u git -H bundle exec rake gitlab:<span class="keyword">backup</span>:<span class="keyword">create</span> RAILS_ENV=production</div><div class="line"></div><div class="line">恢复：</div><div class="line">sudo -u git -H bundle exec rake gitlab:<span class="keyword">backup</span>:<span class="keyword">restore</span> RAILS_ENV=production <span class="keyword">BACKUP</span>=<span class="keyword">Timestamp</span></div></pre></td></tr></table></figure>
<p>情况三：使用源码安装，版本不完全相同</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">备份：打包<span class="regexp">/home/</span>git<span class="regexp">/repositories、备份pgsql或者mysql数据（如果版本一样，可以直接打包数据目录）、/</span>home<span class="regexp">/git/</span>.ssh/authorized_keys.</div><div class="line"></div><div class="line">恢复：</div><div class="line"><span class="number">1</span>、 将上边备份的文件放到指定位置</div><div class="line"><span class="number">2</span>、 bundle exec rake <span class="string">gitlab:</span><span class="string">import:</span>repos RAILS_ENV=production</div><div class="line"></div><div class="line">检测：</div><div class="line">sudo -u git -H bundle exec rake <span class="string">gitlab:</span><span class="string">env:</span>info RAILS_ENV=production（环境检测）</div><div class="line">sudo -u git -H bundle exec rake <span class="string">gitlab:</span>check RAILS_ENV=production（项目检测）</div><div class="line"></div><div class="line">根据检测结果提示修复不正确的地方</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ELK + filebeat 日志分析工具的部署和简单应用]]></title>
      <url>http://yoursite.com/2016/12/15/ELK%E5%92%8Cfilebeat%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>参考文章：<a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/opensource/os-cn-elk/</a></p>
</blockquote>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">环境： </div><div class="line">	-<span class="ruby"> 两台 CentOS <span class="number">6.5</span></span></div><div class="line">	-<span class="ruby"> elasticsearch-<span class="number">2.4</span>.<span class="number">1</span></span></div><div class="line">	-<span class="ruby"> kibana-<span class="number">4.6</span>.<span class="number">1</span></span></div><div class="line">	-<span class="ruby"> logstash-<span class="number">2.4</span>.<span class="number">0</span></span></div><div class="line">	-<span class="ruby"> filebeat-<span class="number">1.3</span>.<span class="number">1</span></span></div><div class="line">过程：</div><div class="line">	-<span class="ruby"> 安装 JDK</span></div><div class="line">	-<span class="ruby"> 安装 Elasticsearch</span></div><div class="line">	-<span class="ruby"> 安装 Kibana</span></div><div class="line">	-<span class="ruby"> 安装 Nginx</span></div><div class="line">	-<span class="ruby"> 安装 Logstash</span></div><div class="line">	-<span class="ruby"> 配置 Logstash</span></div><div class="line">	-<span class="ruby"> 安装 filebeat</span></div><div class="line">	-<span class="ruby"> 访问</span></div></pre></td></tr></table></figure>
<hr>
<p>ELK 服务器中：</p>
<h3 id="安装-Java-环境"><a href="#安装-Java-环境" class="headerlink" title="安装 Java 环境"></a>安装 Java 环境</h3><ul>
<li><p><code>https://www.java.com/zh_CN/download/manual.jsp</code>中下载<code>java</code>安装包</p>
</li>
<li><p>解压到<code>/usr/local/jdk</code> 目录下</p>
</li>
<li><p>在<code>/etc/profile</code>文件中追加：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk</div><div class="line"><span class="built_in">export</span> CLASS_PATH=<span class="variable">$JAVA_HOME</span>/lib</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<ul>
<li>使设置的环境变量生效。 <code>source /etc/profile</code></li>
</ul>
<h3 id="安装-Elasticsearch"><a href="#安装-Elasticsearch" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h3><ul>
<li><p>在<code>https://www.elastic.co/downloads</code>中下载<code>Elasticsearch</code>的安装包。</p>
</li>
<li><p>解压，并移动到<code>/usr/local/elasticsearch</code>目录下。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar xvf elasticsearch-2.4.1.zip</div><div class="line">$ mv  elasticsearch-2.4.1  /usr/<span class="built_in">local</span>/elasticsearch</div></pre></td></tr></table></figure>
<ul>
<li>修改<code>/usr/local/elasticsearch/config/elasticsearch.yml</code>，来更改监听端口，监听<code>127.0.0.1</code>，提高安全性。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 如下更改</div><div class="line"><span class="selector-tag">network</span><span class="selector-class">.host</span>: 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure>
<ul>
<li>启动（会有报错）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch/</div><div class="line">$ bash bin/elasticsearch <span class="_">-d</span></div><div class="line"><span class="comment"># 会有报错，信息如下：</span></div><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.RuntimeException: don<span class="string">'t run elasticsearch as root.</span></div></pre></td></tr></table></figure>
<p><code>-d</code>是让<code>es</code>保持后台运行。<br>报错信息提示我们<code>es</code>无法用<code>root</code>用户启动，所以可以创建<code>elk</code>用户，来启动<code>es</code></p>
<h3 id="安装-kibana"><a href="#安装-kibana" class="headerlink" title="安装 kibana"></a>安装 kibana</h3><ul>
<li><p>在<code>https://www.elastic.co/downloads</code>中下载<code>kibana</code>的安装包。</p>
</li>
<li><p>解压，并移动到<code>/usr/local/kibana</code>目录下。</p>
</li>
<li><p>修改<code>/usr/local/kibana/config/kibana.yml</code>，来更改监听端口，监听<code>127.0.0.1</code></p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 修改如下</div><div class="line"><span class="selector-tag">server</span><span class="selector-class">.host</span>: "127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>"</div></pre></td></tr></table></figure>
<ul>
<li>启动，观察<code>/usr/local/kibana/nohup.out</code>是否有报错信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/kibana</div><div class="line">$ nohup bin/kibana &amp;</div></pre></td></tr></table></figure>
<h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><ul>
<li>直接<code>yum</code>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install nginx</div></pre></td></tr></table></figure>
<ul>
<li>修改<code>/etc/nginx/conf.d/default.conf</code>文件，如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       <span class="number">80</span>;</div><div class="line">    server_name  _;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5601</span>/;</div><div class="line">        proxy_set_header Upgrade $http_upgrade;</div><div class="line">        proxy_set_header Connection <span class="string">'upgrade'</span>;</div><div class="line">        proxy_set_header Host $host;</div><div class="line">        proxy_cache_bypass $http_upgrade;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    error_page <span class="number">404</span> /<span class="number">404.</span>html;</div><div class="line">        location = /<span class="number">40</span>x.html &#123;</div><div class="line">    &#125;</div><div class="line">    error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /<span class="number">50</span>x.html;</div><div class="line">        location = /<span class="number">50</span>x.html &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>启动<code>nginx</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 测试配置是否正常</span></div><div class="line">$ nginx -t</div><div class="line"><span class="comment"># 启动</span></div><div class="line">$ /etc/init.d/nginx start</div></pre></td></tr></table></figure>
<h3 id="安装-Logstash"><a href="#安装-Logstash" class="headerlink" title="安装 Logstash"></a>安装 Logstash</h3><ul>
<li><p>在<code>https://www.elastic.co/downloads</code>中下载<code>Logstash</code>的安装包。</p>
</li>
<li><p>解压，并移动到<code>/usr/local/logstash</code>目录下。</p>
</li>
<li><p>验证服务可用性</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/logstash</div><div class="line">$ bin/logstash <span class="_">-e</span> <span class="string">'input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;'</span></div><div class="line">Settings: Default pipeline workers: 2</div><div class="line">Pipeline main started</div><div class="line"><span class="comment"># 任意输入，看输出是否正常，如下：</span></div><div class="line">hello</div><div class="line">2016-10-13T10:07:01.502Z satezheng hello</div><div class="line"><span class="comment"># CTRL-D 退出</span></div></pre></td></tr></table></figure>
<h3 id="配置-Logstash"><a href="#配置-Logstash" class="headerlink" title="配置 Logstash"></a>配置 Logstash</h3><p>我们需要配置 <code>Logstash</code> 以指明从哪里读取数据，向哪里输出数据。这个过程我们称之为定义 <code>Logstash</code> 管道（<code>Logstash Pipeline</code>）。<br>通常一个管道需要包括必须的输入（<code>input</code>），输出（<code>output</code>），和一个可选项目 <code>Filter</code></p>
<h5 id="配置-ssl"><a href="#配置-ssl" class="headerlink" title="配置 ssl"></a>配置 ssl</h5><p>客户端和服务器之间通信使用<code>ssl</code>来认证身份，更加安全。</p>
<ul>
<li>修改<code>/etc/pki/tls/openssl.cnf</code>文件</li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 找到 [v3_ca] 段，添加下面一行，保存退出。</span></div><div class="line"><span class="attr">subjectAltName</span> = IP: logstash_server_ip</div></pre></td></tr></table></figure>
<ul>
<li>生成<code>srt</code>文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /etc/pki/tls</div><div class="line">$ openssl req -config openssl.cnf -x509 -days 2650 -batch -nodes -newkey rsa:2048 -keyout private/logstash-forwarder.key -out certs/logstash-forwarder.crt</div></pre></td></tr></table></figure>
<ul>
<li>发送<code>srt</code>文件到客户端</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /etc/pki/tls</div><div class="line">$ scp certs/logstash-forwarder.crt 客户端IP:/etc/pki/tls/certs</div></pre></td></tr></table></figure>
<h5 id="配置-Logstash-管道文件"><a href="#配置-Logstash-管道文件" class="headerlink" title="配置 Logstash 管道文件"></a>配置 Logstash 管道文件</h5><ul>
<li>创建<code>filebeat-input.conf</code>文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ mkdir /usr/<span class="built_in">local</span>/logstash/conf</div><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/logstash/conf</div><div class="line">$ vim filebeat-input.conf</div><div class="line"><span class="comment"># 写入：</span></div><div class="line">input &#123;</div><div class="line">  beats &#123;</div><div class="line">    port =&gt; 5044</div><div class="line">        <span class="built_in">type</span> =&gt; <span class="string">"logs"</span></div><div class="line">        ssl =&gt; <span class="literal">true</span></div><div class="line">        ssl_certificate =&gt; <span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span></div><div class="line">        ssl_key =&gt; <span class="string">"/etc/pki/tls/private/logstash-forwarder.key"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建<code>filebeat-output.conf</code>文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ vim filebeat-input.conf</div><div class="line"><span class="comment"># 写入：</span></div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123; hosts =&gt; [<span class="string">"127.0.0.1:9200"</span>] &#125;</div><div class="line">  stdout &#123; codec =&gt; rubydebug &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/logstash</div><div class="line">$ nohup bin/logstash <span class="_">-f</span> conf/ &amp;</div></pre></td></tr></table></figure>
<h3 id="客户端安装-filebeat"><a href="#客户端安装-filebeat" class="headerlink" title="客户端安装 filebeat"></a>客户端安装 filebeat</h3><p><code>filebeat</code>代替之前的<code>ogstash-forwarder</code></p>
<ul>
<li><p>在<code>https://www.elastic.co/downloads/beats/filebeat</code>下载</p>
</li>
<li><p>解压并放到<code>/usr/local/filebeat</code>目录下</p>
</li>
<li><p>修改<code>filebeat.yml</code></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/filebeat</div><div class="line">$ vim filebeat.yml</div></pre></td></tr></table></figure>
<p>写入：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">filebea<span class="variable">t:</span></div><div class="line">  prospector<span class="variable">s:</span></div><div class="line">    -</div><div class="line">      path<span class="variable">s:</span></div><div class="line">        - /var/<span class="built_in">log</span>/*</div><div class="line">      input_type: <span class="built_in">log</span></div><div class="line">      document_type: <span class="built_in">log</span></div><div class="line">  registry_file: /var/lib/filebeat/registry</div><div class="line"></div><div class="line">outpu<span class="variable">t:</span></div><div class="line">  logstash:</div><div class="line">    host<span class="variable">s:</span> [<span class="string">"服务端IP:5044"</span>]</div><div class="line">    <span class="keyword">tl</span><span class="variable">s:</span></div><div class="line">      certificate_authoritie<span class="variable">s:</span> [<span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span>]</div><div class="line"></div><div class="line">shipper:</div><div class="line"></div><div class="line">loggin<span class="variable">g:</span></div><div class="line">  <span class="keyword">file</span><span class="variable">s:</span></div><div class="line">    rotateeverybyte<span class="variable">s:</span> <span class="number">10485760</span> # = <span class="number">10</span>MB</div></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/filebeat</div><div class="line">$ nohup ./filebeat <span class="_">-e</span> -c filebeat.yml &amp;</div></pre></td></tr></table></figure>
<h3 id="访问服务端IP来验证是否成功，有问题可以根据输出日志来解决。"><a href="#访问服务端IP来验证是否成功，有问题可以根据输出日志来解决。" class="headerlink" title="访问服务端IP来验证是否成功，有问题可以根据输出日志来解决。"></a>访问服务端IP来验证是否成功，有问题可以根据输出日志来解决。</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker基本命令]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><strong>docker version</strong> ：查看docker的版本号，包括客户端、服务端、依赖的Go等</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]# docker <span class="keyword">version</span></div><div class="line">Client:</div><div class="line"> <span class="keyword">Version</span>:      1.8.2-el7.centos</div><div class="line"> API <span class="keyword">version</span>:  1.20</div><div class="line"> Package <span class="keyword">Version</span>: docker-1.8.2-10.el7.centos.x86_64</div><div class="line"> Go <span class="keyword">version</span>:   go1.4.2</div><div class="line"> Git commit:   a01dc02/1.8.2</div><div class="line"> Built:        </div><div class="line"> OS/<span class="keyword">Arch</span>:      linux/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> <span class="keyword">Version</span>:      1.8.2-el7.centos</div><div class="line"> API <span class="keyword">version</span>:  1.20</div><div class="line"> Package <span class="keyword">Version</span>: </div><div class="line"> Go <span class="keyword">version</span>:   go1.4.2</div><div class="line"> Git commit:   a01dc02/1.8.2</div><div class="line"> Built:        </div><div class="line"> OS/<span class="keyword">Arch</span>:      linux/amd64</div></pre></td></tr></table></figure>
<p><strong>docker info</strong>:查看系统(docker)层面信息，包括管理的images, containers数等</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker info</span></div><div class="line"><span class="symbol">Containers:</span> <span class="number">1</span></div><div class="line"><span class="symbol">Images:</span> <span class="number">4</span></div><div class="line">Storage <span class="symbol">Driver:</span> devicemapper</div><div class="line"> Pool <span class="symbol">Name:</span> docker-<span class="number">8</span>:<span class="number">3</span>-<span class="number">36786088</span>-pool</div><div class="line"> Pool <span class="symbol">Blocksize:</span> <span class="number">65.54</span> kB</div><div class="line"> Backing <span class="symbol">Filesystem:</span> xfs</div><div class="line"> Data <span class="symbol">file:</span> /dev/loop0</div><div class="line"> Metadata <span class="symbol">file:</span> /dev/loop1</div><div class="line"> Data Space <span class="symbol">Used:</span> <span class="number">2.059</span> GB</div><div class="line"> Data Space <span class="symbol">Total:</span> <span class="number">107.4</span> GB</div><div class="line"> Data Space <span class="symbol">Available:</span> <span class="number">12.93</span> GB</div><div class="line"> Metadata Space <span class="symbol">Used:</span> <span class="number">1.765</span> MB</div><div class="line"> Metadata Space <span class="symbol">Total:</span> <span class="number">2.147</span> GB</div><div class="line"> Metadata Space <span class="symbol">Available:</span> <span class="number">2.146</span> GB</div><div class="line"> Udev Sync <span class="symbol">Supported:</span> <span class="literal">true</span></div><div class="line"> Deferred Removal <span class="symbol">Enabled:</span> <span class="literal">false</span></div><div class="line"> Data loop <span class="symbol">file:</span> /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">devicemapper</span>/<span class="title">devicemapper</span>/<span class="title">data</span></span></div><div class="line"> Metadata loop <span class="symbol">file:</span> /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">devicemapper</span>/<span class="title">devicemapper</span>/<span class="title">metadata</span></span></div><div class="line"> Library <span class="symbol">Version:</span> <span class="number">1.02</span>.<span class="number">107</span>-RHEL7 (<span class="number">2015</span>-<span class="number">10</span>-<span class="number">14</span>)</div><div class="line">Execution <span class="symbol">Driver:</span> native-<span class="number">0.2</span></div><div class="line">Logging <span class="symbol">Driver:</span> json-file</div><div class="line">Kernel <span class="symbol">Version:</span> <span class="number">3.10</span>.<span class="number">0</span>-<span class="number">327</span>.el7.x86_64</div><div class="line">Operating <span class="symbol">System:</span> CentOS Linux <span class="number">7</span> (Core)</div><div class="line"><span class="symbol">CPUs:</span> <span class="number">1</span></div><div class="line">Total <span class="symbol">Memory:</span> <span class="number">977.9</span> MiB</div><div class="line"><span class="symbol">Name:</span> centos7</div><div class="line"><span class="symbol">ID:</span> <span class="symbol">BUKD:</span><span class="symbol">MUW2:</span><span class="number">5</span><span class="symbol">X2D:</span><span class="symbol">G7BF:</span><span class="number">6</span><span class="symbol">Y7G:</span><span class="symbol">SKIH:</span><span class="symbol">LD6K:</span><span class="symbol">VUAC:</span><span class="number">3</span><span class="symbol">QA4:</span><span class="symbol">JY5C:</span><span class="symbol">S3DG:</span>LFT2</div><div class="line"><span class="symbol">WARNING:</span> bridge-nf-call-iptables is disabled</div><div class="line"><span class="symbol">WARNING:</span> bridge-nf-call-ip6tables is disabled</div></pre></td></tr></table></figure>
<p><strong>search 搜索镜像</strong>：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]# docker search ubuntu12<span class="number">.10</span></div><div class="line">INDEX       NAME                                  DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</div><div class="line">docker.io   docker.io/chug/ubuntu12<span class="number">.10</span>x32         Ubuntu Quantal Quetzal <span class="number">12.10</span> <span class="number">32</span>bit  base i...   <span class="number">0</span>                    </div><div class="line">docker.io   docker.io/chug/ubuntu12<span class="number">.10</span>x64         Ubuntu Quantal Quetzal <span class="number">12.10</span> <span class="number">64</span>bit  base i...   <span class="number">0</span>                    </div><div class="line">docker.io   docker.io/marcgibbons/ubuntu12<span class="number">.10</span>                                                     <span class="number">0</span>                    </div><div class="line">docker.io   docker.io/mirolin/ubuntu12<span class="number">.10</span>                                                         <span class="number">0</span>                    </div><div class="line">docker.io   docker.io/mirolin/ubuntu12<span class="number">.10</span>_redis                                                   <span class="number">0</span></div></pre></td></tr></table></figure>
<p><strong>pull 下载镜像</strong>：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker pull ubuntu</span></div></pre></td></tr></table></figure>
<p><strong>run 使用镜像创建容器</strong>：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker run ubuntu /bin/echo hello world</span></div></pre></td></tr></table></figure>
<p><strong>run 创建容器，并交互式的运行</strong>：<br>这里会创建一个新的容器。</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker run -i -t ubuntu /bin/bash</span></div><div class="line">root@c43c7d102baa:/<span class="comment"># cat /etc/issue</span></div><div class="line">Ubuntu <span class="number">14.04</span>.<span class="number">3</span> LTS <span class="string">\n</span> <span class="string">\l</span></div><div class="line"><span class="comment"># -t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开</span></div></pre></td></tr></table></figure>
<p>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
<p><strong>run -d 守护态运行</strong>：<br>更多的时候，需要让 Docker 容器在后台以守护态（Daemonized）形式运行。此时，可以通过添加 -d 参数来实现。<br>例如下面的命令会在后台运行容器。</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker run -d ubuntu /bin/bash -c <span class="string">"while true;do echo hello world;sleep 1;done"</span></span></div></pre></td></tr></table></figure>
<p><strong>logs 查看容器的运行</strong>：</p>
<p>以上个例子为前导。<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker logs 4f34f95b6abc</span></div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div></pre></td></tr></table></figure></p>
<p><strong>ps 查看容器</strong>：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]# docker ps -h</div><div class="line"></div><div class="line">Usage:	docker ps [OPTIONS]</div><div class="line"></div><div class="line">List containers</div><div class="line"></div><div class="line">  -<span class="ruby">a, --all=<span class="literal">false</span>       Show all containers (default shows just running)</span></div><div class="line">  -<span class="ruby">-before=             Show only container created before Id <span class="keyword">or</span> Name</span></div><div class="line">  -<span class="ruby">f, --filter=[]       Filter output based on conditions provided</span></div><div class="line">  -<span class="ruby">-format=             Pretty-print containers using a Go template</span></div><div class="line">  -<span class="ruby">-help=<span class="literal">false</span>          Print usage</span></div><div class="line">  -<span class="ruby">l, --latest=<span class="literal">false</span>    Show the latest created container, <span class="keyword">include</span> non-running</span></div><div class="line">  -<span class="ruby">n=-<span class="number">1</span>                 Show n last created containers, <span class="keyword">include</span> non-running</span></div><div class="line">  -<span class="ruby">-no-trunc=<span class="literal">false</span>      Don<span class="string">'t truncate output</span></span></div><div class="line">  -<span class="ruby"><span class="string">q, --quiet=false     Only </span></span></div><div class="line"> numeric IDs</div><div class="line">  -<span class="ruby"><span class="string">s, --size=false      Display total file sizes</span></span></div><div class="line">  -<span class="ruby"><span class="string">-since=              Show created since Id or Name, include non-running</span></span></div></pre></td></tr></table></figure>
<p><strong>attach 连接已经启动的容器 / start -i 启动并连接容器</strong>：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker ps -a  #查看容器ID</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker start &lt;CONTAINER ID&gt;	#启动容器</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker attach &lt;CONTAINER ID&gt;	#连接容器，该容器必须是启动状态</span></div><div class="line">或者</div><div class="line">[root@centos7 ~]<span class="comment"># docker start -i &lt;CONTAINER ID&gt;		#启动并连接容器</span></div></pre></td></tr></table></figure>
<p><strong>注</strong>：但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。</p>
<p><strong>commit 将容器的状态保存为镜像</strong>：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker commit c43c7d102baa ubhttp</span></div><div class="line">d47bbf8e50bace073de2b256b0360cfab029c11881f0d361fce7ae7464aa40ff</div><div class="line">[root@centos7 ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             VIRTUAL SIZE</div><div class="line">ubhttp              latest              d47bbf8e50ba        <span class="number">54</span> seconds ago      <span class="number">248</span> MB</div><div class="line">docker.io/ubuntu    latest              <span class="number">8693</span>db7e8a00        <span class="number">7</span> days ago          <span class="number">187.9</span> MB</div><div class="line"><span class="comment">## 更为标准点的如下：</span></div><div class="line">$ sudo docker commit -m <span class="string">"Added json gem"</span> -a <span class="string">"Docker Newbee"</span> <span class="number">0</span>b2616b0e5a8 ouruser/sinatra:v2</div><div class="line">其中，-m 来指定提交的说明信息，跟我们使用的版本控制工具一样；-a 可以指定更新的用户信息；之后是用来创建镜像的容器的 ID；最后指定目标镜像的仓库名和 <span class="keyword">tag</span> <span class="title">信息。创建成功后会返回这个镜像的 ID</span> 信息。</div></pre></td></tr></table></figure>
<p><strong>diff 命令查看容器内的文件变化</strong>：</p>
<p>它可以列出容器内发生变化的文件和目录。这些变化包括添加（A-add）、删除（D-delete）、修改（C-change）</p>
<figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="title">@centos7</span> ~]# docker diff <span class="keyword">c</span><span class="number">43</span><span class="keyword">c</span><span class="number">7</span>d<span class="number">102</span>baa</div></pre></td></tr></table></figure>
<p><strong>cp 命令拷贝文件</strong>：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#从docker中往本地拷贝文件</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker cp c43c7d102baa:/var/www/html/index.html /opt/   </span></div><div class="line">[root@centos7 ~]<span class="comment"># ls /opt/</span></div><div class="line">index.html  rh</div><div class="line"><span class="comment"># 从本地往docker中拷贝文件</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker cp aa c43c7d102baa:/var</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker start -i c43c7d102baa</span></div><div class="line">root@<span class="symbol">c43c7d102baa:</span>/<span class="comment"># ls</span></div><div class="line">bin  boot  dev  etc  home  <span class="class"><span class="keyword">lib</span>  <span class="title">lib64</span>  <span class="title">media</span>  <span class="title">mnt</span>  <span class="title">opt</span>  <span class="title">proc</span>  <span class="title">root</span>  <span class="title">run</span>  <span class="title">sbin</span>  <span class="title">srv</span>  <span class="title">sys</span>  <span class="title">tmp</span>  <span class="title">usr</span>  <span class="title">var</span></span></div><div class="line">root@<span class="symbol">c43c7d102baa:</span>/<span class="comment"># ls var/</span></div><div class="line">aa  backups  cache  <span class="class"><span class="keyword">lib</span>  <span class="title">local</span>  <span class="title">lock</span>  <span class="title">log</span>  <span class="title">mail</span>  <span class="title">opt</span>  <span class="title">run</span>  <span class="title">spool</span>  <span class="title">tmp</span>  <span class="title">www</span></span></div></pre></td></tr></table></figure>
<p><strong>inspect 收集有关容器和镜像的底层信息</strong>：</p>
<p>Docker inspect命令可以收集有关容器和镜像的底层信息。这些信息包括：</p>
<ul>
<li>容器实例的IP地址</li>
<li>端口绑定列表</li>
<li>特定端口映射的搜索</li>
<li>收集配置的详细信息</li>
</ul>
<p>语法：</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect <span class="keyword">container</span>/<span class="keyword">image</span></div></pre></td></tr></table></figure>
<p><strong>kill 命令发送sigkill信号停止容器的主进程</strong>：</p>
<p>语法：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker kill [<span class="keyword">options</span>] <span class="symbol">&lt;container_id&gt;</span></div></pre></td></tr></table></figure>
<p><strong>rmi 移除一个或多个镜像</strong>：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker rmi <span class="params">&lt;image_id&gt;</span></div><div class="line"><span class="meta">#注意：在删除镜像之前要先用 docker rm 删掉依赖于这个镜像的所有容器</span></div></pre></td></tr></table></figure>
<p><strong>wait 阻塞对指定容器的其它调用方法，直到容器停止后退出阻塞</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker wait <span class="tag">&lt;<span class="name">container_id</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>tag 修改镜像的标签</strong></p>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker images </span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">&lt;none&gt;              &lt;none&gt;              f59c7e5b1817       <span class="number"> 18 </span>hours ago       <span class="number"> 192 </span>MB</div><div class="line">docker.io/ubuntu    latest              8693db7e8a00       <span class="number"> 7 </span>days ago          187.9 MB</div><div class="line">[root@centos7 ~]<span class="comment"># docker tag f59c7e5b1817 zwx/ub_mv:127 </span></div><div class="line">[root@centos7 ~]<span class="comment"># docker images </span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">zwx/ub_mv          <span class="number"> 127 </span>                f59c7e5b1817       <span class="number"> 18 </span>hours ago       <span class="number"> 192 </span>MB</div><div class="line">docker.io/ubuntu    latest              8693db7e8a00       <span class="number"> 7 </span>days ago          187.9 MB</div></pre></td></tr></table></figure>
<h2 id="docker的导入导出操作"><a href="#docker的导入导出操作" class="headerlink" title="docker的导入导出操作"></a>docker的导入导出操作</h2><p><strong>save 保存镜像为tar文件并发送到STDOUT</strong>:</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@node2 ~]<span class="comment"># docker images</span></div><div class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             VIRTUAL SIZE</div><div class="line">zwx_ub              latest              f59c7e5b1817        <span class="number">7</span> seconds ago       <span class="number">192</span> MB</div><div class="line">ubuntu              latest              <span class="number">8693</span>db7e8a00        <span class="number">6</span> days ago          <span class="number">187.9</span> MB</div><div class="line">[root@node2 ~]<span class="comment"># docker save f59c7e5b1817 &gt;zwx_ub.tar</span></div><div class="line"><span class="comment"># 我将zwx_ub这个镜像导出成tar包，并拷贝到centos7的测试机中导入，导入过程在下边。</span></div></pre></td></tr></table></figure>
<p><strong>load 从tar文件中载入镜像或仓库到STDIN</strong>:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker load -i zwx_ub.tar </span></div><div class="line">[root@centos7 ~]<span class="comment"># docker images </span></div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">ubhttp              latest              d47bbf8e50ba        About an hour ago   <span class="number">248</span> MB</div><div class="line">&lt;none&gt;              &lt;none&gt;              f59c7e5b1817        <span class="number">16</span> hours ago        <span class="number">192</span> MB</div><div class="line">docker.io/ubuntu    latest              <span class="number">8693</span>db7e8a00        <span class="number">7</span> days ago          <span class="number">187.9</span> MB</div><div class="line">[root@centos7 ~]<span class="comment"># docker run -it f59c7e5b1817</span></div><div class="line">root@<span class="symbol">e17558664f8d:</span>/<span class="comment"># ls</span></div><div class="line">bin  boot  dev  etc  home  <span class="class"><span class="keyword">lib</span>  <span class="title">lib64</span>  <span class="title">media</span>  <span class="title">mnt</span>  <span class="title">opt</span>  <span class="title">proc</span>  <span class="title">root</span>  <span class="title">run</span>  <span class="title">sbin</span>  <span class="title">srv</span>  <span class="title">sys</span>  <span class="title">tmp</span>  <span class="title">usr</span>  <span class="title">var</span></span></div><div class="line">root@<span class="symbol">e17558664f8d:</span>/<span class="comment"># ls /mnt/</span></div><div class="line">zwx</div><div class="line"><span class="comment"># 可以看出，我导入zwx_ub这个镜像后，镜像ID并没有变化，我创建个容器并进入，发现打包前我创建的文件都在。</span></div></pre></td></tr></table></figure>
<p><strong>import 从本地文件系统导入一个镜像</strong></p>
<p>比如，先下载了一个 ubuntu-14.04 的镜像，之后使用以下命令导入<br>tar.gz的镜像可以在<code>http://openvz.org/Download/template/precreated</code>下载。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># cat ubuntu-14.04-x86_64-minimal.tar.gz  |docker import - ubuntu:zwx</span></div><div class="line"><span class="number">23997</span>a971195cdd826f16a50573e480e1be1679729636178146425cdd46d1b52</div><div class="line">[root@centos7 ~]<span class="comment"># docker images </span></div><div class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             VIRTUAL SIZE</div><div class="line">ubuntu              zwx                 <span class="number">23997</span>a971195        <span class="number">28</span> seconds ago      <span class="number">214.9</span> MB</div></pre></td></tr></table></figure>
<p><strong>export 容器的导出</strong></p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">16</span>f568766019        ubuntu              <span class="string">"/bin/bash"</span>         <span class="number">52</span> minutes ago      Up <span class="number">45</span> minutes                           elegant_mcclintock</div><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker export 16f568766019 &gt;ubuntu.tar</span></div></pre></td></tr></table></figure>
<p><strong>import 容器的导入</strong>：</p>
<p>可以将容器的tar文件再导入为镜像</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">cat</span> ubuntu.tar | sudo docker import - <span class="keyword">test</span>/ubuntu:v1.0</div><div class="line">$ sudo docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</div><div class="line"><span class="keyword">test</span>/ubuntu         v1.0                9d37a6082e97        <span class="keyword">About</span> a minute ago   171.3 MB</div></pre></td></tr></table></figure>
<p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> docker import http:<span class="regexp">//</span>example.com<span class="regexp">/exampleimage.tgz example/im</span>agerepo</div></pre></td></tr></table></figure>
<p><strong>注</strong>：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker私有仓库]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h3 id="安装私有仓库"><a href="#安装私有仓库" class="headerlink" title="安装私有仓库"></a>安装私有仓库</h3><p>默认情况下，仓库会被创建在容器的 <code>/tmp/registry</code> 下。可以通过 -v 参数来将镜像文件存放在本地的指定路径。 例如下面的例子将上传的镜像放到 <code>/opt/data/registry</code> 目录。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 5000:5000 -v /opt/data/registry:/tmp/registry registry</span></div></pre></td></tr></table></figure>
<h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><p>创建好私有仓库之后，就可以使用 docker tag 来标记一个镜像，然后推送它到仓库，别的机器上就可以下载下来了。例如私有仓库地址为 192.168.0.1:5000。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">sate/centos         <span class="number">6.7</span>                 <span class="number">976079</span>dcc3f5        <span class="number">3</span> days ago          <span class="number">190.6</span> MB</div><div class="line">centos              <span class="number">6.7</span>                 <span class="number">130</span>db9a2a215        <span class="number">2</span> weeks ago         <span class="number">190.6</span> MB</div></pre></td></tr></table></figure>
<p>使用docker tag 将 976079dcc3f5 这个镜像标记为 192.168.0.1:5000/sate-centos（格式为 docker tag IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]）。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">tag</span> <span class="title">976079dcc3f5</span> <span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">5000</span>/sate-centos:test</div><div class="line"></div><div class="line">$ docker images</div><div class="line">REPOSITORY                        <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             VIRTUAL SIZE</div><div class="line"><span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">5000</span>/sate-centos   test                <span class="number">976079</span>dcc3f5        <span class="number">3</span> days ago          <span class="number">190.6</span> MB</div><div class="line">sate/centos                       <span class="number">6.7</span>                 <span class="number">976079</span>dcc3f5        <span class="number">3</span> days ago          <span class="number">190.6</span> MB</div><div class="line">centos                            <span class="number">6.7</span>                 <span class="number">130</span>db9a2a215        <span class="number">2</span> weeks ago         <span class="number">190.6</span> MB</div></pre></td></tr></table></figure>
<p>使用 docker push 上传标记的镜像。</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">push</span> <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/sate-centos</div><div class="line">The <span class="keyword">push</span> refers to a repository [<span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/sate-centos] (len: <span class="number">1</span>)</div><div class="line">unable to ping registry endpoint https://<span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/v0/</div><div class="line">v2 ping attempt failed with error: Get https://<span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/v2/: EOF</div><div class="line"> v1 ping attempt failed with error: Get https://<span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/v1/_ping: EOF</div></pre></td></tr></table></figure>
<p>注：报错是因为 <code>docker</code> 默认使用<code>https</code>的方式，解决办法如下：</p>
<p><strong>办法：</strong> 修改配置文件，使用 http 方式</p>
<p><code>centos</code>系统：</p>
<p>修改docker的配置文件<code>/etc/sysconfig/docker</code></p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 加入：</span></div><div class="line">INSECURE_REGISTRY=<span class="string">'--insecure-registry 192.168.0.1:5000'</span></div><div class="line"><span class="meta"># 重启服务</span></div><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
<p><code>ubuntu</code>系统：</p>
<p>修改docker的配置文件<code>/etc/default/docker</code></p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 加入：</span></div><div class="line">DOCKER_OPTS=<span class="string">'--insecure-registry 192.168.0.1:5000'</span></div><div class="line"><span class="meta"># 重启服务</span></div><div class="line">service docker start</div></pre></td></tr></table></figure>
<p>再次尝试 <code>push</code> 镜像，如下：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sudo docker <span class="keyword">push </span><span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">5000</span>/test</div><div class="line"><span class="symbol">The</span> <span class="keyword">push </span>refers to a repository [<span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">5000</span>/test] (len: <span class="number">1</span>)</div><div class="line"><span class="symbol">Sending</span> image list</div><div class="line"><span class="keyword">Pushing </span>repository <span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">5000</span>/test (<span class="number">1</span> tags)</div><div class="line"><span class="symbol">Image</span> <span class="number">511136</span>ea3c5a already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="symbol">Image</span> <span class="number">9</span>bad880da3d2 already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="symbol">Image</span> <span class="number">25</span>f11f5fb0cb already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="symbol">Image</span> ebc34468f71d already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="symbol">Image</span> <span class="number">2318</span>d26665ef already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="symbol">Image</span> <span class="keyword">ba5877dc9bec </span>already <span class="keyword">pushed, </span>skipping</div><div class="line"><span class="keyword">Pushing </span>tag for <span class="keyword">rev </span>[<span class="keyword">ba5877dc9bec] </span>on &#123;http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">5000</span>/<span class="built_in">v1</span>/repositories/test/tags/latest&#125;</div></pre></td></tr></table></figure>
<p>当<code>push</code>成功后，查看本地目录<code>/opt/data/registry</code>:</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root<span class="symbol">@sate</span>-z:/opt/data/registry<span class="meta"># ls</span></div><div class="line">images  repositories</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>通过私仓的链接地址查看我们刚上传的镜像：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">5000</span><span class="regexp">/v1/</span>search</div><div class="line">&#123;<span class="string">"num_results"</span>: <span class="number">1</span>, <span class="string">"query"</span>: <span class="string">""</span>, <span class="string">"results"</span>: [&#123;<span class="string">"description"</span>: <span class="string">""</span>, <span class="string">"name"</span>: <span class="string">"library/sate-centos"</span>&#125;]&#125;</div></pre></td></tr></table></figure>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>用<code>pull</code>命令来拉取我们的镜像：</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5000</span>/sate-centos:<span class="keyword">test</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker使用Dockerfile]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E4%BD%BF%E7%94%A8Dockerfile/</url>
      <content type="html"><![CDATA[<p>　使用 <code>docker commit</code> 来扩展一个镜像比较简单，但是不方便在一个团队中分享。我们可以使用 <code>docker build</code> 来创建一个新的镜像。为此，首先需要创建一个 Dockerfile，包含一些如何创建镜像的指令。</p>
<p>创建新的目录和dockerfile</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>mkdir sinatra</div><div class="line"><span class="variable">$ </span>cd sinatra</div><div class="line"><span class="variable">$ </span>touch Dockerfile</div></pre></td></tr></table></figure>
<p>Dockerfile 中每一条指令都创建镜像的一层，例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This is a comment		# 使用#来注释</span></div><div class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span>		  <span class="comment"># FROM 指令告诉 Docker 使用哪个镜像作为基础</span></div><div class="line"><span class="keyword">MAINTAINER</span> Docker Newbee &lt;newbee@docker.com&gt;	<span class="comment"># 接着是维护者的信息</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -qq update		<span class="comment"># RUN开头的指令会在创建中运行，比如安装一个软件包，在这里使用 apt-get 来安装了一些软件</span></span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -qqy install ruby ruby-dev</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> gem install sinatra</span></div></pre></td></tr></table></figure>
<p>创建完成dockerfile后可以使用<code>docker bulid</code> 来生成镜像。</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$ sudo docker build -t=<span class="string">"ouruser/sinatra:v2"</span> .</div><div class="line">Uploading context  <span class="number">2.56</span> kB</div><div class="line">Uploading context</div><div class="line">Step <span class="number">0</span> : FROM ubuntu:<span class="number">14.04</span></div><div class="line"> ---&gt; <span class="number">99</span>ec81b80c55</div><div class="line">Step <span class="number">1</span> : MAINTAINER Newbee &lt;newbee@docker.com&gt;</div><div class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">7</span>c5664a8a0c1</div><div class="line"> ---&gt; <span class="number">2</span>fa8ca4e2a13</div><div class="line">Removing intermediate container <span class="number">7</span>c5664a8a0c1</div><div class="line">Step <span class="number">2</span> : RUN apt-get -qq update</div><div class="line"> ---&gt; Running <span class="keyword">in</span> b07cc3fb4256</div><div class="line"> ---&gt; <span class="number">50</span>d21070ec0c</div><div class="line">Removing intermediate container b07cc3fb4256</div><div class="line">Step <span class="number">3</span> : RUN apt-get -qqy install ruby ruby-dev</div><div class="line"> ---&gt; Running <span class="keyword">in</span> a5b038dd127e</div><div class="line">Selecting previously unselected package libasan0:amd64.</div><div class="line">(Reading database ... <span class="number">11518</span> files and directories currently installed.)</div><div class="line">Preparing to unpack .../libasan0_4<span class="number">.8</span><span class="number">.2</span><span class="number">-19</span>ubuntu1_amd64.deb ...</div><div class="line">Setting up ruby (<span class="number">1</span>:<span class="number">1.9</span><span class="number">.3</span><span class="number">.4</span>) ...</div><div class="line">Setting up ruby1<span class="number">.9</span><span class="number">.1</span> (<span class="number">1.9</span><span class="number">.3</span><span class="number">.484</span><span class="number">-2</span>ubuntu1) ...</div><div class="line">Processing triggers for libc-bin (<span class="number">2.19</span><span class="number">-0</span>ubuntu6) ...</div><div class="line"> ---&gt; <span class="number">2</span>acb20f17878</div><div class="line">Removing intermediate container a5b038dd127e</div><div class="line">Step <span class="number">4</span> : RUN gem install sinatra</div><div class="line"> ---&gt; Running <span class="keyword">in</span> <span class="number">5e9</span>d0065c1f7</div><div class="line">. . .</div><div class="line">Successfully installed rack-protection<span class="number">-1.5</span><span class="number">.3</span></div><div class="line">Successfully installed sinatra<span class="number">-1.4</span><span class="number">.5</span></div><div class="line"><span class="number">4</span> gems installed</div><div class="line"> ---&gt; <span class="number">324104</span>cde6ad</div><div class="line">Removing intermediate container <span class="number">5e9</span>d0065c1f7</div><div class="line">Successfully built <span class="number">324104</span>cde6ad</div><div class="line"># 其中 -t 标记来添加 tag，指定新的镜像的用户信息。 “.” 是 Dockerfile 所在的路径（当前目录），也可以替换为一个具体的 Dockerfile 的路径。</div><div class="line"># dockerfile命名是固定的。</div></pre></td></tr></table></figure>
<p>此外，还可以利用 ADD 命令复制本地文件到镜像；用 EXPOSE 命令来向外部开放端口；用 CMD 命令来描述容器启动后运行的程序等。例如</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># put my local web site in myApp folder to /var/www</span></div><div class="line"><span class="keyword">ADD</span><span class="bash"> myApp /var/www</span></div><div class="line"><span class="comment"># expose httpd port</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></div><div class="line"><span class="comment"># the command to run</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/sbin/apachectl"</span>, <span class="string">"-D"</span>, <span class="string">"FOREGROUND"</span>]</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker练习]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E7%BB%83%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>系统：ubuntu 14.04</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 升级内核</div><div class="line">$ apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">$ apt-<span class="built_in">get</span> install linux-headers-<span class="number">3.13</span>.<span class="number">0</span>-<span class="number">88</span>-generic</div><div class="line"># 安装新版本的 docker</div><div class="line">$ sudo apt-<span class="built_in">get</span> install apt-transport-https</div><div class="line">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.<span class="keyword">com</span>:<span class="number">80</span> --recv-<span class="built_in">keys</span> <span class="number">36</span>A1D7869245C8950F966E92D8576A8BA88D21E9</div><div class="line">$ <span class="keyword">deb</span> http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.io/ubuntu docker main &gt; /etc/apt/sources.<span class="keyword">list</span>.d/docker.<span class="keyword">list</span><span class="comment">"</span></div><div class="line">$ sudo bash -<span class="keyword">c</span> <span class="string">"echo deb https://get.docker.io/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list"</span></div><div class="line">$ apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">$ apt-<span class="built_in">get</span> install lxc-docker</div></pre></td></tr></table></figure>
<h3 id="下载-ubuntu-镜像"><a href="#下载-ubuntu-镜像" class="headerlink" title="下载 ubuntu 镜像"></a>下载 ubuntu 镜像</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ docker pull ubuntu</div><div class="line">$ docker images</div><div class="line">REPOSITORY          <span class="keyword">TAG</span>                 <span class="title">IMAGE</span> ID            CREATED             VIRTUAL SIZE</div><div class="line">ubuntu              latest              <span class="number">594</span>b6e305389        <span class="number">3</span> weeks ago         <span class="number">122</span> MB</div></pre></td></tr></table></figure>
<h3 id="启动容器，并安装-nginx"><a href="#启动容器，并安装-nginx" class="headerlink" title="启动容器，并安装 nginx"></a>启动容器，并安装 nginx</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">run</span><span class="bash"> -i -t ubuntu /bin/bash</span></div><div class="line">在该 docker 容器中安装 nginx</div></pre></td></tr></table></figure>
<h3 id="将安装-nginx-的容器保存为镜像"><a href="#将安装-nginx-的容器保存为镜像" class="headerlink" title="将安装 nginx 的容器保存为镜像"></a>将安装 nginx 的容器保存为镜像</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                         PORTS               NAMES                    ecstatic_thompson</div><div class="line"><span class="keyword">b5138a3e3352 </span>       ubuntu              <span class="string">"/bin/bash"</span>              <span class="number">2</span> hours ago         Exited (<span class="number">0</span>) <span class="number">2</span> hours ago                             hopeful_perlman</div><div class="line">root@sate-z:~<span class="comment">#</span></div><div class="line">$ docker commit -m <span class="string">"nginx/ubuntu"</span> -a <span class="string">"sate"</span> <span class="keyword">b5138a3e3352 </span>ubuntu-nginx:<span class="built_in">v1</span></div><div class="line">-m 备注 -a 用户名 ubuntu-nginx:<span class="built_in">v1</span> 镜像名称和TAG 名称</div></pre></td></tr></table></figure>
<h3 id="用新创建的镜像，开一个新的容器，并映射端口"><a href="#用新创建的镜像，开一个新的容器，并映射端口" class="headerlink" title="用新创建的镜像，开一个新的容器，并映射端口"></a>用新创建的镜像，开一个新的容器，并映射端口</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="keyword">run</span><span class="bash"> -i -t -p 90:80 ubuntu-nginx:v1  /bin/bash</span></div><div class="line"><span class="comment"># 在该 docker 中启动 nginx 。可能需要自己写 nginx 的conf文件，访问宿主机的 ip:90，就可以访问到 docker 中的网站</span></div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>现在有个问题就是如何让 docker 容器在后台运行。</p>
<p>还有就是 ansible 如何控制 docker。</p>
<p>有一个可以后台运行的方法是安装 sshd 服务，然后以<code>-D</code>方式启动，但感觉应该还有更好的办法</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ apt-get install openssh-server openssh-client</div><div class="line">$ docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 50001:22 ubuntu/ruby:v2 /usr/sbin/sshd -D</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker的安装]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h3 id="centos-6-5-中docker的安装"><a href="#centos-6-5-中docker的安装" class="headerlink" title="centos 6.5 中docker的安装"></a>centos 6.5 中docker的安装</h3><ul>
<li>yum 源安装</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum <span class="keyword">install</span> docker-io</div></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="regexp">/etc/i</span>nit.d<span class="regexp">/docker start</span></div></pre></td></tr></table></figure>
<ul>
<li>日志中报错</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">time</span>=<span class="string">"2016-01-19T14:21:25.993968299+08:00"</span> level=warning msg=<span class="string">"You are running linux kernel version 2.6.32-431.el6.x86_64, which might be unstable running docker. Please upgrade your kernel to 3.10.0."</span> </div><div class="line"><span class="built_in">time</span>=<span class="string">"2016-01-19T14:21:25.997212022+08:00"</span> level=info msg=<span class="string">"Listening for HTTP on unix (/var/run/docker.sock)"</span> </div><div class="line">/usr/bin/docker: relocation <span class="keyword">error</span>: /usr/bin/docker: symbol dm_task_get_info_with_deferred_remove, <span class="built_in">version</span> Base <span class="keyword">not</span> defined <span class="keyword">in</span> <span class="built_in">file</span> libdevmapper.so<span class="number">.1</span><span class="number">.02</span> <span class="keyword">with</span> link <span class="built_in">time</span> <span class="keyword">reference</span></div></pre></td></tr></table></figure>
<p>日志可以看出，一个warning和一个error。 warning中指出我的kernel版本可能运行docker不稳定，建议我升级到3.10版本。 error的报错可以通过升级device-mapper-libs解决。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">yum upgrade device-mapper-libs</span></div></pre></td></tr></table></figure></p>
<h3 id="centos-7-中docker的安装"><a href="#centos-7-中docker的安装" class="headerlink" title="centos 7 中docker的安装"></a>centos 7 中docker的安装</h3><ul>
<li>yum 源安装</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum <span class="keyword">install</span> docker</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker容器的连接]]></title>
      <url>http://yoursite.com/2016/12/15/Docker%E5%AE%B9%E5%99%A8%E7%9A%84%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="连接docker容器的三种方式"><a href="#连接docker容器的三种方式" class="headerlink" title="连接docker容器的三种方式"></a>连接docker容器的三种方式</h2><h3 id="attach-参数"><a href="#attach-参数" class="headerlink" title="attach 参数"></a>attach 参数</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]<span class="comment"># docker ps -a  #查看容器ID</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker start &lt;CONTAINER ID&gt;	#启动容器</span></div><div class="line">[root@centos7 ~]<span class="comment"># docker attach &lt;CONTAINER ID&gt;	#连接容器，该容器必须是启动状态</span></div><div class="line">或者</div><div class="line">[root@centos7 ~]<span class="comment"># docker start -i &lt;CONTAINER ID&gt;		#启动并连接容器</span></div></pre></td></tr></table></figure>
<p><strong>注</strong>：但是使用 attach 命令有时候并不方便。当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。</p>
<h3 id="nsenter-命令"><a href="#nsenter-命令" class="headerlink" title="nsenter 命令"></a>nsenter 命令</h3><p><strong>安装</strong></p>
<p><code>nsenter</code> 工具在 util-linux 包2.23版本后包含。 如果系统中 util-linux 包没有该命令，可以按照下面的方法从源码安装。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>cd /tmp; curl <span class="symbol">https:</span>/<span class="regexp">/www.kernel.org/pub</span><span class="regexp">/linux/utils</span><span class="regexp">/util-linux/v</span>2.<span class="number">24</span>/util-linux-<span class="number">2.24</span>.tar.gz | tar -zxf-; cd util-linux-<span class="number">2.24</span>;</div><div class="line"><span class="variable">$ </span>./configure --without-ncurses</div><div class="line"><span class="variable">$ </span>make nsenter &amp;&amp; sudo cp nsenter /usr/local/bin</div></pre></td></tr></table></figure>
<p><strong>使用</strong></p>
<p>为了连接到容器，你还需要找到容器的第一个进程的 PID，可以通过下面的命令获取。</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PID=$(docker inspect --<span class="keyword">format</span> <span class="string">"&#123;&#123; .State.Pid &#125;&#125;"</span> &lt;<span class="keyword">container</span>&gt;)</div></pre></td></tr></table></figure>
<p>通过这个 PID，就可以连接到这个容器：</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">nsenter</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">target</span> <span class="comment">$PID</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mount</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">uts</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ipc</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">net</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">pid</span></div></pre></td></tr></table></figure>
<p><strong>实例</strong></p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker ps</span></div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div><div class="line"><span class="number">16</span>f568766019        ubuntu              <span class="string">"/bin/bash"</span>         <span class="number">34</span> minutes ago      Up <span class="number">28</span> minutes                           elegant_mcclintock</div><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># docker inspect --format <span class="string">"&#123;&#123; .State.Pid &#125;&#125;"</span> 16f568766019</span></div><div class="line"><span class="number">19803</span></div><div class="line">[root<span class="symbol">@centos7</span> ~]<span class="meta"># nsenter --target 19803 --mount --uts --ipc --net --pid</span></div><div class="line">root<span class="symbol">@16f568766019</span>:/<span class="meta">#</span></div></pre></td></tr></table></figure>
<h3 id="bashrc-docker-脚本"><a href="#bashrc-docker-脚本" class="headerlink" title=".bashrc_docker 脚本"></a>.bashrc_docker 脚本</h3><p>其实就是从docker inspect中取相关的数据，具体的脚本代码在最后贴出。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget -P ~ <span class="symbol">https:</span>/<span class="regexp">/github.com/yeasy</span><span class="regexp">/docker_practice/raw</span><span class="regexp">/master/</span>_local/.bashrc_docker;</div><div class="line">$ echo <span class="string">"[ -f ~/.bashrc_docker ] &amp;&amp; . ~/.bashrc_docker"</span> <span class="meta">&gt;&gt; </span>~<span class="regexp">/.bashrc; source ~/</span>.bashrc</div></pre></td></tr></table></figure>
<p>这个文件中定义了很多方便使用 Docker 的命令，例如 docker-pid 可以获取某个容器的 PID；而 docker-enter 可以进入容器或直接在容器内执行命令。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@centos7 ~]# docker-pid <span class="number">16</span>f568766019</div><div class="line"><span class="number">19803</span>   </div><div class="line">[root@centos7 ~]# docker-ip <span class="number">16</span>f568766019</div><div class="line"><span class="number">172.17</span><span class="number">.0</span><span class="number">.8</span></div><div class="line">[root@centos7 ~]# docker-enter <span class="number">16</span>f568766019 uname</div><div class="line">Linux</div></pre></td></tr></table></figure>
<p><strong>脚本内容：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Some useful commands to use docker.</span></div><div class="line"><span class="comment"># Author: yeasy@github</span></div><div class="line"><span class="comment"># Created:2014-09-25</span></div><div class="line"></div><div class="line"><span class="built_in">alias</span> docker-pid=<span class="string">"sudo docker inspect --format '&#123;&#123;.State.Pid&#125;&#125;'"</span></div><div class="line"><span class="built_in">alias</span> docker-ip=<span class="string">"sudo docker inspect --format '&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;'"</span></div><div class="line"></div><div class="line"><span class="comment">#the implementation refs from https://github.com/jpetazzo/nsenter/blob/master/docker-enter</span></div><div class="line"><span class="keyword">function</span> docker-<span class="function"><span class="title">enter</span></span>() &#123;</div><div class="line">    <span class="comment">#if [ -e $(dirname "$0")/nsenter ]; then</span></div><div class="line">    <span class="comment">#Change for centos bash running</span></div><div class="line">    <span class="keyword">if</span> [ <span class="_">-e</span> $(dirname <span class="string">'$0'</span>)/nsenter ]; <span class="keyword">then</span></div><div class="line">        <span class="comment"># with boot2docker, nsenter is not in the PATH but it is in the same folder</span></div><div class="line">        NSENTER=$(dirname <span class="string">"<span class="variable">$0</span>"</span>)/nsenter</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment"># if nsenter has already been installed with path notified, here will be clarified</span></div><div class="line">        NSENTER=$(<span class="built_in">which</span> nsenter)</div><div class="line">        <span class="comment">#NSENTER=nsenter</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    [ -z <span class="string">"<span class="variable">$NSENTER</span>"</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"WARN Cannot find nsenter"</span> &amp;&amp; <span class="built_in">return</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"Usage: `basename "</span><span class="variable">$0</span><span class="string">"` CONTAINER [COMMAND [ARG]...]"</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">""</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"Enters the Docker CONTAINER and executes the specified COMMAND."</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"If COMMAND is not specified, runs an interactive shell in CONTAINER."</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        PID=$(sudo docker inspect --format <span class="string">"&#123;&#123;.State.Pid&#125;&#125;"</span> <span class="string">"<span class="variable">$1</span>"</span>)</div><div class="line">        <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$PID</span>"</span> ]; <span class="keyword">then</span></div><div class="line">            <span class="built_in">echo</span> <span class="string">"WARN Cannot find the given container"</span></div><div class="line">            <span class="built_in">return</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="built_in">shift</span></div><div class="line"></div><div class="line">        OPTS=<span class="string">"--target <span class="variable">$PID</span> --mount --uts --ipc --net --pid"</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></div><div class="line">            <span class="comment"># No command given.</span></div><div class="line">            <span class="comment"># Use su to clear all host environment variables except for TERM,</span></div><div class="line">            <span class="comment"># initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,</span></div><div class="line">            <span class="comment"># and start a login shell.</span></div><div class="line">            <span class="comment">#sudo $NSENTER "$OPTS" su - root</span></div><div class="line">            sudo <span class="variable">$NSENTER</span> --target <span class="variable">$PID</span> --mount --uts --ipc --net --pid su - root</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="comment"># Use env to clear all host environment variables.</span></div><div class="line">            sudo <span class="variable">$NSENTER</span> --target <span class="variable">$PID</span> --mount --uts --ipc --net --pid env -i <span class="variable">$@</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible的Ad-Hoc]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E7%9A%84Ad-Hoc/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我们经常会通过命令行形式来使用 ansible， ansible 会自带很多模块.</p>
</blockquote>
<p>查看 ansible 自带模块和模块介绍的方法如下：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>ansible-doc -l		<span class="comment">#列出所有模块</span></div><div class="line"><span class="variable">$ </span>ansible-doc shell		<span class="comment">#查看 shell 模块的详细信息</span></div></pre></td></tr></table></figure>
<h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 文件的变化是通过 md5值来判断的。</span></div><div class="line">$ ansible sate -m <span class="keyword">copy</span><span class="bash"> <span class="_">-a</span> <span class="string">"src=./mysql_back.py dest=/mnt/ owner=root group=root mode=644 backup=yes"</span></span></div><div class="line"><span class="number">120.26</span>.<span class="number">45.230</span> | SUCCESS =&gt; &#123;</div><div class="line">    <span class="string">"changed"</span>: true,</div><div class="line">    <span class="string">"checksum"</span>: <span class="string">"1c332293fa02633b42ffcd10faddafc2d44083c0"</span>,</div><div class="line">    <span class="string">"dest"</span>: <span class="string">"/mnt/mysql_back.py"</span>,</div><div class="line">    <span class="string">"gid"</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="string">"md5sum"</span>: <span class="string">"46959dcafe35d9b727075237fbb8a3a0"</span>,</div><div class="line">    <span class="string">"mode"</span>: <span class="string">"0644"</span>,</div><div class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="string">"size"</span>: <span class="number">1589</span>,</div><div class="line">    <span class="string">"src"</span>: <span class="string">"/root/.ansible/tmp/ansible-tmp-1465968433.17-146914892008272/source"</span>,</div><div class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>,</div><div class="line">    <span class="string">"uid"</span>: <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="包和服务管理"><a href="#包和服务管理" class="headerlink" title="包和服务管理"></a>包和服务管理</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 nginx 服务</span></div><div class="line">$ ansible sate -m apt -a <span class="string">"name=nginx state=latest"</span></div><div class="line"></div><div class="line"><span class="comment"># 服务的启动与关闭</span></div><div class="line">$ ansible sate -m service -a <span class="string">"name=nginx state=started"</span></div><div class="line"><span class="meta">120.26.45.230 | SUCCESS =&gt;</span> &#123;</div><div class="line">    <span class="string">"changed"</span>: false,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"nginx"</span>,</div><div class="line">    <span class="string">"state"</span>: <span class="string">"started"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">$ ansible sate -m service -a <span class="string">"name=nginx state=stopped"</span></div><div class="line"><span class="meta">120.26.45.230 | SUCCESS =&gt;</span> &#123;</div><div class="line">    <span class="string">"changed"</span>: true,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"nginx"</span>,</div><div class="line">    <span class="string">"state"</span>: <span class="string">"stopped"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先将要设置的账户密码进行加密</span></div><div class="line"><span class="variable">$ </span>echo sate | openssl passwd -<span class="number">1</span> -stdin</div><div class="line"><span class="variable">$1</span><span class="variable">$xZGhHuDC</span><span class="variable">$7yx6FmawND4yEKLkr35o20</span></div><div class="line"></div><div class="line"><span class="comment"># 通过 ansible 创建新的用户</span></div><div class="line"><span class="variable">$ </span>ansible sate -m user -a <span class="string">'name=sate password="$1$xZGhHuDC$7yx6FmawND4yEKLkr35o20"'</span></div><div class="line"><span class="number">120.26</span>.<span class="number">45.230</span> | SUCCESS =&gt; &#123;</div><div class="line">    <span class="string">"changed"</span>: <span class="keyword">true</span>,</div><div class="line">    <span class="string">"comment"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"createhome"</span>: <span class="keyword">true</span>,</div><div class="line">    <span class="string">"group"</span>: <span class="number">1000</span>,</div><div class="line">    <span class="string">"home"</span>: <span class="string">"/home/sate"</span>,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"sate"</span>,</div><div class="line">    <span class="string">"password"</span>: <span class="string">"NOT_LOGGING_PASSWORD"</span>,</div><div class="line">    <span class="string">"shell"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"state"</span>: <span class="string">"present"</span>,</div><div class="line">    <span class="string">"stderr"</span>: <span class="string">"useradd: warning: the home directory already exists.\nNot copying any file from skel directory into it.\n"</span>,</div><div class="line">    <span class="string">"system"</span>: <span class="keyword">false</span>,</div><div class="line">    <span class="string">"uid"</span>: <span class="number">1000</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 测试</span></div><div class="line"><span class="variable">$ </span>ssh sate<span class="variable">@120</span>.<span class="number">26.45</span>.<span class="number">230</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible的facts]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E7%9A%84facts/</url>
      <content type="html"><![CDATA[<p>facts 组件是 ansible 用于采集被管理机器信息的一个功能，我们可以使用<code>setup</code>模块查询机器所有的 facts 信息，也可以使用<code>filter</code>来查询指定信息。输出的是 JSON 格式。</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">root@sate-z:~# ansible sate -m setup</div><div class="line"><span class="number">10.117</span><span class="number">.214</span><span class="number">.178</span> | SUCCESS =&gt; &#123;</div><div class="line">    <span class="string">"ansible_facts"</span>: &#123;</div><div class="line">        <span class="string">"ansible_all_ipv4_addresses"</span>: [</div><div class="line">            <span class="string">"10.117.214.178"</span>,</div><div class="line">            <span class="string">"120.26.45.230"</span></div><div class="line">        ],</div><div class="line">        <span class="string">"ansible_all_ipv6_addresses"</span>: [],</div><div class="line">        <span class="string">"ansible_architecture"</span>: <span class="string">"x86_64"</span>,</div><div class="line">        <span class="string">"ansible_bios_date"</span>: <span class="string">"12/16/2014"</span>,</div><div class="line">        <span class="string">"ansible_bios_version"</span>: <span class="string">"4.0.1"</span>,</div><div class="line">        <span class="string">"ansible_cmdline"</span>: &#123;</div><div class="line">            <span class="string">"BOOT_IMAGE"</span>: <span class="string">"/boot/vmlinuz-3.13.0-65-generic"</span>,</div><div class="line">            <span class="string">"quiet"</span>: true,</div><div class="line">            <span class="string">"ro"</span>: true,</div><div class="line">            <span class="string">"root"</span>: <span class="string">"UUID=af414ad8-9936-46cd-b074-528854656fcd"</span>,</div><div class="line">            <span class="string">"splash"</span>: true</div><div class="line">        &#125;,</div><div class="line">        <span class="string">"ansible_date_time"</span>: &#123;</div><div class="line">            <span class="string">"date"</span>: <span class="string">"2016-06-16"</span>,</div><div class="line">            <span class="string">"day"</span>: <span class="string">"16"</span>,</div><div class="line">            <span class="string">"epoch"</span>: <span class="string">"1466049222"</span>,</div><div class="line">            <span class="string">"hour"</span>: <span class="string">"11"</span>,</div><div class="line">            <span class="string">"iso8601"</span>: <span class="string">"2016-06-16T03:53:42Z"</span>,</div><div class="line">            <span class="string">"iso8601_basic"</span>: <span class="string">"20160616T115342839628"</span>,</div><div class="line">            <span class="string">"iso8601_basic_short"</span>: <span class="string">"20160616T115342"</span>,</div><div class="line">            <span class="string">"iso8601_micro"</span>: <span class="string">"2016-06-16T03:53:42.839785Z"</span>,</div><div class="line">            <span class="string">"minute"</span>: <span class="string">"53"</span>,</div><div class="line">            <span class="string">"month"</span>: <span class="string">"06"</span>,</div><div class="line">            <span class="string">"second"</span>: <span class="string">"42"</span>,</div><div class="line">            <span class="string">"time"</span>: <span class="string">"11:53:42"</span>,</div><div class="line">            <span class="string">"tz"</span>: <span class="string">"CST"</span>,</div><div class="line">            <span class="string">"tz_offset"</span>: <span class="string">"+0800"</span>,</div><div class="line">            <span class="string">"weekday"</span>: <span class="string">"Thursday"</span>,</div><div class="line">            <span class="string">"weekday_number"</span>: <span class="string">"4"</span>,</div><div class="line">            <span class="string">"weeknumber"</span>: <span class="string">"24"</span>,</div><div class="line">            <span class="string">"year"</span>: <span class="string">"2016"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"ansible_default_ipv4"</span>: &#123;</div><div class="line">            <span class="string">"address"</span>: <span class="string">"120.26.45.230"</span>,</div><div class="line">            .....</div><div class="line">            .....</div><div class="line">            .....(省略 N 行)</div></pre></td></tr></table></figure>
<p>使用<code>filter</code>查看指定信息：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">root@sate-<span class="symbol">z:</span>~<span class="comment"># ansible sate -m setup -a "filter=ansible_date_time"</span></div><div class="line"><span class="meta">10.117.214.178 | SUCCESS =&gt;</span> &#123;</div><div class="line">    <span class="string">"ansible_facts"</span>: &#123;</div><div class="line">        <span class="string">"ansible_date_time"</span>: &#123;</div><div class="line">            <span class="string">"date"</span>: <span class="string">"2016-06-16"</span>,</div><div class="line">            <span class="string">"day"</span>: <span class="string">"16"</span>,</div><div class="line">            <span class="string">"epoch"</span>: <span class="string">"1466049323"</span>,</div><div class="line">            <span class="string">"hour"</span>: <span class="string">"11"</span>,</div><div class="line">            <span class="string">"iso8601"</span>: <span class="string">"2016-06-16T03:55:23Z"</span>,</div><div class="line">            <span class="string">"iso8601_basic"</span>: <span class="string">"20160616T115523414703"</span>,</div><div class="line">            <span class="string">"iso8601_basic_short"</span>: <span class="string">"20160616T115523"</span>,</div><div class="line">            <span class="string">"iso8601_micro"</span>: <span class="string">"2016-06-16T03:55:23.414901Z"</span>,</div><div class="line">            <span class="string">"minute"</span>: <span class="string">"55"</span>,</div><div class="line">            <span class="string">"month"</span>: <span class="string">"06"</span>,</div><div class="line">            <span class="string">"second"</span>: <span class="string">"23"</span>,</div><div class="line">            <span class="string">"time"</span>: <span class="string">"11:55:23"</span>,</div><div class="line">            <span class="string">"tz"</span>: <span class="string">"CST"</span>,</div><div class="line">            <span class="string">"tz_offset"</span>: <span class="string">"+0800"</span>,</div><div class="line">            <span class="string">"weekday"</span>: <span class="string">"Thursday"</span>,</div><div class="line">            <span class="string">"weekday_number"</span>: <span class="string">"4"</span>,</div><div class="line">            <span class="string">"weeknumber"</span>: <span class="string">"24"</span>,</div><div class="line">            <span class="string">"year"</span>: <span class="string">"2016"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"changed"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>facts 默认收集了很多的设备基础信息，这些信息可以在做配置管理的时候引用。<strong>可以直接把 facts 信息直接当做 playbook 变量信息引用</strong>。比如后边的 nginx的 playbook 的练习中，<code>nginx.conf.j2</code>这个模板配置文件中的<code>worker_processes</code>这个参数的取值就是用该方法获得的。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat nginx.conf.j2| head -n <span class="number">3</span></div><div class="line"><span class="keyword">user</span> <span class="title">www-data</span>;</div><div class="line">worker_processes &#123;&#123; ansible_processor_cores &#125;&#125;;</div><div class="line">pid /run/nginx.pid;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible的Inventory]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E7%9A%84Inventory/</url>
      <content type="html"><![CDATA[<p><strong>单个Inventory文件的使用：</strong></p>
<p>我们用 ansible 来管理的机器信息都放在 <code>Inventory</code> 文件中，默认的 <code>Inventory</code> 是一个静态的 INI 格式的文件 <code>/etc/ansible/hosts</code>。 我们可以通过 <code>ANSIBLE_HOSTS</code> 环境变量来制定该文件，或者在运行 ansible 和 ansible-playbook 的时候用<code>-i</code>参数临时设置。</p>
<p>常用的定义主机和主机组的方式：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 定义了两个主机，使用 Inventory 内置变量定义了 SSH 登录时的密码</span></div><div class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>	ansible_ssh_pass=<span class="string">'123456'</span></div><div class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>	ansible_ssh_pass=<span class="string">'123456'</span></div><div class="line"></div><div class="line"><span class="meta"># 定义了一个 sate 组，并且组中 IP 为192.168.0.101-192.168.0.103 三台机器</span></div><div class="line">[sate]</div><div class="line"><span class="number">192.168</span><span class="number">.0</span><span class="number">.10</span>[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="meta"># 对上边的 sate 组使用 Inventory 内置变量定义了 SSH 登录密码</span></div><div class="line">[sate:vars]</div><div class="line">ansible_ssh_pass=<span class="string">'123456'</span></div><div class="line"></div><div class="line"><span class="meta"># 定义了一个 ansible 组，这个组下面包含 docker 组。</span></div><div class="line">[ansible:children]</div><div class="line">sate</div></pre></td></tr></table></figure>
<hr>
<p><strong>多个Inventory文件：</strong></p>
<p>Ansible 支持多个 Inventory 文件，我们可以修改<code>ansible.cfg</code>文件，如下，或者使用<code>ANSIBLE_HOSTS</code>环境变量定义。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 修改 ansible.cfg 中 inventory 的值</span></div><div class="line"><span class="attr">inventory</span>      = /etc/inventory/</div></pre></td></tr></table></figure>
<p>这样我们可以在<code>/etc/inventory/</code>目录下放入多个 Inventory 文件</p>
<hr>
<p><strong>动态Inventory文件：</strong></p>
<p>可能在实际情况下会有大量的主机列表，手动维护比较困难。<strong>动态 Inventory 就是 Ansible 所有的 Inventory 文件里边的主机列表和变量信息都支持从外部拉取,比如 CMDB 系统或者 zabbix 系统。</strong><br>配置的时候我们需要将<code>ansible.cfg</code>文件中的<code>inventory</code>的定义值改成一个执行脚本。</p>
<p>执行脚本没有编程语言上种类的限制，但是脚本必须支持两个参数，如下：</p>
<ul>
<li><p><code>--list</code>或者<code>-l</code>,这个参数运行后会显示所有的主机以及主机组的信息</p>
</li>
<li><p><code>--host</code>或者<code>-H</code>，这个参数后面需要指定一个 host，运行结果会返回这台主机的所有信息（包括认证信息、主机变量等），也是 JSON 格式。  </p>
</li>
</ul>
<h3 id="常用的-Inventory-内置参数"><a href="#常用的-Inventory-内置参数" class="headerlink" title="常用的 Inventory 内置参数"></a>常用的 Inventory 内置参数</h3><pre><code>参数        |        解释          |    例子 
</code></pre><p>—————- |—————–|———————————–|<br>ansible_ssh_host| 定义 host ssh 地址  |ansible_ssh_host=192.168.0.1 |<br>ansible_ssh_port| 定义 hosts ssh 端口| ~ =5000<br>ansible_ssh_user| 定义 ssh 认证用户    | ~ =sate<br>ansible_ssh_pass| 定义 ssh 认证密码  | ~ =’password’<br>ansible_sudo         | 定义 sudo 用户 | ~ =sate<br>ansible_sudo_pass| 定义 sudo 密码| ~ =’password’<br>ansible_sudo_exe|定义 sudo  路径| ~ =/usr/bin/sudo<br>ansible_connection|定义 hosts 连接方式| ~ =local<br>ansible_ssh_private_key_file|定义 hosts 私钥|~ =/root/key<br>ansible_shell_type|定义 shell 类型|~ =zsh<br>ansible_python<em>interpreter| 定义 执行 python 路径|~ =/usr/bin/python2.7<br>ansible\</em>*_interpreter|定义其他语言解析器路径|~ =/usr/bin/ruby</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible的playbook]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E7%9A%84playbook/</url>
      <content type="html"><![CDATA[<p>案例： 部署 nginx 服务。</p>
<p><strong>Inventory hosts 文件</strong></p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">[sate]</span></div><div class="line"><span class="number">192.168.0.1</span></div><div class="line"><span class="string">[sate:vars]</span></div><div class="line">ansible_python_interpreter=/usr/bin/python2.<span class="number">7</span></div></pre></td></tr></table></figure>
<p><strong>nginx.conf.j2 模板文件</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat nginx.conf.j2| head -n 3</div><div class="line">user www-data;</div><div class="line">worker_processes &#123;&#123; ansible_processor_cores &#125;&#125;;</div><div class="line">pid /run/nginx.pid;</div></pre></td></tr></table></figure>
<p><strong>部署nignx的 playbook</strong></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">- hosts:</span> sate</div><div class="line"><span class="attr">  tasks:</span></div><div class="line"><span class="attr">    - name:</span> install nginx</div><div class="line"><span class="attr">      apt:</span> name=nginx state=present</div><div class="line"></div><div class="line"><span class="attr">    - name:</span> copy nginx.conf</div><div class="line"><span class="attr">      template:</span> src=./nginx.conf.j2 dest=/etc/nginx/nginx.conf owner=root group=root mode=<span class="number">0644</span> validate=<span class="string">'nginx -t -c %s'</span></div><div class="line"><span class="attr">      notify:</span></div><div class="line"><span class="bullet">        -</span> restart nginx</div><div class="line"></div><div class="line"><span class="attr">  handlers:</span></div><div class="line"><span class="bullet">     -</span> name : restart nginx</div><div class="line"><span class="attr">       service:</span> name=nginx state=restarted</div></pre></td></tr></table></figure>
<p><strong>检查语法</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ansible-playbook nginx.yaml --syntax-check</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible简单使用]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Ansible是新出现的运维工具是基于Python研发的，糅合了众多老牌运维工具的优点实现了批量操作系统配置、批量程序的部署、批量运行命令等功能。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>实验环境：</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　系统：<span class="selector-tag">centos</span> 6<span class="selector-class">.5</span></div><div class="line">　　机器：<span class="selector-tag">node1</span>（192<span class="selector-class">.168</span><span class="selector-class">.174</span><span class="selector-class">.128</span>），<span class="selector-tag">node2</span>（192<span class="selector-class">.168</span><span class="selector-class">.174</span><span class="selector-class">.129</span>）</div></pre></td></tr></table></figure>
<p><strong>安装：</strong></p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@node1</span> ~]<span class="meta"># yum -y install ansible</span></div></pre></td></tr></table></figure>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>定义Host Inventory ：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@node1 ~]<span class="comment"># cat /etc/ansible/hosts</span></div><div class="line">[<span class="keyword">node</span><span class="title">]</span></div><div class="line">192.<span class="number">168.174</span>.<span class="number">129</span></div></pre></td></tr></table></figure>
<p>操作实例：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@node1 ~]<span class="comment"># ansible -i /etc/ansible/hosts nodetest  -m command -a 'date'</span></div><div class="line"><span class="meta">192.168.174.129 | success | rc=0 &gt;</span>&gt;</div><div class="line">Mon Oct <span class="number">12</span> <span class="number">13</span><span class="symbol">:</span><span class="number">23</span><span class="symbol">:</span><span class="number">56</span> CST <span class="number">2015</span></div><div class="line">注：-i 使用默认hosts，该参数可以省略</div><div class="line">该命令执行成功的前提是先通过ssh-copy-id同步ssh key认证。如果没有，则需要加-k参数（需要安装sshpass）。</div></pre></td></tr></table></figure>
<p>命令常用参数</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">m 导入模块</span></div><div class="line">-<span class="ruby">i 指定host</span></div><div class="line">-<span class="ruby">u 指定远程用户</span></div><div class="line">-<span class="ruby">s 使用sudo</span></div><div class="line">-<span class="ruby">k 询问密码</span></div><div class="line">例：</div><div class="line">$ ansible -i /xx/hosts wx-test  -m ping  -u zyadmin -s -k</div><div class="line">SSH password:</div><div class="line">xxx.xxx.xxx.x | success &gt;&gt; &#123;</div><div class="line">"changed": false,</div><div class="line">"ping": "pong"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果客户端服务器的端口和用户名不为默认的22和root，也可以在hosts这样写：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[group name]</div><div class="line">wx-sate1 ansible_ssh_host=xxx<span class="selector-class">.xx</span><span class="selector-class">.xxx</span><span class="selector-class">.x</span> ansible_ssh_port=<span class="number">3544</span> ansible_ssh_user=sate</div><div class="line">wx-sate2 ansible_ssh_host=xx<span class="selector-class">.xxx</span><span class="selector-class">.xx</span><span class="selector-class">.xx</span> ansible_ssh_port=<span class="number">4002</span> ansible_ssh_user=zyadmin</div><div class="line">例：</div><div class="line">$ ansible -<span class="selector-tag">i</span> /xx/hosts wx-sate1 -m ping</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible安装]]></title>
      <url>http://yoursite.com/2016/12/15/Ansible%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>分两大类，源码安装和用包管理安装</p>
<h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>一、 从GitHub 源码库安装</p>
<p>1、提取 ansible 源码</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github<span class="selector-class">.com</span>:ansible/ansible<span class="selector-class">.git</span> --recursive</div><div class="line">$ cd ./ansible</div><div class="line">$ source ./hacking/env-setup -<span class="selector-tag">q</span> 		#-<span class="selector-tag">q</span> 参数可以减少安装过程中的告警/错误信息输出</div></pre></td></tr></table></figure>
<p>2、安装对应python版本的pip</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo easy_install pip</div></pre></td></tr></table></figure>
<p>3、安装ansible 控制主机需要的Python模板</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo pip <span class="keyword">install </span>paramiko PyYAML <span class="keyword">Jinja2 </span>httplib2 six</div></pre></td></tr></table></figure>
<p>4、当更新Ansible 版本时，不但要更新git源码树，还要更新git中指向ansible 自身的模块，称为 submodules</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">git</span> <span class="comment">pull</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">rebase</span></div><div class="line"><span class="comment">$</span> <span class="comment">git</span> <span class="comment">submodule</span> <span class="comment">update</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">init</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">recursive</span></div></pre></td></tr></table></figure>
<p>5、一旦运行env-setup 脚本，就意味着ansible从源码中运行起来了。</p>
<p>二、Tar 包安装方式</p>
<p>可以在Http://release.ansible.com/ansible 中下载 Tar 包，安装过程和上边源码安装方式一样。</p>
<p>三、制作RPM 包安装</p>
<p>在 github 中提取代码或者直接下载 tar 包，使用 <code>make rpm</code> 命令创建 RPM 软件包。不过确保已经安装了 rpm-bulid、make、python2-devel 组件。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github<span class="selector-class">.com</span>:ansible/ansible<span class="selector-class">.git</span></div><div class="line">$ cd ./ansible</div><div class="line">$ make rpm</div><div class="line">$ sudo rpm -Uvh ~ /rpmbulid/ansible-*<span class="selector-class">.noarch</span><span class="selector-class">.rpm</span></div></pre></td></tr></table></figure>
<h3 id="用包管理工具安装（方便）"><a href="#用包管理工具安装（方便）" class="headerlink" title="用包管理工具安装（方便）"></a>用包管理工具安装（方便）</h3><p>一、yum 方式安装</p>
<p>对于 RHEL、CentOS 的官方 yum 源中没有 ansible 包，或者比较老旧,所以先安装支持第三方的 yum 仓库组件，最常用的有 EPEL、Remi、RPMForge 等。</p>
<p>下面安装 EPEL 作为部署 ansible 的默认 yum 源。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># RHEL(CentOS)5</span></div><div class="line">rpm -Uvh http:<span class="regexp">//mi</span>rrors.zju.edu.cn<span class="regexp">/epel/</span><span class="number">5</span><span class="regexp">/i386/</span>epel-release-<span class="number">5</span>-<span class="number">4</span>.noarch.rpm</div><div class="line">rpm -Uvh http:<span class="regexp">//mi</span>rrors.zju.edu.cn<span class="regexp">/epel/</span><span class="number">5</span><span class="regexp">/x86_64/</span>epel-release-<span class="number">5</span>-<span class="number">4</span>.noarch.rpm</div><div class="line"></div><div class="line"><span class="comment"># RHEL(CentOS)6</span></div><div class="line">rpm -Uvh http:<span class="regexp">//mi</span>rrors.zju.edu.cn<span class="regexp">/epel/</span><span class="number">6</span><span class="regexp">/i386/</span>epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</div><div class="line">rpm -Uvh http:<span class="regexp">//mi</span>rrors.zju.edu.cn<span class="regexp">/epel/</span><span class="number">6</span><span class="regexp">/x86_64/</span>epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</div><div class="line"></div><div class="line"><span class="comment"># RHEL(CentOS)7</span></div><div class="line">rpm -Uvh http:<span class="regexp">//mi</span>rrors.zju.edu.cn<span class="regexp">/epel/</span><span class="number">7</span><span class="regexp">/x86_64/</span>e<span class="regexp">/epel-release-7-6.noarch.rpm</span></div></pre></td></tr></table></figure>
<p>准备好 yum 源后，直接 yum 安装</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum <span class="keyword">install</span> ansible</div></pre></td></tr></table></figure>
<p>二、Apt（Ubuntu）方式安装</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ apt-<span class="built_in">get</span> install software-properties-common</div><div class="line">$ apt-<span class="built_in">add</span>-repository <span class="keyword">pp</span><span class="variable">a:ansible</span>/ansible</div><div class="line">$ apt-<span class="built_in">get</span> <span class="keyword">update</span></div><div class="line">$ apt-<span class="built_in">get</span> install ansible</div></pre></td></tr></table></figure>
<p>三、Homebrew（Mac OSX）安装方式</p>
<p>在 MAC 系统确保安装 Homebrew，直接使用下面命令安装：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>update</div><div class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>Ansible</div></pre></td></tr></table></figure>
<p>四、pip 方式安装</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>sudo easy_install pip</div><div class="line"><span class="variable">$ </span>sudo pip install ansible</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux客户端连接(PPTP)VPN]]></title>
      <url>http://yoursite.com/2016/12/15/PPTP%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><blockquote>
<p>Ubuntu 12.04.4<br>pptp version 1.7.2 </p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install pptp-linux</div></pre></td></tr></table></figure>
<h4 id="创建连接帐号"><a href="#创建连接帐号" class="headerlink" title="创建连接帐号"></a>创建连接帐号</h4><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">sudo</span> <span class="comment">pptpsetup</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">create</span> <span class="comment">myvpn</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">server</span> <span class="comment">xxx</span><span class="string">.</span><span class="comment">xxx</span><span class="string">.</span><span class="comment">xxx</span><span class="string">.</span><span class="comment">xxx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">username</span> <span class="comment">xxx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">password</span> <span class="comment">xxxxx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">encrypt</span></div></pre></td></tr></table></figure>
<h4 id="连接VPN"><a href="#连接VPN" class="headerlink" title="连接VPN"></a>连接VPN</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#打开vpn</span></div><div class="line">pon myvpn</div><div class="line"><span class="meta">#查看当前路由规则</span></div><div class="line">route</div><div class="line"><span class="meta">#删除老的default</span></div><div class="line">route del <span class="keyword">default</span></div><div class="line"><span class="meta">#创建新的路由规则</span></div><div class="line">route add <span class="keyword">default</span> gw <span class="number">192.168</span><span class="number">.250</span><span class="number">.1</span></div></pre></td></tr></table></figure>
<p><code>pon myvpn</code>成功时会生成ppp0：<br><img src="http://7xkm8w.com1.z0.glb.clouddn.com/ppp0.png" alt=""></p>
<h4 id="关闭VPN"><a href="#关闭VPN" class="headerlink" title="关闭VPN"></a>关闭VPN</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#关闭vpn</span></div><div class="line">poff myvpn</div><div class="line"><span class="meta">#查看当前路由规则</span></div><div class="line">route</div><div class="line"><span class="meta">#删除刚加的default规则（关闭vpn时，刚加的默认路由已经删除，此步可忽略）</span></div><div class="line">route del <span class="keyword">default</span></div><div class="line"><span class="meta">#还原以前的路由规则</span></div><div class="line">route add <span class="keyword">default</span> gw <span class="number">121.197</span><span class="number">.7</span><span class="number">.254</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tcpdump命令使用]]></title>
      <url>http://yoursite.com/2016/12/15/Tcpdump%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>tcpdump命令是一款sniffer工具，它可以打印所有经过网络接口的数据包的头信息，也可以使用-w选项将数据包保存到文件中，方便以后分析。</p>
</blockquote>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">tcpdump</span><span class="params">(选项)</span></span></div></pre></td></tr></table></figure>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">a：尝试将网络和广播地址转换成名称；</span></div><div class="line">-<span class="ruby">c&lt;数据包数目&gt;：收到指定的数据包数目后，就停止进行倾倒操作；</span></div><div class="line">-<span class="ruby">d：把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；</span></div><div class="line">-<span class="ruby">dd：把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；</span></div><div class="line">-<span class="ruby">ddd：把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；</span></div><div class="line">-<span class="ruby">e：在每列倾倒资料上显示连接层级的文件头；</span></div><div class="line">-<span class="ruby">f：用数字显示网际网络地址；</span></div><div class="line">-<span class="ruby">F&lt;表达文件&gt;：指定内含表达方式的文件；</span></div><div class="line">-<span class="ruby">i&lt;网络界面&gt;：使用指定的网络截面送出数据包；</span></div><div class="line">-<span class="ruby">l：使用标准输出列的缓冲区；</span></div><div class="line">-<span class="ruby">n：不把主机的网络地址转换成名字；</span></div><div class="line">-<span class="ruby">N：不列出域名；</span></div><div class="line">-<span class="ruby">O：不将数据包编码最佳化；</span></div><div class="line">-<span class="ruby">p：不让网络界面进入混杂模式；</span></div><div class="line">-<span class="ruby">q ：快速输出，仅列出少数的传输协议信息；</span></div><div class="line">-<span class="ruby">r&lt;数据包文件&gt;：从指定的文件读取数据包数据；</span></div><div class="line">-<span class="ruby">s&lt;数据包大小&gt;：设置每个数据包的大小；</span></div><div class="line">-<span class="ruby">S：用绝对而非相对数值列出TCP关联数；</span></div><div class="line">-<span class="ruby">t：在每列倾倒资料上不显示时间戳记；</span></div><div class="line">-<span class="ruby">tt： 在每列倾倒资料上显示未经格式化的时间戳记；</span></div><div class="line">-<span class="ruby">T&lt;数据包类型&gt;：强制将表达方式所指定的数据包转译成设置的数据包类型；</span></div><div class="line">-<span class="ruby">v：详细显示指令执行过程；</span></div><div class="line">-<span class="ruby">vv：更详细显示指令执行过程；</span></div><div class="line">-<span class="ruby">x：用十六进制字码列出数据包资料；</span></div><div class="line">-<span class="ruby">w&lt;数据包文件&gt;：把数据包数据写入指定的文件。</span></div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>直接启动tcpdump将监视第一个网络接口上所有流过的数据包</strong></p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">tcpdump</span></div></pre></td></tr></table></figure>
<p><strong>监视指定网络接口的数据包</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump -<span class="selector-tag">i</span> eth1</div></pre></td></tr></table></figure>
<p>如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，下面的例子都没有指定网络接口。</p>
<p><strong>监视指定主机的数据包</strong></p>
<ul>
<li>打印所有进入或离开sundown的数据包。</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">tcpdump host sundown</span></div></pre></td></tr></table></figure>
<ul>
<li>也可以指定ip,例如截获所有210.27.48.1 的主机收到的和发出的所有的数据包</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tcpdump</span> <span class="selector-tag">host</span> 210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure>
<ul>
<li>打印helios 与 hot 或者与 ace 之间通信的数据包</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tcpdump</span> <span class="selector-tag">host</span> <span class="selector-tag">helios</span> <span class="selector-tag">and</span> \( <span class="selector-tag">hot</span> <span class="selector-tag">or</span> <span class="selector-tag">ace</span> \)</div><div class="line">``` </div><div class="line"><span class="selector-tag">-</span> 截获主机210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.1</span> 和主机210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.2</span> 或210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.3</span>的通信</div></pre></td></tr></table></figure>
<p>tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 )<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 打印ace与任何其他主机之间通信的<span class="built_in">IP</span> 数据包, 但不包括与helios之间的数据包.</div></pre></td></tr></table></figure></p>
<p>tcpdump ip host ace and not helios<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-</span> 如果想要获取主机210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.1</span>除了和主机210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.2</span>之外所有主机通信的<span class="selector-tag">ip</span>包，使用命令：</div></pre></td></tr></table></figure></p>
<p>tcpdump ip host 210.27.48.1 and ! 210.27.48.2<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>截获主机hostname发送的所有数据</div></pre></td></tr></table></figure></p>
<p>tcpdump -i eth0 src host hostname<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">-  </span>监视所有送到主机hostname的数据包</div></pre></td></tr></table></figure></p>
<p>tcpdump -i eth0 dst host hostname<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">** 监视指定主机和端口的数据包**</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> 如果想要获取主机210<span class="selector-class">.27</span><span class="selector-class">.48</span><span class="selector-class">.1</span>接收或发出的<span class="selector-tag">telnet</span>包，使用如下命令</div></pre></td></tr></table></figure></p>
<p>tcpdump tcp port 23 host 210.27.48.1<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 对本机的udp <span class="number">123</span> 端口进行监视 <span class="number">123</span> 为ntp的服务端口</div></pre></td></tr></table></figure></p>
<p>tcpdump udp port 123<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">** </span>监视指定网络的数据包**</div><div class="line"></div><div class="line"><span class="bullet">- </span>打印本地主机与Berkeley网络上的主机之间的所有通信数据包</div></pre></td></tr></table></figure></p>
<p>tcpdump net ucb-ether<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> ucb-ether此处可理解为“<span class="keyword">Berkeley网络”的网络地址，此表达式最原始的含义可表达为：打印网络地址为ucb-ether的所有数据包</span></div><div class="line"></div><div class="line">- 打印所有通过网关snup的ftp数据包</div></pre></td></tr></table></figure></p>
<p>tcpdump ‘gateway snup and (port ftp or ftp-data)’<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> 注意：表达式被单引号括起来了，这可以防止shell对其中的括号进行错误解析</div><div class="line"></div><div class="line">-  打印所有源地址或目标地址是本地主机的<span class="built_in">IP</span>数据包</div></pre></td></tr></table></figure></p>
<p>tcpdump ip and not net localnet<br>```<br> 如果本地网络通过网关连到了另一网络，则另一网络并不能算作本地网络。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Strace命令分析]]></title>
      <url>http://yoursite.com/2016/12/15/Strace%E5%91%BD%E4%BB%A4%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>strace是个很好用的诊断手段，该文章整合了自己查找的比较好的网络资料和一些自己的理解，作为记录和学习。<br>借鉴网址：<a href="http://man.linuxde.net/strace" target="_blank" rel="external">http://man.linuxde.net/strace</a></p>
</blockquote>
<p><strong>Strace</strong>命令是个集诊断、调试、统计与一体的工具，我们可以使用strace对应用的系统调用和信号传递的跟踪结果来对应用进行分析，以达到解决问题或者是了解应用工作过程的目的。<br><strong>语法&amp;释义：</strong></p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">[root@node2 ~]# strace -h</div><div class="line">usage: strace [-dDffhiqrtttTvVxx] [-a column] [-e expr] ... [-o file]</div><div class="line">              [-p pid] ... [-s strsize] [-u username] [-E var=val] ...</div><div class="line">              [command [arg ...]]</div><div class="line">   or: strace -c [-D] [-e expr] ... [-O overhead] [-S sortby] [-E var=val] ...</div><div class="line">              [command [arg ...]]</div><div class="line">-<span class="ruby">c -- count time, calls, <span class="keyword">and</span> errors <span class="keyword">for</span> each syscall <span class="keyword">and</span> report summary</span></div><div class="line">        统计每一系统调用的所执行的时间,次数和出错的次数等.</div><div class="line">-<span class="ruby">f -- follow forks, -ff -- with output into separate files</span></div><div class="line">       -<span class="ruby">f 跟踪由fork产生的子进程      </span></div><div class="line">       -<span class="ruby">ff 常与-o选项一起使用，不同进程(子进程)产生的系统调用输出到filename.PI,D文件如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号.</span></div><div class="line">-<span class="ruby">F -- attempt to follow vforks, -h -- print help message</span></div><div class="line">        尝试跟踪vfork调用。在-f时，vfork不被跟踪</div><div class="line">-<span class="ruby">i -- print instruction pointer at time of syscall</span></div><div class="line">        输出系统调用的入口指针</div><div class="line">-<span class="ruby">q -- suppress messages about attaching, detaching, etc.</span></div><div class="line">        禁止输出关于脱离的消息</div><div class="line">-<span class="ruby">r -- print relative timestamp</span></div><div class="line">        打印每个系统调用的相对时间  </div><div class="line">-<span class="ruby">t -- absolute timestamp, -tt -- with usecs</span></div><div class="line">        在输出中的每一行前加上时间信息  -tt 时间确定到微秒级</div><div class="line">-<span class="ruby">T -- print time spent <span class="keyword">in</span> each syscall, -V -- print version</span></div><div class="line">        显示每个调用的花费时间</div><div class="line">-<span class="ruby">v -- verbose <span class="symbol">mode:</span> print unabbreviated argv, stat, termio[s], etc. args</span></div><div class="line">        输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出.</div><div class="line">-<span class="ruby">x -- print non-ascii strings <span class="keyword">in</span> hex, -xx -- print all strings <span class="keyword">in</span> hex</span></div><div class="line">        以十六进制形式输出非标准字符串      -xx 所有字符串以十六进制形式输出</div><div class="line">-<span class="ruby">a column -- alignment COLUMN <span class="keyword">for</span> printing syscall results (default <span class="number">40</span>)</span></div><div class="line">        设置返回值的输出位置.默认 为40.</div><div class="line">-<span class="ruby">e expr -- a qualifying <span class="symbol">expression:</span> option=[!]all <span class="keyword">or</span> option=[!]val1[,val2]...</span></div><div class="line">   options: trace, abbrev, verbose, raw, signal, read, or write</div><div class="line">   -<span class="ruby">e expr 指定一个表达式,用来控制如何跟踪.格式：[qualifier=][!]value1[,value2]... qualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如<span class="symbol">:-eopen</span>等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open 表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. 注意有些shell使用!来执行历史记录里的命令,所以要使用\\.</span></div><div class="line">   -<span class="ruby">e trace=set 只跟踪指定的系统 调用.例如<span class="symbol">:-e</span> trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all.</span></div><div class="line">   -<span class="ruby">e trace=file 只跟踪有关文件操作的系统调用. </span></div><div class="line">   -<span class="ruby">e trace=process 只跟踪有关进程控制的系统调用. </span></div><div class="line">   -<span class="ruby">e trace=network 跟踪与网络有关的所有系统调用. </span></div><div class="line">   -<span class="ruby">e strace=signal 跟踪所有与系统信号有关的 系统调用 </span></div><div class="line">   -<span class="ruby">e trace=ipc 跟踪所有与进程通讯有关的系统调用 </span></div><div class="line">   -<span class="ruby">e abbrev=set 设定strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all. </span></div><div class="line">   -<span class="ruby">e raw=set 将指定的系统调用的参数以十六进制显示. </span></div><div class="line">   -<span class="ruby">e signal=set 指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号. </span></div><div class="line">   -<span class="ruby">e read=set 输出从指定文件中读出 的数据.例如: -e read=<span class="number">3</span>,<span class="number">5</span> -e write=set 输出写入到指定文件中的数据.</span></div><div class="line"></div><div class="line">-<span class="ruby">o file -- send trace output to FILE instead of stderr</span></div><div class="line">        将strace的输出写入文件filename</div><div class="line">-<span class="ruby">O overhead -- set overhead <span class="keyword">for</span> tracing syscalls to OVERHEAD usecs</span></div><div class="line">-<span class="ruby">p pid -- trace process with process id PID, may be repeated</span></div><div class="line">        跟踪指定的进程pid.</div><div class="line">-<span class="ruby">D -- run tracer process as a detached grandchild, <span class="keyword">not</span> as parent</span></div><div class="line">-<span class="ruby">s strsize -- limit length of print strings to STRSIZE chars (default <span class="number">32</span>)</span></div><div class="line">        指定输出的字符串的最大长度.默认为32.文件名一直全部输出</div><div class="line">-<span class="ruby">S sortby -- sort syscall counts <span class="symbol">by:</span> time, calls, name, nothing (default time)</span></div><div class="line">-<span class="ruby">u username -- run command as username handling setuid <span class="keyword">and</span>/<span class="keyword">or</span> setgid</span></div><div class="line">        以username的UID和GID执行被跟踪的命令</div><div class="line">-<span class="ruby">E var=val -- put var=val <span class="keyword">in</span> the environment <span class="keyword">for</span> command</span></div><div class="line">-<span class="ruby">E var -- remove var from the environment <span class="keyword">for</span> command</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSH代理登录服务器]]></title>
      <url>http://yoursite.com/2016/12/15/SSH%E4%BB%A3%E7%90%86%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="ssh-代理登录服务器"><a href="#ssh-代理登录服务器" class="headerlink" title="ssh 代理登录服务器"></a>ssh 代理登录服务器</h2><p><strong>场景：</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">A</span>机器：10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">B</span>机器：10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">C</span>机器：10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">D</span>机器：10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.4</span></div></pre></td></tr></table></figure>
<p>现在我们在A机器上，要登陆D机器，必须要经过B、C两台跳板机，一台台的登陆太复杂，而且如果要传文件的话，那要一层层的传，我们现在要求是在A机器上直接登陆到D机器。</p>
<h3 id="一：使用ProxyCommand"><a href="#一：使用ProxyCommand" class="headerlink" title="一：使用ProxyCommand"></a>一：使用ProxyCommand</h3><p>编辑.ssh/config文件</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Host machineB</div><div class="line"> HostName <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span></div><div class="line"></div><div class="line">Host machineC</div><div class="line">  ProxyCommand ssh -q machineB nc <span class="number">10.0</span><span class="number">.0</span><span class="number">.3</span> <span class="number">22</span></div><div class="line"></div><div class="line">Host machineD</div><div class="line">  ProxyCommand ssh -q machineC nc <span class="number">10.0</span><span class="number">.0</span><span class="number">.4</span> <span class="number">22</span></div></pre></td></tr></table></figure>
<p>登陆D机器时， 直接<code>ssh machineD</code>。<br><strong>注：</strong>登陆时，可能要输入BCD机器的密码，可以事先打通key。</p>
<h3 id="二：使用ssh端口转发命令"><a href="#二：使用ssh端口转发命令" class="headerlink" title="二：使用ssh端口转发命令"></a>二：使用ssh端口转发命令</h3><p>在B机器上</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-CfgNL</span> 2222<span class="selector-pseudo">:10.0.0.3</span><span class="selector-pseudo">:222</span>  <span class="selector-tag">localhost</span></div></pre></td></tr></table></figure>
<p>在C机器上</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-CfgNL</span> 222<span class="selector-pseudo">:10.0.0.4</span><span class="selector-pseudo">:22</span>  <span class="selector-tag">localhost</span></div></pre></td></tr></table></figure>
<p>连接D机器是，连接B机器的2222端口即可：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p <span class="number">2222</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.2</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Logrotate安装配置]]></title>
      <url>http://yoursite.com/2016/12/15/Logrotate%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原文链接：<a href="https://linux.cn/article-4126-1.html" target="_blank" rel="external">https://linux.cn/article-4126-1.html</a></p>
</blockquote>
<p>logrotate是个十分有用的工具，它可以自动对日志进行截断（或轮循）、压缩以及删除旧的日志文件。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>logrotate安装非常简单。yum或apt-get安装即可。</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y <span class="keyword">install</span> logrotate</div></pre></td></tr></table></figure>
<p>配置文件目录：<code>/etc/logrotate.conf</code> ，通常不需要对它进行修改。日志文件的轮循设置在独立的配置文件中，它（们）放在<code>/etc/logrotate.d/</code>目录下</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>以下给出三个配置文件的实例：</p>
<p><strong>示例一</strong><br>创建一个log文件进行测试</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">touch /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line">head -c 20M &lt; /dev/urandom &gt; /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line">#填入一个20MB的随机比特流数据</div></pre></td></tr></table></figure>
<p>创建配置文件/etc/logrotate.d/test.conf，并写入：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/<span class="keyword">var</span>/log/test.log&#123;</div><div class="line">monthly</div><div class="line">rotate <span class="number">5</span></div><div class="line">compress</div><div class="line">delaycompress</div><div class="line">missingok</div><div class="line">notifempty</div><div class="line">create <span class="number">644</span> root root</div><div class="line">postrotate</div><div class="line">   /usr/bin/killall -HUP rsyslogd</div><div class="line">endscript</div><div class="line">&#125;</div><div class="line"><span class="meta">#注释：</span></div><div class="line"><span class="meta">#monthly: 日志文件将按月轮循。其它可用值为‘daily’，‘weekly’或者‘yearly’。</span></div><div class="line"><span class="meta">#rotate 5: 一次将存储5个归档日志。对于第六个归档，时间最久的归档将被删除。</span></div><div class="line"><span class="meta">#compress: 在轮循任务完成后，已轮循的归档将使用gzip进行压缩。</span></div><div class="line"><span class="meta">#delaycompress: 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在#下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。</span></div><div class="line"><span class="meta">#missingok: 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。</span></div><div class="line"><span class="meta">#notifempty: 如果日志文件为空，轮循不会进行。</span></div><div class="line"><span class="meta">#create 644 root root: 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件。</span></div><div class="line"><span class="meta">#postrotate/endscript: 在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，#rsyslogd 进程将立即再次读取其配置并继续运行。</span></div></pre></td></tr></table></figure>
<p><strong>示例二</strong><br>我们只想要轮循一个日志文件，然而日志文件大小可以增长到50MB。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#/etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span> 写入：</div><div class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">log</span>-<span class="keyword">file</span> &#123;</div><div class="line">    size=50M</div><div class="line">    <span class="keyword">rotate</span> 5</div><div class="line">    create 644 root root</div><div class="line">    postrotate</div><div class="line">        /usr/bin/killall -HUP rsyslogd</div><div class="line">    endscript</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>示例三</strong><br>我们想要让旧日志文件以创建日期命名，这可以通过添加dateext常熟实现。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#/etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span> 写入：</div><div class="line">/<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">log</span>-<span class="keyword">file</span> &#123;</div><div class="line">    <span class="built_in">monthly</span></div><div class="line">    <span class="keyword">rotate</span> 5</div><div class="line">    dateext</div><div class="line">    create 644 root root</div><div class="line">    postrotate</div><div class="line">        /usr/bin/killall -HUP rsyslogd</div><div class="line">    endscript</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这将让归档文件在它们的文件名中包含日期信息。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>logrotate可以在任何时候从命令行手动调用。要调用为/etc/lograte.d/下配置的所有日志调用logrotate：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@node2</span> ~]<span class="meta"># ls /etc/logrotate.d/</span></div><div class="line">dracut  redis  salt  syslog  test.conf  vsftpd  yum</div><div class="line">[root<span class="symbol">@node2</span> ~]<span class="meta"># logrotate /etc/logrotate.conf</span></div></pre></td></tr></table></figure>
<p>要为某个特定的配置调用logrotate：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@node2</span> ~]<span class="meta"># logrotate /etc/logrotate.d/test.conf</span></div></pre></td></tr></table></figure>
<p><strong>预演方式运行</strong><br>使用‘-d’选项以预演方式运行logrotate。要进行验证，不用实际轮循任何日志文件，可以模拟演练日志轮循并显示其输出。</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@node2 ~]# logrotate -<span class="keyword">d</span> /etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span> </div><div class="line">reading config <span class="keyword">file</span> /etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span></div><div class="line">reading config info <span class="keyword">for</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line"></div><div class="line">Handling 1 logs</div><div class="line"></div><div class="line">rotating pattern: /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span> monthly (5 rotations)</div><div class="line">empty <span class="keyword">log</span> files are not rotated, old logs are removed</div><div class="line">considering <span class="keyword">log</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line">  <span class="keyword">log</span> does not need rotating</div><div class="line">not running postrotate script, since <span class="keyword">no</span> logs were rotated</div></pre></td></tr></table></figure>
<p>正如我们从上面的输出结果可以看到的，logrotate判断该轮循是不必要的。</p>
<p><strong>强制方式运行</strong></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@node2 bin]# logrotate -vf /etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span> </div><div class="line">reading config <span class="keyword">file</span> /etc/logrotate.<span class="keyword">d</span>/<span class="keyword">test</span>.<span class="keyword">conf</span></div><div class="line">reading config info <span class="keyword">for</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line"></div><div class="line">Handling 1 logs</div><div class="line"></div><div class="line">rotating pattern: /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span> forced from command <span class="keyword">line</span> (5 rotations)</div><div class="line">empty <span class="keyword">log</span> files are not rotated, old logs are removed</div><div class="line">considering <span class="keyword">log</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="built_in">log</span></div><div class="line">  <span class="keyword">log</span> needs rotating</div><div class="line">rotating <span class="keyword">log</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span>, <span class="keyword">log</span>-&gt;rotateCount is 5</div><div class="line">dateext suffix '-20150923'</div><div class="line"><span class="keyword">glob</span> pattern '-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'</div><div class="line"><span class="keyword">glob</span> finding logs to <span class="keyword">compress</span> failed</div><div class="line"><span class="keyword">glob</span> finding old rotated logs failed</div><div class="line">renaming /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span> to /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span>-20150923</div><div class="line">creating new /<span class="keyword">var</span>/<span class="keyword">log</span>/<span class="keyword">test</span>.<span class="keyword">log</span> mode = 0644 uid = 0 gid = 0</div><div class="line">running postrotate script</div></pre></td></tr></table></figure>
<p><strong>之后配置crontab进行定时处理。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux_inode_100%问题]]></title>
      <url>http://yoursite.com/2016/12/15/Linux-inode-100-%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="查看系统的-innode-占用情况"><a href="#查看系统的-innode-占用情况" class="headerlink" title="查看系统的 innode 占用情况"></a>查看系统的 innode 占用情况</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">df -ih</span></div></pre></td></tr></table></figure>
<h3 id="查找那个目录下文件最多"><a href="#查找那个目录下文件最多" class="headerlink" title="查找那个目录下文件最多"></a>查找那个目录下文件最多</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> /*; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; find <span class="variable">$i</span> | wc <span class="_">-l</span>; <span class="keyword">done</span></div><div class="line"><span class="comment"># find $i 会列出该目录下所有文件，然后wc -l 计算总和</span></div></pre></td></tr></table></figure>
<h3 id="删除那个目录的的所有文件"><a href="#删除那个目录的的所有文件" class="headerlink" title="删除那个目录的的所有文件"></a>删除那个目录的的所有文件</h3><p>一般情况下，如果这个目录下应该会有数以百万的文件，如果你直接用 <code>rm -rf</code> 目录名 的话效率会很低，可以用下面方法,最好开一个 <code>screen</code> 来处理</p>
<p>```<br>find 目录 -type f -name ‘*’ -print0 | xargs -0 rm</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux_inodes]]></title>
      <url>http://yoursite.com/2016/12/15/Linux-inodes/</url>
      <content type="html"><![CDATA[<h3 id="一、inode是什么？"><a href="#一、inode是什么？" class="headerlink" title="一、inode是什么？"></a>一、inode是什么？</h3><p>理解inode，要从文件储存说起。 </p>
<p>文件储存在硬盘上，硬盘的最小存储单位叫做”扇区”（<code>Sector</code>）。每个扇区储存512字节（相当于0.5KB）。  </p>
<p>操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个”块”（block）。这种由多个扇区组成的”块”，是文件存取的最小单位。”块”的大小，最常见的是4KB，即连续八个<code>sector</code>组成一个 <code>block</code>。</p>
<p>文件数据都储存在”块”中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做<code>inode</code>，中文译名为”索引节点”。</p>
<p>每一个文件都有对应的<code>inode</code>，里面包含了与该文件有关的一些信息。</p>
<h3 id="二、inode的内容"><a href="#二、inode的内容" class="headerlink" title="二、inode的内容"></a>二、inode的内容</h3><p><code>inode</code>包含文件的元信息，具体来说有以下内容：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">* 文件的字节数</div><div class="line">　　* 文件拥有者的<span class="keyword">User</span> <span class="title">ID</span></div><div class="line">　　* 文件的<span class="keyword">Group</span> <span class="title">ID</span></div><div class="line">　　* 文件的读、写、执行权限</div><div class="line">　　* 文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。</div><div class="line">　　* 链接数，即有多少文件名指向这个inode</div><div class="line">　　* 文件数据block的位置</div></pre></td></tr></table></figure>
<p>可以用<code>stat</code>命令，查看某个文件的<code>inode</code>信息：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ stat sina.html</div><div class="line"><span class="symbol">  File:</span> ‘sina.html’</div><div class="line"><span class="symbol">  Size:</span> <span class="number">590188</span>    	<span class="string">Blocks:</span> <span class="number">1160</span>       IO <span class="string">Block:</span> <span class="number">4096</span>   regular file</div><div class="line"><span class="string">Device:</span> ca01h/<span class="number">51713</span>d	<span class="string">Inode:</span> <span class="number">921437</span>      <span class="string">Links:</span> <span class="number">1</span></div><div class="line"><span class="string">Access:</span> (<span class="number">0644</span><span class="regexp">/-rw-r--r--)  Uid: (    0/</span>    root)   <span class="string">Gid:</span> (    <span class="number">0</span>/    root)</div><div class="line"><span class="string">Access:</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-03</span> <span class="number">18</span>:<span class="number">08</span>:<span class="number">50.961342023</span> +<span class="number">0800</span></div><div class="line"><span class="string">Modify:</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-01</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">43.600409902</span> +<span class="number">0800</span></div><div class="line"><span class="string">Change:</span> <span class="number">2016</span><span class="number">-08</span><span class="number">-01</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">43.600409902</span> +<span class="number">0800</span></div><div class="line"><span class="symbol"> Birth:</span> -</div></pre></td></tr></table></figure>
<h3 id="三、inode的大小"><a href="#三、inode的大小" class="headerlink" title="三、inode的大小"></a>三、inode的大小</h3><p><code>inode</code>也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是<code>inode</code>区（<code>inode table</code>），存放<code>inode</code>所包含的信息。</p>
<p>每个<code>inode</code>节点的大小，一般是128字节或256字节。<code>inode</code>节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个<code>inode</code>。假定在一块1GB的硬盘中，每个<code>inode</code>节点的大小为128字节，每1KB就设置一个<code>inode</code>，那么<code>inode table</code>的大小就会达到128MB，占整块硬盘的12.8%。</p>
<p>查看每个硬盘分区的<code>inode</code>总数和已经使用的数量，可以使用<code>df -i</code>命令。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ df -i</div><div class="line">Filesystem      Inodes  IUsed   IFree IUse% Mounted on</div><div class="line">/dev/xvda1     <span class="number">2621440</span> <span class="number">295029</span> <span class="number">2326411</span>   <span class="number">12</span>% /</div><div class="line">none            <span class="number">127041</span>     <span class="number">11</span>  <span class="number">127030</span>    <span class="number">1</span>% /sys/fs/cgroup</div><div class="line">udev            <span class="number">124329</span>    <span class="number">424</span>  <span class="number">123905</span>    <span class="number">1</span>% /dev</div><div class="line">tmpfs           <span class="number">127041</span>    <span class="number">338</span>  <span class="number">126703</span>    <span class="number">1</span>% /run</div><div class="line">none            <span class="number">127041</span>      <span class="number">3</span>  <span class="number">127038</span>    <span class="number">1</span>% /run/lock</div><div class="line">none            <span class="number">127041</span>      <span class="number">1</span>  <span class="number">127040</span>    <span class="number">1</span>% /run/shm</div><div class="line">none            <span class="number">127041</span>      <span class="number">2</span>  <span class="number">127039</span>    <span class="number">1</span>% /run/user</div></pre></td></tr></table></figure>
<p>查看每个<code>inode</code>节点的大小，可以用如下命令</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo dumpe2fs -h <span class="regexp">/dev/</span>xvda1 | <span class="keyword">grep</span> <span class="string">"Inode size"</span></div><div class="line">dumpe2fs <span class="number">1.42</span>.<span class="number">9</span> (<span class="number">4</span>-Feb-<span class="number">2014</span>)</div><div class="line">Inode <span class="keyword">size</span>:	          <span class="number">256</span></div></pre></td></tr></table></figure>
<p>由于每个文件都必须有一个<code>inode</code>，因此有可能发生<code>inode</code>已经用光，但是硬盘还未存满的情况。这时，就无法在硬盘上创建新文件。</p>
<h3 id="四、inode号码"><a href="#四、inode号码" class="headerlink" title="四、inode号码"></a>四、inode号码</h3><p>每个<code>inode</code>都有一个号码，操作系统用<code>inode</code>号码来识别不同的文件。</p>
<p>这里值得重复一遍，<code>Unix/Linux</code>系统内部不使用文件名，而使用<code>inode</code>号码来识别文件。对于系统来说，文件名只是<code>inode</code>号码便于识别的别称或者绰号。</p>
<p>表面上，用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：首先，系统找到这个文件名对应的<code>inode</code>号码；其次，通过<code>inode</code>号码，获取<code>inode</code>信息；最后，根据<code>inode</code>信息，找到文件数据所在的<code>block</code>，读出数据。<br>使用<code>ls -i</code>命令，可以看到文件名对应的<code>inode</code>号码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls -<span class="selector-tag">i</span> sina<span class="selector-class">.html</span></div><div class="line"><span class="number">921437</span> sina.html</div></pre></td></tr></table></figure>
<h3 id="五、目录文件"><a href="#五、目录文件" class="headerlink" title="五、目录文件"></a>五、目录文件</h3><p>Unix/Linux系统中，目录（<code>directory</code>）也是一种文件。打开目录，实际上就是打开目录文件。<br>目录文件的结构非常简单，就是一系列目录项（<code>dirent</code>）的列表。每个目录项，由两部分组成：所包含文件的文件名，以及该文件名对应的<code>inode</code>号码。</p>
<p><code>ls -i</code>命令列出整个目录文件，即文件名和inode号码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls -<span class="selector-tag">i</span> /mnt/</div><div class="line"><span class="number">919572</span> <span class="selector-tag">a</span><span class="selector-class">.py</span>  <span class="number">919588</span> <span class="selector-tag">b</span><span class="selector-class">.py</span>  <span class="number">919592</span> kong1  <span class="number">919591</span> kong2  <span class="number">919546</span> passwd</div></pre></td></tr></table></figure>
<p>理解了上面这些知识，就能理解目录的权限。目录文件的读权限（r）和写权限（w），都是针对目录文件本身。由于目录文件内只有文件名和<code>inode</code>号码，所以如果只有读权限，只能获取文件名，无法获取其他信息，因为其他信息都储存在<code>inode</code>节点中，而读取<code>inode</code>节点内的信息需要目录文件的执行权限（x）。</p>
<h3 id="六、硬链接"><a href="#六、硬链接" class="headerlink" title="六、硬链接"></a>六、硬链接</h3><p>一般情况下，文件名和<code>inode</code>号码是”一一对应”关系，每个<code>inode</code>号码对应一个文件名。但是，<code>Unix/Linux</code>系统允许，多个文件名指向同一个<code>inode</code>号码。</p>
<p>这意味着，可以用不同的文件名访问同样的内容；对文件内容进行修改，会影响到所有文件名；但是，删除一个文件名，不影响另一个文件名的访问。这种情况就被称为”硬链接”（<code>hard link</code>）。</p>
<p><code>ln</code>命令可以创建硬链接：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ln 源文件 目标文件</div><div class="line"><span class="variable">$ </span>touch testa</div><div class="line"><span class="variable">$ </span>ln testa testb</div><div class="line"><span class="variable">$ </span>ll -i test*</div><div class="line"><span class="number">919070</span> -rw-r--r-- <span class="number">2</span> root root <span class="number">0</span> Aug  <span class="number">4</span> 09<span class="symbol">:</span><span class="number">49</span> testa</div><div class="line"><span class="number">919070</span> -rw-r--r-- <span class="number">2</span> root root <span class="number">0</span> Aug  <span class="number">4</span> 09<span class="symbol">:</span><span class="number">49</span> testb</div><div class="line"></div><div class="line"><span class="comment"># 一些更改操作,更改操作会同时更改两个文件，删除其中一个，不会影响到另一个</span></div><div class="line"><span class="variable">$ </span>echo aa &gt; testa</div><div class="line"><span class="variable">$ </span>cat testb</div><div class="line">aa</div><div class="line"><span class="variable">$ </span>echo bb &gt; testb</div><div class="line"><span class="variable">$ </span>cat testa</div><div class="line">bb</div><div class="line"><span class="variable">$ </span>rm -rf testa</div><div class="line"><span class="variable">$ </span>ls</div><div class="line">a.py  b.py  kong1  kong2  passwd  testb  testv</div><div class="line"><span class="variable">$ </span>cat testb</div><div class="line">bb</div></pre></td></tr></table></figure>
<p>运行上面这条命令以后，源文件与目标文件的<code>inode</code>号码相同，都指向同一个<code>inode</code>。<code>inode</code>信息中有一项叫做”链接数”，记录指向该<code>inode</code>的文件名总数，这时就会增加1。</p>
<p>反过来，删除一个文件名，就会使得<code>inode</code>节点中的”链接数”减1。当这个值减到0，表明没有文件名指向这个<code>inode</code>，系统就会回收这个<code>inode</code>号码，以及其所对应<code>block</code>区域。<br>这里顺便说一下目录文件的”链接数”。创建目录时，默认会生成两个目录项：”.”和”..”。前者的<code>inode</code>号码就是当前目录的<code>inode</code>号码，等同于当前目录的”硬链接”；后者的<code>inode</code>号码就是当前目录的父目录的<code>inode</code>号码，等同于父目录的”硬链接”。所以，任何一个目录的”硬链接”总数，总是等于2加上它的子目录总数（含隐藏目录）。</p>
<h3 id="七、软链接"><a href="#七、软链接" class="headerlink" title="七、软链接"></a>七、软链接</h3><p>文件A和文件B的<code>inode</code>号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的”软链接”（<code>soft link</code>）或者”符号链接（<code>symbolic link</code>）。<br>这意味着，文件A依赖于文件B而存在，如果删除了文件B，打开文件A就会报错：<code>&quot;No such file or directory&quot;</code>。这是软链接与硬链接最大的不同：文件A指向文件B的文件名，而不是文件B的<code>inode</code>号码，文件B的<code>inode</code>“链接数”不会因此发生变化。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ln <span class="_">-s</span> 源文文件或目录 目标文件或目录</div></pre></td></tr></table></figure>
<h3 id="八、inode的特殊作用"><a href="#八、inode的特殊作用" class="headerlink" title="八、inode的特殊作用"></a>八、inode的特殊作用</h3><p>由于<code>inode</code>号码与文件名分离，这种机制导致了一些<code>Unix/Linux</code>系统特有的现象。</p>
<p>　　1. 有时，文件名包含特殊字符，无法正常删除。这时，直接删除<code>inode</code>节点，就能起到删除文件的作用。</p>
<p>　　2. 移动文件或重命名文件，只是改变文件名，不影响<code>inode</code>号码。
　</p>
<p>　　3. 打开一个文件以后，系统就以<code>inode</code>号码来识别这个文件，不再考虑文件名。因此，通常来说，系统无法从<code>inode</code>号码得知文件名。</p>
<p>　　<br>第3点使得软件更新变得简单，可以在不关闭软件的情况下进行更新，不需要重启。因为系统通过<code>inode</code>号码，识别运行中的文件，不通过文件名。更新的时候，新版文件以同样的文件名，生成一个新的<code>inode</code>，不会影响到运行中的文件。等到下一次运行这个软件的时候，文件名就自动指向新版文件，旧版文件的<code>inode</code>则被回收。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python_递归]]></title>
      <url>http://yoursite.com/2016/12/15/Python-%E9%80%92%E5%BD%92/</url>
      <content type="html"><![CDATA[<p><strong>递归</strong>：函数对自身定义的引用。</p>
<p>每次函数调用时，针对这个调用的新命名空间会被创建，意味着当函数调用“自身”时，实际上运行的是两个不同的函数（或者说同一个函数具有两个不同的命名空间）。</p>
<h5 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h5><p>计算数 n 的阶乘(<code>n * (n-1) * (n-2) .. * 1</code>)：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># for 循环实现</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fac</span><span class="params">(n)</span>:</span></div><div class="line">    result = n</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line">        result *= i</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">    </div><div class="line"><span class="comment"># 递归实现</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fac</span><span class="params">(n)</span>:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rec_fac</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> n</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> n * rec_fac(n - <span class="number">1</span>)</div></pre></td></tr></table></figure>
<h5 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(sequence, number, lower=<span class="number">0</span>, upper=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> upper <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        upper = len(sequence) - <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> lower == upper:</div><div class="line">        <span class="keyword">assert</span> number == sequence[upper]</div><div class="line">        <span class="keyword">return</span> upper</div><div class="line"></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        middle = (lower + upper)//<span class="number">2</span></div><div class="line">        <span class="keyword">if</span> number &gt; sequence[middle]:</div><div class="line">            <span class="keyword">return</span> search(sequence, number, middle+<span class="number">1</span>, upper)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> search(sequence, number, lower, middle)</div></pre></td></tr></table></figure>
<h5 id="查找目录下的所有文件"><a href="#查找目录下的所有文件" class="headerlink" title="查找目录下的所有文件"></a>查找目录下的所有文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Test</span><span class="params">(rootDir)</span>:</span></div><div class="line">    <span class="keyword">for</span> lists <span class="keyword">in</span> os.listdir(rootDir):</div><div class="line">        path = os.path.join(rootDir, lists)</div><div class="line">        <span class="keyword">print</span> path</div><div class="line">        <span class="keyword">if</span> os.path.isdir(path):</div><div class="line">            Test(path)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
